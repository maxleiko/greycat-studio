{"version":3,"sources":["../../js/packages/greycat-core-wasm/src/esm.js","../../js/packages/greycat-core-wasm/src/__gen/greycat.js","../../js/packages/greycat-core-wasm/greycat.wasm","monaco-editor-hack.ts","../../js/packages/greycat-core/dist/esm/greycat.js","../../js/packages/greycat-core/dist/typings/greycat-core.d.ts","../node_modules/typescript/lib sync","components/pane/Pane.tsx","components/workspace-pane/WorkspacePane.tsx","components/icons/LanguageIcon.tsx","stores/PaneStore.ts","stores/EditorStore.ts","components/editor-pane/EditorPane.tsx","components/table/Table.tsx","components/json-tree/JsonTree.tsx","components/context-pane/ContextPane.tsx","components/console-pane/ConsolePane.tsx","Studio.tsx","../../js/packages/greycat-lang-monaco/dist/esm/monaco.contribution.js","stores/ConsoleStore.ts","stores/WorkspaceStore.ts","stores/StudioStore.ts","index.tsx","../../js/packages/greycat-core/dist/esm/__gen/keys.js","assets/images/greycat-head.svg"],"names":["_gen_greycat__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_greycat_wasm__WEBPACK_IMPORTED_MODULE_1__","_greycat_wasm__WEBPACK_IMPORTED_MODULE_1___default","n","__webpack_exports__","Object","locateFile","path","substr","length","a","Module","_scriptDir","document","currentScript","src","undefined","key","moduleOverrides","hasOwnProperty","status","toThrow","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","window","importScripts","process","Error","assert","nodeFS","nodePath","scriptDirectory","__dirname","filename","binary","ret","toString","buffer","Uint8Array","replace","slice","ex","ExitStatus","abort","read","f","data","readbuffer","scriptArgs","arguments","quit","self","location","href","indexOf","lastIndexOf","url","xhr","XMLHttpRequest","open","send","responseText","responseType","response","onload","onerror","title","out","console","log","bind","print","err","printErr","warn","STACK_ALIGN","staticAlloc","size","staticSealed","STATICTOP","TOTAL_MEMORY","alignMemory","factor","Math","ceil","warnOnce","text","shown","stackSave","stackRestore","stackAlloc","asm2wasmImports","f64-rem","x","y","debugger","Array","ABORT","condition","Pointer_stringify","ptr","t","hasUtf","i","HEAPU8","curr","String","fromCharCode","apply","subarray","min","UTF8ArrayToString","UTF8ToString","UTF8Decoder","TextDecoder","u8Array","idx","endPtr","decode","u0","u1","u2","u3","u4","str","ch","stringToUTF8Array","outU8Array","outIdx","maxBytesToWrite","startIdx","endIdx","u","charCodeAt","lengthBytesUTF8","len","allocateUTF8OnStack","HEAP8","demangleAll","func","stackTrace","js","stack","e","jsStackTrace","HEAP16","HEAP32","HEAPU32","STACK_BASE","STACKTOP","STACK_MAX","DYNAMIC_BASE","DYNAMICTOP_PTR","WASM_PAGE_SIZE","ASMJS_PAGE_SIZE","MIN_TOTAL_MEMORY","alignUp","multiple","updateGlobalBuffer","buf","updateGlobalBufferViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","checkStackCookie","enlargeMemory","PAGE_MULTIPLE","LIMIT","OLD_TOTAL_MEMORY","max","Date","now","replacement","byteLength","oldHEAP8","ArrayBuffer","set","_emscripten_replace_memory","Function","prototype","call","getOwnPropertyDescriptor","get","TOTAL_STACK","WebAssembly","Memory","initial","callRuntimeCallbacks","callbacks","callback","shift","arg","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","runtimeInitialized","runtimeExited","ensureInitRuntime","writeAsciiToMemory","dontAddNull","abs","Math_cos","cos","Math_sin","sin","Math_log","tan","acos","asin","atan","atan2","exp","Math_sqrt","sqrt","Math_ceil","Math_floor","floor","Math_pow","pow","runDependencies","imul","fround","round","clz32","trunc","runDependencyWatcher","dependenciesFulfilled","runDependencyTracking","addRunDependency","id","setInterval","clearInterval","dep","removeRunDependency","FS","error","init","createDataFile","createPreloadedFile","createLazyFile","mkdev","registerDevice","analyzePath","loadFilesFromDB","ErrnoError","dataURIPrefix","isDataURI","startsWith","wasmTextFile","wasmBinaryFile","asmjsCodeFile","info","global","env","asm2wasm","parent","exports","getBinary","doNativeWasm","providedBuffer","receiveInstance","instance","module","memory","newBuffer","oldBuffer","oldView","mergeMemory","NaN","Infinity","trueModule","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","fetch","Promise","resolve","reject","credentials","then","catch","instantiate","reason","instantiateStreaming","asmjsReallocBuffer","finalMethod","oldSize","grow","wasmReallocBuffer","TABLE_SIZE","MAX_TABLE_SIZE","Table","maximum","element","integrateWasmJS","ASM_CONSTS","$0","GreyCat","elements","Logger","debug","_module","$1","start","$2","$3","newWebSocketClient","destroyWebSocketClient","webSocketClientSend","STATIC_BASE","push","tempDoublePtr","SYSCALLS","varargs","getStr","get64","low","high","getZero","flush_NO_FILESYSTEM","fflush","printChar","___syscall146","buffers","which","stream","iov","iovcnt","j","errno","_emscripten_set_main_loop_timing","mode","value","Browser","mainLoop","timingMode","timingValue","scheduler","timeUntilNextTick","tickStartTime","_emscripten_get_now","setTimeout","runner","method","requestAnimationFrame","setImmediate","setImmediates","emscriptenMainLoopMessageId","addEventListener","event","target","stopPropagation","postMessage","_emscripten_set_main_loop","fps","simulateInfiniteLoop","noSetTiming","browserIterationFunc","thisMainLoopId","currentlyRunningMainloop","queue","blocker","remainingBlockers","remaining","next","counted","name","updateStatus","currentFrameNumber","ctx","runIter","SDL","audio","queueNewAudioData","pause","resume","message","expected","expectedBlockers","isFullscreen","pointerLock","moduleContextCreatedCallbacks","workers","initted","Blob","hasBlobConstructor","BlobBuilder","MozBlobBuilder","WebKitBlobBuilder","URLObject","URL","webkitURL","noImageDecoding","imagePlugin","canHandle","test","handle","byteArray","b","type","getMimetype","bb","append","getBlob","createObjectURL","img","Image","complete","canvas","createElement","width","height","getContext","drawImage","revokeObjectURL","audioPlugin","noAudioDecoding",".ogg",".wav",".mp3","done","finish","fail","Audio","BASE","leftchar","leftbits","PAD","encode64","safeSetTimeout","requestPointerLock","exitPointerLock","pointerLockChange","ev","preventDefault","createContext","useWebGL","setInModule","webGLContextAttributes","contextHandle","contextAttributes","antialias","alpha","attribute","GL","GLctx","makeContextCurrent","forEach","destroyContext","fullscreenHandlersInstalled","lockPointer","resizeCanvas","requestFullscreen","vrDevice","fullscreenChange","canvasContainer","parentNode","exitFullscreen","setFullscreenCanvasSize","updateCanvasDimensions","insertBefore","removeChild","setWindowedCanvasSize","appendChild","Element","vrDisplay","requestFullScreen","nextRAF","fakeRequestAnimationFrame","delay","safeCallback","allowAsyncCallbacks","queuedAsyncCallbacks","pauseAsyncCallbacks","resumeAsyncCallbacks","safeRequestAnimationFrame","timeout","safeSetInterval","jpg","jpeg","png","bmp","ogg","wav","mp3","getUserMedia","navigator","getMovementX","getMovementY","getMouseWheelDelta","delta","detail","wheelDelta","mouseX","mouseY","mouseMovementX","mouseMovementY","touches","lastTouches","calculateMouseEvent","rect","getBoundingClientRect","cw","scrollX","pageXOffset","scrollY","pageYOffset","touch","adjustedX","pageX","left","adjustedY","pageY","top","coords","identifier","last","asyncLoad","noRunDep","orig","random","getUniqueRunDependency","arrayBuffer","resizeListeners","updateResizeListeners","listener","setCanvasSize","noUpdates","windowedWidth","windowedHeight","flags","wNative","hNative","widthNative","heightNative","w","h","screen","style","removeProperty","setProperty","wgetRequests","nextWgetRequestHandle","getNextWgetRequestHandle","__exit","exit","_llvm_ceil_f64","_llvm_cos_f64","_llvm_floor_f64","_llvm_log2_f32","LN2","_llvm_log_f64","_llvm_pow_f64","_llvm_sin_f64","_llvm_sqrt_f64","_llvm_stacksave","LLVM_SAVEDSTACKS","dateNow","performance","asmGlobalArg","asmLibraryArg","getTotalMemory","abortOnCannotGrowMemory","abortStackOverflow","allocSize","nullFunc_ii","nullFunc_iiii","nullFunc_iijji","nullFunc_vi","nullFunc_vii","nullFunc_viidii","nullFunc_viidiiii","nullFunc_viiidiidi","nullFunc_viiii","nullFunc_viiiii","nullFunc_viiiiii","nullFunc_vijj","nullFunc_vijji","invoke_ii","index","a1","sp","invoke_iiii","a2","a3","invoke_iijji","a4","a5","a6","invoke_vi","invoke_vii","invoke_viidii","invoke_viidiiii","a7","invoke_viiidiidi","a8","invoke_viiii","invoke_viiiii","invoke_viiiiii","invoke_vijj","invoke_vijji","___assert_fail","line","___lock","___setErrNo","___syscall140","getStreamFromFD","offset_low","result","whence","offset","llseek","position","getdents","___syscall54","___syscall6","close","___unlock","_emscripten_asm_const_ii","code","a0","_emscripten_asm_const_iii","_emscripten_asm_const_iiii","_emscripten_asm_const_iiiii","_emscripten_exit_with_live_runtime","_emscripten_memcpy_big","dest","num","_exit","_llvm_log2_f64","_llvm_stackrestore","p","splice","asm","real____errno_location","real__ctx__create","real__ctx__get","real__ctx__type","real__double_array__to_string","real__fflush","real__free","real__function__create","real__function__pipe_key_with","real__function__pipe_with","real__gctx__bind","real__gctx__declare","real__gctx__declare_double","real__gctx__declare_int","real__gctx__declare_long","real__gctx__declare_null","real__gctx__declare_raw_string","real__gctx__execute","real__gctx__execute_key","real__gctx__execute_prepared","real__gctx__get_bool","real__gctx__get_double","real__gctx__get_int","real__gctx__get_long","real__gctx__get_raw_string","real__gctx__get_ulong","real__gctx__graph","real__gctx__json","real__gctx__on_end","real__gctx__ordinal","real__gctx__path","real__gctx__prepare","real__gctx__prepare_key","real__gctx__set_double","real__gctx__set_int","real__gctx__set_long","real__gctx__set_raw_string","real__gdouble_array__get","real__gdouble_array__set","real__gdouble_array__size","real__gfunction__create","real__gfunction__parse","real__gfunction__pipe","real__gfunction__pipe_key","real__gfunction__unsafe_dec_ref","real__gfunction__unsafe_set_key","real__ggraph__create_node_volatile","real__ggraph__declare_function","real__ggraph__declare_meta","real__ggraph__declare_plugin","real__ggraph__declare_type","real__ggraph__destroy","real__ggraph__disable_debug","real__ggraph__enable_debug","real__ggraph__function","real__ggraph__is_meta","real__ggraph__meta","real__ggraph__type","real__ggraph_export_functions","real__ggraph_export_types","real__gint_array__get","real__gint_array__set","real__gint_array__size","real__glong_array__get","real__glong_array__set","real__glong_array__size","real__gnode__get_bool","real__gnode__get_double","real__gnode__get_int","real__gnode__get_long","real__gnode__get_or_create","real__gnode__get_raw_string","real__gnode__json","real__gnode__set","real__gnode__set_double","real__gnode__set_int","real__gnode__set_long","real__gnode__set_null","real__gnode__set_raw_string","real__gnode_type__declare_attribute","real__gnode_type__declare_constant","real__gnode_type__json_to","real__gnode_type__key","real__gobject__un_mark","real__graph__configure_plugin","real__graph__create","real__graph__size_buffer","real__graph__size_cache","real__graph__size_heap","real__gstring__close","real__gstring__create","real__gstring__get","real__gstring__prepare","real__gstring_array__add","real__gstring_array__create","real__gstring_array__get","real__gstring_array__set","real__gstring_array__size","real__gulong_array__get","real__gulong_array__set","real__gulong_array__size","real__gwebsocket_client__on_msg","real__int_array__to_string","real__js_free","real__js_malloc","real__llvm_bswap_i32","real__long_array__to_string","real__main","real__malloc","real__node__get","real__node__graph","real__node__type","real__node_type__declare_constant_double","real__node_type__declare_constant_int","real__node_type__declare_constant_long","real__node_type__declare_constant_raw_string","real__node_type__graph","real__params__add_bool","real__params__add_double","real__params__add_function_key","real__params__add_int","real__params__add_long","real__params__add_null","real__params__add_object","real__params__add_string","real__params__add_var_key","real__params__add_var_key_new","real__params__create","real__plugin__create","real__read_bool","real__read_double","real__read_int","real__read_long","real__read_ulong","real__sbrk","real__string__set_size","real__string_array__to_string","real__ulong_array__to_string","real_establishStackSpace","real_getTempRet0","real_setTempRet0","real_setThrew","real_stackAlloc","real_stackRestore","real_stackSave","initialStackTop","this","defineProperty","old","constructor","run","args","doRun","shouldRunNow","cb","unshift","postRun","preRun","implicit","has","checkUnflushedContent","runCaller","argc","argv","toLog","abortDecorators","what","JSON","stringify","decorator","pop","MonacoEnvironment","[object Object]","moduleId","label","PUBLIC_PATH","d","Params","Graph","_greycat_core_wasm__WEBPACK_IMPORTED_MODULE_0__","_gen_keys__WEBPACK_IMPORTED_MODULE_1__","isomorphic_ws__WEBPACK_IMPORTED_MODULE_2__","NodeType","nptr","factory","graph_ptr","_node_type__graph","factories","_gnode_type__key","_gnode_type__declare_attribute","paramToKey","hash","js_str","ptr_str","_js_malloc","_node_type__declare_constant_raw_string","_js_free","_node_type__declare_constant_double","_node_type__declare_constant_int","_node_type__declare_constant_long","_gnode_type__declare_constant","g_function","anonymous_func_ptr","_function__create","_gobject__un_mark","_gstring__create","_gnode_type__json_to","_gstring__close","buffer_raw","_gstring__get","g_string","Context","userData","_gctx__execute_key","_gctx__execute","_gctx__prepare_execute_key","_gctx__prepare","_gctx__execute_prepared","_gctx__ordinal","body","_gctx__on_end","final_func_ptr","_gctx__graph","strPtr","_gctx__path","jsStr","_gctx__json","parse","_gctx__declare_raw_string","_gctx__declare_double","_gctx__declare_int","_gctx__declare_long","_gctx__declare_null","_gctx__set_raw_string","_gctx__set_double","_gctx__set_int","_gctx__set_long","prop","propKey","_ctx__type","g_double","_gctx__get_double","g_int","_gctx__get_int","g_long","_gctx__get_long","g_ulong","_gctx__get_ulong","g_bool","_gctx__get_bool","_gctx__get_raw_string","g_string_array","_ctx__get","StringArray","g_long_array","LongArray","g_ulong_array","ULongArray","g_int_array","IntArray","g_double_array","DoubleArray","Node","_gctx__bind","raw_c_str","_ulong_array__to_string","ts_str","_gulong_array__get","_gulong_array__set","_gulong_array__add","_gulong_array__size","_long_array__to_string","_glong_array__get","_glong_array__set","_glong_array__add","_glong_array__size","_int_array__to_string","_gint_array__get","_gint_array__set","_gint_array__add","_gint_array__size","_double_array__to_string","_gdouble_array__get","_gdouble_array__set","_gdouble_array__add","_gdouble_array__size","_string_array__to_string","gstring_ptr","_gstring_array__get","new_str_ptr","_gstring__prepare","new_ptr_raw","_string__set_size","_gstring_array__set","new_gstring","_gstring_array__add","new_values","add","_gstring_array__size","capacity","_params__create","_params__add_int","_params__add_long","_params__add_double","_params__add_bool","_params__add_null","_params__add_var_key","_params__add_var_key_new","_params__add_function_key","_params__add_string","_params__add_object","ikey","addString","addBool","addDouble","addInt","addLong","addFunctionKey","_gfunction__unsafe_set_key","sub","params","_function__pipe_key_with","_gfunction__pipe_key","_function__pipe_with","_gfunction__pipe","sub_ptr","greycatl_data","_gfunction__parse","pipe","g_sync","targetVar","g_declare_var","addAuto","g_value","addVarKeyNew","g_result","g_assign_var","addVarKey","srcVar","g_print","g_src","g_console","g_print_all","nodeType","g_new_node","g_node_type","timestamp","g_new_timepoint","g_time","property","g_set_attribute","g_prop","g_set_reference","g_read_property","nb_iteration","g_repeat","g_nb","g_sub","addTypedObject","g_foreach","g_load_global_index","g_id","g_new_global_index","g_load_master_index","g_configure_index","g_add_to_index","g_query_index","_gnode__json","_gnode__set_null","_gnode__set_raw_string","_gnode__set_double","_gnode__set_int","_gnode__set_long","_gnode__set","_node__graph","pkey","ptype","_node__type","g_null","_gnode__get_bool","_gnode__get_long","_gnode__get_double","_gnode__get_int","string_ptr","_gnode__get_raw_string","_node__get","prop_type","res_ptr","_gnode__get_or_create","_js_read_bool","_js_read_ulong","_js_read_long","_js_read_double","_js_read_int","g_node","cacheSize","bufferSize","_graph__create","_ggraph__enable_debug","_ggraph__disable_debug","meta_key","meta","_ggraph__is_meta","_ggraph__declare_meta","_ggraph__declare_function","_ggraph__declare_type","plugin","plug_ptr","_plugin__create","_ggraph__declare_plugin","_graph__configure_plugin","_gfunction__create","_ggraph__function","type_ptr","_ggraph__type","_ggraph__meta","_gfunction__unsafe_dec_ref","_ctx__create","new_ctx","vtype","_gstring_array__create","_ggraph__create_node_volatile","_ggraph_export_types","_ggraph_export_functions","_ggraph__destroy","_graph__size_heap","_graph__size_cache","_graph__size_buffer","WebSocketAdapter","s","socket","connected","isInitiliazed","onRuntimeInitialized","url_ptr","port","use_wss","address","rejectUnauthorized","binaryType","ws","onopen","onclose","onmessage","msgBuf","bug_len","_gwebsocket_client__on_msg","client_id","data_ptr","new_buffer","char","param","origin","paramHash","_gfunction__graph","webpackEmptyContext","req","keys","PaneTitle","className","children","react_default","classnames_default","PaneAction","onClick","Pane_Pane","Component","props","super","onMinimize","onMaximize","store","secondary","minimize","maximize","actions","resizeActions","titleNode","map","assign","isMinimized","pane_Pane","__decorate","index_module","WorkspacePane_WorkspacePane","onConnect","workspace","parseInt","checked","configure","graph","hostname","secured","htmlFor","onChange","setString","setNumber","setBoolean","workspace_pane_WorkspacePane","WorkspacePane_decorate","LanguageIcon","language","Icon","mdi","color","greycat_head_default","PaneStore","defaultSize","_isMinimized","_defaultSize","_paneSize","isSecondary","_isSecondary","paneSize","PaneStore_decorate","mobx_module","EditorStore_EditorStore","_files","Map","MAIN","uri","content","isOpen","isSelected","EXTENSIONS","file","select","state","files","selected","values","find","Boolean","opened","filter","EditorStore_decorate","_a","editor_main","_b","ICodeEditorViewState","_c","EditorPane_EditorPane","_editor","_updateModelDisposer","_interpretTimeout","onEditorDidMount","onEditorChange","onTabClicked","onTabCloseClicked","editor","createModel","editorDidMount","setModel","getModel","restoreViewState","addAction","keybindings","Shift","Enter","contextMenuGroupId","contextMenuOrder","execute","newValue","model","setContent","clearTimeout","interpretExtensions","react_monaco_editor_lib_default","theme","options","folding","extraEditorClassName","scrollBeyondLastLine","minimap","enabled","renderWhitespace","autoIndent","editor_pane_EditorPane","EditorPane_decorate","Table_Table","columns","rows","colMap","k","o","reduce","obj","oKey","toUpperCase","headerStyle","display","cols","col","Header","accessor","maxWidth","convertData","es","showPagination","pageSize","defaultPageSize","JsonTree_JsonTree","keypath","json_inspector_default","ContextPane_ContextPane","globalTypes","globalFunctions","esm","context_pane_ContextPane","ContextPane_decorate","ConsolePane_ConsolePane","_logsBottomEl","onClear","clear","_scrollToBottom","logs","l","level","_formatTime","time","ref","el","scrollIntoView","behavior","lodash_padstart_default","getHours","getMinutes","getSeconds","getMilliseconds","console_pane_ConsolePane","ConsolePane_decorate","gcDeclaration","typescript","typescriptDefaults","addExtraLib","Studio_Studio","onEditorSplitterDragFinished","onExecute","primaryPaneWidth","layout","fontFamily","package_0","lib_default","primaryPaneMaxHeight","primaryPaneMaxWidth","primaryPaneMinHeight","primaryPaneMinWidth","onDragFinished","primaryPaneHeight","primaryPaneClassName","src_Studio","Studio_decorate","__assign","Emitter","monaco","DEFAULT_SETTINGS","lint","lintOptions","strict","defaults","LanguageServiceDefaultsImpl","languageId","settings","_onDidChange","_gcTypes","_gcFunctions","_languageId","setSettings","enumerable","configurable","_settings","fire","addTypes","types","_this","dispose","addFunctions","functions","monaco_contribution","languages","greycat","register","extensions","onLanguage","wrap","all","m","setupMode","ConsoleStore_ConsoleStore","_logs","_push","ConsoleStore_decorate","WorkspaceStore_WorkspaceStore","_hostname","_port","_path","_secured","configurePlugin","g_websocket_client","g_url","g_port","g_use_wss","protocol","g_path","pathname","WorkspaceStore_decorate","WorkspaceStore_a","TS_OPTS","compilerOptions","ES2015","CommonJS","removeComments","StudioStore_StudioStore","_console","_workspace","_graph","newGraph","_data","_globalTypes","_globalFunctions","main","context","newContext","onEnd","toObject","newFunction","updateGlobalTypes","updateGlobalFunctions","outputText","extensionsLoader","declareFunction","exportTypes","exportFunctions","StudioStore_decorate","StudioStore_a","root","getElementById","errorTimeout","innerHTML","onReady","react_dom","g_true","g_false","g_template","g_matrix","g_number","g_ref_array","g_node_array","g_meta_key","g_var_key","g_var_key_new","g_var_offset","g_offset","g_read_offset","g_free_var","g_master_index","g_configure","g_it","g_it_offset","g_it_key","g_return","g_if_then_else","g_operator","g_then","g_else","g_all","g_name","g_result_temp","g_meta","g_session","g_sessions","g_node_generator","g_session_generator","g_ids","g_this","g_key","g_keys","g_binary_op","g_new_object","g_new_object_at","g_object_type","g_init","g_merge","g_print_append","g_get_all","g_set","g_value2","g_values","g_blob","g_blob_ext","g_any","g_any_node","g_page","g_pages","g_seq","g_offsets","g_function_key","g_from","g_new_node_timepoint","g_load","g_load_all","g_index","g_query","g_lookup","g_lookup_all","g_default","g_reference","g_index_hash","g_index_hash_candidates","g_index_hash_values","g_resolved_values","g_index_result","g_global_index","g_add","g_to","g_ordinal","g_param","g_set_at","g_execute_property","g_i","g_j","g_k","g_callee_origin","g_callee_session","g_new_session","g_noop","g_std","g_leveldb","g_rocksdb","g_websocket_server","g_openblas","g_cublas","g_eigen","g_hybridblas","g_mqtt","g_mqtt_topic","g_mqtt_topics_list","g_mqtt_custom_parser","g_opcua_server","g_opcua_client","g_opcua_node_identifier_list","g_node_identifier","g_gateway","g_remotes","g_subscriptions","g_cursor","g_max","g_grafana","g_cert"],"mappings":"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","file":"static/js/main.6ad56009.chunk.js","sourcesContent":["import greycat from './__gen/greycat';\nimport greycatModule from '../greycat.wasm';\n// Since webpack will change the name and potentially the path of the\n// `.wasm` file, we have to provide a `locateFile()` hook to redirect\n// to the appropriate URL.\n// More details: https://kripken.github.io/emscripten-site/docs/api_reference/module.html\nexport default greycat({\n  locateFile: (path) => {\n    if (path.substr(path.length - '.wasm'.length, path.length) === '.wasm') {\n      return greycatModule;\n    }\n    return path;\n  },\n});","\nvar Module = (function() {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n  return (\nfunction(Module) {\n  Module = Module || {};\n\n// Copyright 2010 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// The Module object: Our interface to the outside world. We import\n// and export values on it. There are various ways Module can be used:\n// 1. Not defined. We create it here\n// 2. A function parameter, function(Module) { ..generated code.. }\n// 3. pre-run appended it, var Module = {}; ..generated code..\n// 4. External script tag defines var Module.\n// We need to check if Module already exists (e.g. case 3 above).\n// Substitution will be replaced with actual code on later stage of the build,\n// this way Closure Compiler will not mangle it (e.g. case 4. above).\n// Note that if you want to run closure, and also to use Module\n// after the generated code, you will need to define   var Module = {};\n// before the code. Then that object will be used in the code, and you\n// can continue to use Module afterwards as well.\nvar Module = typeof Module !== 'undefined' ? Module : {};\n\n// --pre-jses are emitted after the Module integration code, so that they can\n// refer to Module (if they choose; they can also define Module)\n// {{PRE_JSES}}\n\n// Sometimes an existing Module object exists with properties\n// meant to overwrite the default module functionality. Here\n// we collect those properties and reapply _after_ we configure\n// the current environment's defaults to avoid having to be so\n// defensive during initialization.\nvar moduleOverrides = {};\nvar key;\nfor (key in Module) {\n  if (Module.hasOwnProperty(key)) {\n    moduleOverrides[key] = Module[key];\n  }\n}\n\nModule['arguments'] = [];\nModule['thisProgram'] = './this.program';\nModule['quit'] = function(status, toThrow) {\n  throw toThrow;\n};\nModule['preRun'] = [];\nModule['postRun'] = [];\n\n// Determine the runtime environment we are in. You can customize this by\n// setting the ENVIRONMENT setting at compile time (see settings.js).\n\nvar ENVIRONMENT_IS_WEB = false;\nvar ENVIRONMENT_IS_WORKER = false;\nvar ENVIRONMENT_IS_NODE = false;\nvar ENVIRONMENT_IS_SHELL = false;\nENVIRONMENT_IS_WEB = typeof window === 'object';\nENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\nENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\nENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\nif (Module['ENVIRONMENT']) {\n  throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');\n}\n\n// Three configurations we can be running in:\n// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\n// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\n// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\n\nassert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');\nassert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead');\n\n// `/` should be present at the end if `scriptDirectory` is not empty\nvar scriptDirectory = '';\nfunction locateFile(path) {\n  if (Module['locateFile']) {\n    return Module['locateFile'](path, scriptDirectory);\n  } else {\n    return scriptDirectory + path;\n  }\n}\n\nif (ENVIRONMENT_IS_NODE) {\n  scriptDirectory = __dirname + '/';\n\n  // Expose functionality in the same simple way that the shells work\n  // Note that we pollute the global namespace here, otherwise we break in node\n  var nodeFS;\n  var nodePath;\n\n  Module['read'] = function shell_read(filename, binary) {\n    var ret;\n      if (!nodeFS) nodeFS = require('fs');\n      if (!nodePath) nodePath = require('path');\n      filename = nodePath['normalize'](filename);\n      ret = nodeFS['readFileSync'](filename);\n    return binary ? ret : ret.toString();\n  };\n\n  Module['readBinary'] = function readBinary(filename) {\n    var ret = Module['read'](filename, true);\n    if (!ret.buffer) {\n      ret = new Uint8Array(ret);\n    }\n    assert(ret.buffer);\n    return ret;\n  };\n\n  if (process['argv'].length > 1) {\n    Module['thisProgram'] = process['argv'][1].replace(/\\\\/g, '/');\n  }\n\n  Module['arguments'] = process['argv'].slice(2);\n\n  // MODULARIZE will export the module in the proper place outside, we don't need to export here\n\n  process['on']('uncaughtException', function(ex) {\n    // suppress ExitStatus exceptions from showing an error\n    if (!(ex instanceof ExitStatus)) {\n      throw ex;\n    }\n  });\n  // Currently node will swallow unhandled rejections, but this behavior is\n  // deprecated, and in the future it will exit with error status.\n  process['on']('unhandledRejection', abort);\n\n  Module['quit'] = function(status) {\n    process['exit'](status);\n  };\n\n  Module['inspect'] = function () { return '[Emscripten Module object]'; };\n} else\nif (ENVIRONMENT_IS_SHELL) {\n\n\n  if (typeof read != 'undefined') {\n    Module['read'] = function shell_read(f) {\n      return read(f);\n    };\n  }\n\n  Module['readBinary'] = function readBinary(f) {\n    var data;\n    if (typeof readbuffer === 'function') {\n      return new Uint8Array(readbuffer(f));\n    }\n    data = read(f, 'binary');\n    assert(typeof data === 'object');\n    return data;\n  };\n\n  if (typeof scriptArgs != 'undefined') {\n    Module['arguments'] = scriptArgs;\n  } else if (typeof arguments != 'undefined') {\n    Module['arguments'] = arguments;\n  }\n\n  if (typeof quit === 'function') {\n    Module['quit'] = function(status) {\n      quit(status);\n    }\n  }\n} else\nif (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n  if (ENVIRONMENT_IS_WORKER) { // Check worker, not web, since window could be polyfilled\n    scriptDirectory = self.location.href;\n  } else if (document.currentScript) { // web\n    scriptDirectory = document.currentScript.src;\n  }\n  // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\n  // is gone, so we saved it, and we use it here instead of any other info.\n  if (_scriptDir) {\n    scriptDirectory = _scriptDir;\n  }\n  // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n  // otherwise, slice off the final part of the url to find the script directory.\n  // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n  // and scriptDirectory will correctly be replaced with an empty string.\n  if (scriptDirectory.indexOf('blob:') !== 0) {\n    scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/')+1);\n  } else {\n    scriptDirectory = '';\n  }\n\n\n  Module['read'] = function shell_read(url) {\n      var xhr = new XMLHttpRequest();\n      xhr.open('GET', url, false);\n      xhr.send(null);\n      return xhr.responseText;\n  };\n\n  if (ENVIRONMENT_IS_WORKER) {\n    Module['readBinary'] = function readBinary(url) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.responseType = 'arraybuffer';\n        xhr.send(null);\n        return new Uint8Array(xhr.response);\n    };\n  }\n\n  Module['readAsync'] = function readAsync(url, onload, onerror) {\n    var xhr = new XMLHttpRequest();\n    xhr.open('GET', url, true);\n    xhr.responseType = 'arraybuffer';\n    xhr.onload = function xhr_onload() {\n      if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0\n        onload(xhr.response);\n        return;\n      }\n      onerror();\n    };\n    xhr.onerror = onerror;\n    xhr.send(null);\n  };\n\n  Module['setWindowTitle'] = function(title) { document.title = title };\n} else\n{\n  throw new Error('environment detection error');\n}\n\n// Set up the out() and err() hooks, which are how we can print to stdout or\n// stderr, respectively.\n// If the user provided Module.print or printErr, use that. Otherwise,\n// console.log is checked first, as 'print' on the web will open a print dialogue\n// printErr is preferable to console.warn (works better in shells)\n// bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\nvar out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : (typeof print !== 'undefined' ? print : null));\nvar err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : ((typeof console !== 'undefined' && console.warn.bind(console)) || out));\n\n// Merge back in the overrides\nfor (key in moduleOverrides) {\n  if (moduleOverrides.hasOwnProperty(key)) {\n    Module[key] = moduleOverrides[key];\n  }\n}\n// Free the object hierarchy contained in the overrides, this lets the GC\n// reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\nmoduleOverrides = undefined;\n\n\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// {{PREAMBLE_ADDITIONS}}\n\nvar STACK_ALIGN = 16;\n\n// stack management, and other functionality that is provided by the compiled code,\n// should not be used before it is ready\nstackSave = stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function() {\n  abort('cannot use the stack before compiled code is ready to run, and has provided stack access');\n};\n\nfunction staticAlloc(size) {\n  assert(!staticSealed);\n  var ret = STATICTOP;\n  STATICTOP = (STATICTOP + size + 15) & -16;\n  assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');\n  return ret;\n}\n\nfunction dynamicAlloc(size) {\n  assert(DYNAMICTOP_PTR);\n  var ret = HEAP32[DYNAMICTOP_PTR>>2];\n  var end = (ret + size + 15) & -16;\n  HEAP32[DYNAMICTOP_PTR>>2] = end;\n  if (end >= TOTAL_MEMORY) {\n    var success = enlargeMemory();\n    if (!success) {\n      HEAP32[DYNAMICTOP_PTR>>2] = ret;\n      return 0;\n    }\n  }\n  return ret;\n}\n\nfunction alignMemory(size, factor) {\n  if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\n  var ret = size = Math.ceil(size / factor) * factor;\n  return ret;\n}\n\nfunction getNativeTypeSize(type) {\n  switch (type) {\n    case 'i1': case 'i8': return 1;\n    case 'i16': return 2;\n    case 'i32': return 4;\n    case 'i64': return 8;\n    case 'float': return 4;\n    case 'double': return 8;\n    default: {\n      if (type[type.length-1] === '*') {\n        return 4; // A pointer\n      } else if (type[0] === 'i') {\n        var bits = parseInt(type.substr(1));\n        assert(bits % 8 === 0);\n        return bits / 8;\n      } else {\n        return 0;\n      }\n    }\n  }\n}\n\nfunction warnOnce(text) {\n  if (!warnOnce.shown) warnOnce.shown = {};\n  if (!warnOnce.shown[text]) {\n    warnOnce.shown[text] = 1;\n    err(text);\n  }\n}\n\nvar asm2wasmImports = { // special asm2wasm imports\n    \"f64-rem\": function(x, y) {\n        return x % y;\n    },\n    \"debugger\": function() {\n        debugger;\n    }\n};\n\n\n\nvar jsCallStartIndex = 1;\nvar functionPointers = new Array(0);\n\n// 'sig' parameter is only used on LLVM wasm backend\nfunction addFunction(func, sig) {\n  if (typeof sig === 'undefined') {\n    err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');\n  }\n  var base = 0;\n  for (var i = base; i < base + 0; i++) {\n    if (!functionPointers[i]) {\n      functionPointers[i] = func;\n      return jsCallStartIndex + i;\n    }\n  }\n  throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\n}\n\nfunction removeFunction(index) {\n  functionPointers[index-jsCallStartIndex] = null;\n}\n\nvar funcWrappers = {};\n\nfunction getFuncWrapper(func, sig) {\n  if (!func) return; // on null pointer, return undefined\n  assert(sig);\n  if (!funcWrappers[sig]) {\n    funcWrappers[sig] = {};\n  }\n  var sigCache = funcWrappers[sig];\n  if (!sigCache[func]) {\n    // optimize away arguments usage in common cases\n    if (sig.length === 1) {\n      sigCache[func] = function dynCall_wrapper() {\n        return dynCall(sig, func);\n      };\n    } else if (sig.length === 2) {\n      sigCache[func] = function dynCall_wrapper(arg) {\n        return dynCall(sig, func, [arg]);\n      };\n    } else {\n      // general case\n      sigCache[func] = function dynCall_wrapper() {\n        return dynCall(sig, func, Array.prototype.slice.call(arguments));\n      };\n    }\n  }\n  return sigCache[func];\n}\n\n\nfunction makeBigInt(low, high, unsigned) {\n  return unsigned ? ((+((low>>>0)))+((+((high>>>0)))*4294967296.0)) : ((+((low>>>0)))+((+((high|0)))*4294967296.0));\n}\n\nfunction dynCall(sig, ptr, args) {\n  if (args && args.length) {\n    assert(args.length == sig.length-1);\n    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n    return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\n  } else {\n    assert(sig.length == 1);\n    assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n    return Module['dynCall_' + sig].call(null, ptr);\n  }\n}\n\n\nfunction getCompilerSetting(name) {\n  throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';\n}\n\nvar Runtime = {\n  // FIXME backwards compatibility layer for ports. Support some Runtime.*\n  //       for now, fix it there, then remove it from here. That way we\n  //       can minimize any period of breakage.\n  dynCall: dynCall, // for SDL2 port\n  // helpful errors\n  getTempRet0: function() { abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n  staticAlloc: function() { abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n  stackAlloc: function() { abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"') },\n};\n\n// The address globals begin at. Very low in memory, for code size and optimization opportunities.\n// Above 0 is static memory, starting with globals.\n// Then the stack.\n// Then 'dynamic' memory for sbrk.\nvar GLOBAL_BASE = 1024;\n\n\n// === Preamble library stuff ===\n\n// Documentation for the public APIs defined in this file must be updated in:\n//    site/source/docs/api_reference/preamble.js.rst\n// A prebuilt local version of the documentation is available at:\n//    site/build/text/docs/api_reference/preamble.js.txt\n// You can also build docs locally as HTML or other formats in site/\n// An online HTML version (which may be of a different version of Emscripten)\n//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n\n\n\n//========================================\n// Runtime essentials\n//========================================\n\n// whether we are quitting the application. no code should run after this.\n// set in exit() and abort()\nvar ABORT = false;\n\n// set by exit() and abort().  Passed to 'onExit' handler.\n// NOTE: This is also used as the process return code code in shell environments\n// but only when noExitRuntime is false.\nvar EXITSTATUS = 0;\n\n/** @type {function(*, string=)} */\nfunction assert(condition, text) {\n  if (!condition) {\n    abort('Assertion failed: ' + text);\n  }\n}\n\nvar globalScope = this;\n\n// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\nfunction getCFunc(ident) {\n  var func = Module['_' + ident]; // closure exported function\n  assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\n  return func;\n}\n\nvar JSfuncs = {\n  // Helpers for cwrap -- it can't refer to Runtime directly because it might\n  // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find\n  // out what the minified function name is.\n  'stackSave': function() {\n    stackSave()\n  },\n  'stackRestore': function() {\n    stackRestore()\n  },\n  // type conversion from js to c\n  'arrayToC' : function(arr) {\n    var ret = stackAlloc(arr.length);\n    writeArrayToMemory(arr, ret);\n    return ret;\n  },\n  'stringToC' : function(str) {\n    var ret = 0;\n    if (str !== null && str !== undefined && str !== 0) { // null string\n      // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\n      var len = (str.length << 2) + 1;\n      ret = stackAlloc(len);\n      stringToUTF8(str, ret, len);\n    }\n    return ret;\n  }\n};\n\n// For fast lookup of conversion functions\nvar toC = {\n  'string': JSfuncs['stringToC'], 'array': JSfuncs['arrayToC']\n};\n\n\n// C calling interface.\nfunction ccall(ident, returnType, argTypes, args, opts) {\n  function convertReturnValue(ret) {\n    if (returnType === 'string') return Pointer_stringify(ret);\n    if (returnType === 'boolean') return Boolean(ret);\n    return ret;\n  }\n\n  var func = getCFunc(ident);\n  var cArgs = [];\n  var stack = 0;\n  assert(returnType !== 'array', 'Return type should not be \"array\".');\n  if (args) {\n    for (var i = 0; i < args.length; i++) {\n      var converter = toC[argTypes[i]];\n      if (converter) {\n        if (stack === 0) stack = stackSave();\n        cArgs[i] = converter(args[i]);\n      } else {\n        cArgs[i] = args[i];\n      }\n    }\n  }\n  var ret = func.apply(null, cArgs);\n  ret = convertReturnValue(ret);\n  if (stack !== 0) stackRestore(stack);\n  return ret;\n}\n\nfunction cwrap(ident, returnType, argTypes, opts) {\n  return function() {\n    return ccall(ident, returnType, argTypes, arguments, opts);\n  }\n}\n\n/** @type {function(number, number, string, boolean=)} */\nfunction setValue(ptr, value, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': HEAP8[((ptr)>>0)]=value; break;\n      case 'i8': HEAP8[((ptr)>>0)]=value; break;\n      case 'i16': HEAP16[((ptr)>>1)]=value; break;\n      case 'i32': HEAP32[((ptr)>>2)]=value; break;\n      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= 1.0 ? (tempDouble > 0.0 ? ((Math_min((+(Math_floor((tempDouble)/4294967296.0))), 4294967295.0))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296.0)))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;\n      case 'float': HEAPF32[((ptr)>>2)]=value; break;\n      case 'double': HEAPF64[((ptr)>>3)]=value; break;\n      default: abort('invalid type for setValue: ' + type);\n    }\n}\n\n/** @type {function(number, string, boolean=)} */\nfunction getValue(ptr, type, noSafe) {\n  type = type || 'i8';\n  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit\n    switch(type) {\n      case 'i1': return HEAP8[((ptr)>>0)];\n      case 'i8': return HEAP8[((ptr)>>0)];\n      case 'i16': return HEAP16[((ptr)>>1)];\n      case 'i32': return HEAP32[((ptr)>>2)];\n      case 'i64': return HEAP32[((ptr)>>2)];\n      case 'float': return HEAPF32[((ptr)>>2)];\n      case 'double': return HEAPF64[((ptr)>>3)];\n      default: abort('invalid type for getValue: ' + type);\n    }\n  return null;\n}\n\nvar ALLOC_NORMAL = 0; // Tries to use _malloc()\nvar ALLOC_STACK = 1; // Lives for the duration of the current function call\nvar ALLOC_STATIC = 2; // Cannot be freed\nvar ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk\nvar ALLOC_NONE = 4; // Do not allocate\n\n// allocate(): This is for internal use. You can use it yourself as well, but the interface\n//             is a little tricky (see docs right below). The reason is that it is optimized\n//             for multiple syntaxes to save space in generated code. So you should\n//             normally not use allocate(), and instead allocate memory using _malloc(),\n//             initialize it with setValue(), and so forth.\n// @slab: An array of data, or a number. If a number, then the size of the block to allocate,\n//        in *bytes* (note that this is sometimes confusing: the next parameter does not\n//        affect this!)\n// @types: Either an array of types, one for each byte (or 0 if no type at that position),\n//         or a single type which is used for the entire block. This only matters if there\n//         is initial data - if @slab is a number, then this does not matter at all and is\n//         ignored.\n// @allocator: How to allocate memory, see ALLOC_*\n/** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\nfunction allocate(slab, types, allocator, ptr) {\n  var zeroinit, size;\n  if (typeof slab === 'number') {\n    zeroinit = true;\n    size = slab;\n  } else {\n    zeroinit = false;\n    size = slab.length;\n  }\n\n  var singleType = typeof types === 'string' ? types : null;\n\n  var ret;\n  if (allocator == ALLOC_NONE) {\n    ret = ptr;\n  } else {\n    ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));\n  }\n\n  if (zeroinit) {\n    var stop;\n    ptr = ret;\n    assert((ret & 3) == 0);\n    stop = ret + (size & ~3);\n    for (; ptr < stop; ptr += 4) {\n      HEAP32[((ptr)>>2)]=0;\n    }\n    stop = ret + size;\n    while (ptr < stop) {\n      HEAP8[((ptr++)>>0)]=0;\n    }\n    return ret;\n  }\n\n  if (singleType === 'i8') {\n    if (slab.subarray || slab.slice) {\n      HEAPU8.set(/** @type {!Uint8Array} */ (slab), ret);\n    } else {\n      HEAPU8.set(new Uint8Array(slab), ret);\n    }\n    return ret;\n  }\n\n  var i = 0, type, typeSize, previousType;\n  while (i < size) {\n    var curr = slab[i];\n\n    type = singleType || types[i];\n    if (type === 0) {\n      i++;\n      continue;\n    }\n    assert(type, 'Must know what type to store in allocate!');\n\n    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\n\n    setValue(ret+i, curr, type);\n\n    // no need to look up size unless type changes, so cache it\n    if (previousType !== type) {\n      typeSize = getNativeTypeSize(type);\n      previousType = type;\n    }\n    i += typeSize;\n  }\n\n  return ret;\n}\n\n// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\nfunction getMemory(size) {\n  if (!staticSealed) return staticAlloc(size);\n  if (!runtimeInitialized) return dynamicAlloc(size);\n  return _malloc(size);\n}\n\n/** @type {function(number, number=)} */\nfunction Pointer_stringify(ptr, length) {\n  if (length === 0 || !ptr) return '';\n  // Find the length, and check for UTF while doing so\n  var hasUtf = 0;\n  var t;\n  var i = 0;\n  while (1) {\n    assert(ptr + i < TOTAL_MEMORY);\n    t = HEAPU8[(((ptr)+(i))>>0)];\n    hasUtf |= t;\n    if (t == 0 && !length) break;\n    i++;\n    if (length && i == length) break;\n  }\n  if (!length) length = i;\n\n  var ret = '';\n\n  if (hasUtf < 128) {\n    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack\n    var curr;\n    while (length > 0) {\n      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\n      ret = ret ? ret + curr : curr;\n      ptr += MAX_CHUNK;\n      length -= MAX_CHUNK;\n    }\n    return ret;\n  }\n  return UTF8ToString(ptr);\n}\n\n// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nfunction AsciiToString(ptr) {\n  var str = '';\n  while (1) {\n    var ch = HEAP8[((ptr++)>>0)];\n    if (!ch) return str;\n    str += String.fromCharCode(ch);\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\n\nfunction stringToAscii(str, outPtr) {\n  return writeAsciiToMemory(str, outPtr, false);\n}\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\n// a copy of that string as a Javascript String object.\n\nvar UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\nfunction UTF8ArrayToString(u8Array, idx) {\n  var endPtr = idx;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  while (u8Array[endPtr]) ++endPtr;\n\n  if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n    return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\n  } else {\n    var u0, u1, u2, u3, u4, u5;\n\n    var str = '';\n    while (1) {\n      // For UTF8 byte structure, see:\n      // http://en.wikipedia.org/wiki/UTF-8#Description\n      // https://www.ietf.org/rfc/rfc2279.txt\n      // https://tools.ietf.org/html/rfc3629\n      u0 = u8Array[idx++];\n      if (!u0) return str;\n      if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }\n      u1 = u8Array[idx++] & 63;\n      if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }\n      u2 = u8Array[idx++] & 63;\n      if ((u0 & 0xF0) == 0xE0) {\n        u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;\n      } else {\n        u3 = u8Array[idx++] & 63;\n        if ((u0 & 0xF8) == 0xF0) {\n          u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;\n        } else {\n          u4 = u8Array[idx++] & 63;\n          if ((u0 & 0xFC) == 0xF8) {\n            u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;\n          } else {\n            u5 = u8Array[idx++] & 63;\n            u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;\n          }\n        }\n      }\n      if (u0 < 0x10000) {\n        str += String.fromCharCode(u0);\n      } else {\n        var ch = u0 - 0x10000;\n        str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n      }\n    }\n  }\n}\n\n// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nfunction UTF8ToString(ptr) {\n  return UTF8ArrayToString(HEAPU8,ptr);\n}\n\n// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\n// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\n//   outIdx: The starting offset in the array to begin the copying.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array.\n//                    This count should include the null terminator,\n//                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n    return 0;\n\n  var startIdx = outIdx;\n  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) {\n      var u1 = str.charCodeAt(++i);\n      u = 0x10000 + ((u & 0x3FF) << 10) | (u1 & 0x3FF);\n    }\n    if (u <= 0x7F) {\n      if (outIdx >= endIdx) break;\n      outU8Array[outIdx++] = u;\n    } else if (u <= 0x7FF) {\n      if (outIdx + 1 >= endIdx) break;\n      outU8Array[outIdx++] = 0xC0 | (u >> 6);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0xFFFF) {\n      if (outIdx + 2 >= endIdx) break;\n      outU8Array[outIdx++] = 0xE0 | (u >> 12);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0x1FFFFF) {\n      if (outIdx + 3 >= endIdx) break;\n      outU8Array[outIdx++] = 0xF0 | (u >> 18);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else if (u <= 0x3FFFFFF) {\n      if (outIdx + 4 >= endIdx) break;\n      outU8Array[outIdx++] = 0xF8 | (u >> 24);\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    } else {\n      if (outIdx + 5 >= endIdx) break;\n      outU8Array[outIdx++] = 0xFC | (u >> 30);\n      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);\n      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);\n      outU8Array[outIdx++] = 0x80 | (u & 63);\n    }\n  }\n  // Null-terminate the pointer to the buffer.\n  outU8Array[outIdx] = 0;\n  return outIdx - startIdx;\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n// Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF8(str, outPtr, maxBytesToWrite) {\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF8(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var u = str.charCodeAt(i); // possibly a lead surrogate\n    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);\n    if (u <= 0x7F) {\n      ++len;\n    } else if (u <= 0x7FF) {\n      len += 2;\n    } else if (u <= 0xFFFF) {\n      len += 3;\n    } else if (u <= 0x1FFFFF) {\n      len += 4;\n    } else if (u <= 0x3FFFFFF) {\n      len += 5;\n    } else {\n      len += 6;\n    }\n  }\n  return len;\n}\n\n// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\n// a copy of that string as a Javascript String object.\n\nvar UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\nfunction UTF16ToString(ptr) {\n  assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');\n  var endPtr = ptr;\n  // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n  // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n  var idx = endPtr >> 1;\n  while (HEAP16[idx]) ++idx;\n  endPtr = idx << 1;\n\n  if (endPtr - ptr > 32 && UTF16Decoder) {\n    return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n  } else {\n    var i = 0;\n\n    var str = '';\n    while (1) {\n      var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];\n      if (codeUnit == 0) return str;\n      ++i;\n      // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\n      str += String.fromCharCode(codeUnit);\n    }\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\n// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF16(str, outPtr, maxBytesToWrite) {\n  assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n  if (maxBytesToWrite === undefined) {\n    maxBytesToWrite = 0x7FFFFFFF;\n  }\n  if (maxBytesToWrite < 2) return 0;\n  maxBytesToWrite -= 2; // Null terminator.\n  var startPtr = outPtr;\n  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;\n  for (var i = 0; i < numCharsToWrite; ++i) {\n    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    HEAP16[((outPtr)>>1)]=codeUnit;\n    outPtr += 2;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP16[((outPtr)>>1)]=0;\n  return outPtr - startPtr;\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF16(str) {\n  return str.length*2;\n}\n\nfunction UTF32ToString(ptr) {\n  assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');\n  var i = 0;\n\n  var str = '';\n  while (1) {\n    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];\n    if (utf32 == 0)\n      return str;\n    ++i;\n    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    if (utf32 >= 0x10000) {\n      var ch = utf32 - 0x10000;\n      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));\n    } else {\n      str += String.fromCharCode(utf32);\n    }\n  }\n}\n\n// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\n// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\n// Parameters:\n//   str: the Javascript string to copy.\n//   outPtr: Byte address in Emscripten HEAP where to write the string to.\n//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\n//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\n// Returns the number of bytes written, EXCLUDING the null terminator.\n\nfunction stringToUTF32(str, outPtr, maxBytesToWrite) {\n  assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');\n  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n  if (maxBytesToWrite === undefined) {\n    maxBytesToWrite = 0x7FFFFFFF;\n  }\n  if (maxBytesToWrite < 4) return 0;\n  var startPtr = outPtr;\n  var endPtr = startPtr + maxBytesToWrite - 4;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n      var trailSurrogate = str.charCodeAt(++i);\n      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);\n    }\n    HEAP32[((outPtr)>>2)]=codeUnit;\n    outPtr += 4;\n    if (outPtr + 4 > endPtr) break;\n  }\n  // Null-terminate the pointer to the HEAP.\n  HEAP32[((outPtr)>>2)]=0;\n  return outPtr - startPtr;\n}\n\n// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\nfunction lengthBytesUTF32(str) {\n  var len = 0;\n  for (var i = 0; i < str.length; ++i) {\n    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n    // See http://unicode.org/faq/utf_bom.html#utf16-3\n    var codeUnit = str.charCodeAt(i);\n    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\n    len += 4;\n  }\n\n  return len;\n}\n\n// Allocate heap space for a JS string, and write it there.\n// It is the responsibility of the caller to free() that memory.\nfunction allocateUTF8(str) {\n  var size = lengthBytesUTF8(str) + 1;\n  var ret = _malloc(size);\n  if (ret) stringToUTF8Array(str, HEAP8, ret, size);\n  return ret;\n}\n\n// Allocate stack space for a JS string, and write it there.\nfunction allocateUTF8OnStack(str) {\n  var size = lengthBytesUTF8(str) + 1;\n  var ret = stackAlloc(size);\n  stringToUTF8Array(str, HEAP8, ret, size);\n  return ret;\n}\n\nfunction demangle(func) {\n  warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');\n  return func;\n}\n\nfunction demangleAll(text) {\n  var regex =\n    /__Z[\\w\\d_]+/g;\n  return text.replace(regex,\n    function(x) {\n      var y = demangle(x);\n      return x === y ? x : (y + ' [' + x + ']');\n    });\n}\n\nfunction jsStackTrace() {\n  var err = new Error();\n  if (!err.stack) {\n    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\n    // so try that as a special-case.\n    try {\n      throw new Error(0);\n    } catch(e) {\n      err = e;\n    }\n    if (!err.stack) {\n      return '(no stack trace available)';\n    }\n  }\n  return err.stack.toString();\n}\n\nfunction stackTrace() {\n  var js = jsStackTrace();\n  if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\n  return demangleAll(js);\n}\n\n// Memory management\n\nvar PAGE_SIZE = 16384;\nvar WASM_PAGE_SIZE = 65536;\nvar ASMJS_PAGE_SIZE = 16777216;\nvar MIN_TOTAL_MEMORY = 16777216;\n\nfunction alignUp(x, multiple) {\n  if (x % multiple > 0) {\n    x += multiple - (x % multiple);\n  }\n  return x;\n}\n\nvar HEAP,\n/** @type {ArrayBuffer} */\n  buffer,\n/** @type {Int8Array} */\n  HEAP8,\n/** @type {Uint8Array} */\n  HEAPU8,\n/** @type {Int16Array} */\n  HEAP16,\n/** @type {Uint16Array} */\n  HEAPU16,\n/** @type {Int32Array} */\n  HEAP32,\n/** @type {Uint32Array} */\n  HEAPU32,\n/** @type {Float32Array} */\n  HEAPF32,\n/** @type {Float64Array} */\n  HEAPF64;\n\nfunction updateGlobalBuffer(buf) {\n  Module['buffer'] = buffer = buf;\n}\n\nfunction updateGlobalBufferViews() {\n  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\n  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\n  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\n  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\n  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\n  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\n  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\n  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\n}\n\nvar STATIC_BASE, STATICTOP, staticSealed; // static area\nvar STACK_BASE, STACKTOP, STACK_MAX; // stack area\nvar DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk\n\n  STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\n  staticSealed = false;\n\n\n// Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.\nfunction writeStackCookie() {\n  assert((STACK_MAX & 3) == 0);\n  HEAPU32[(STACK_MAX >> 2)-1] = 0x02135467;\n  HEAPU32[(STACK_MAX >> 2)-2] = 0x89BACDFE;\n}\n\nfunction checkStackCookie() {\n  if (HEAPU32[(STACK_MAX >> 2)-1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2)-2] != 0x89BACDFE) {\n    abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2)-2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2)-1].toString(16));\n  }\n  // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.\n  if (HEAP32[0] !== 0x63736d65 /* 'emsc' */) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';\n}\n\nfunction abortStackOverflow(allocSize) {\n  abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - stackSave() + allocSize) + ' bytes available!');\n}\n\n\nfunction abortOnCannotGrowMemory() {\n  abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\n}\n\nif (!Module['reallocBuffer']) Module['reallocBuffer'] = function(size) {\n  var ret;\n  try {\n    var oldHEAP8 = HEAP8;\n    ret = new ArrayBuffer(size);\n    var temp = new Int8Array(ret);\n    temp.set(oldHEAP8);\n  } catch(e) {\n    return false;\n  }\n  var success = _emscripten_replace_memory(ret);\n  if (!success) return false;\n  return ret;\n};\n\nfunction enlargeMemory() {\n  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.\n  assert(HEAP32[DYNAMICTOP_PTR>>2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.\n\n\n  var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\n  var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.\n\n  if (HEAP32[DYNAMICTOP_PTR>>2] > LIMIT) {\n    err('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR>>2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');\n    return false;\n  }\n\n  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;\n  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.\n\n  while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR>>2]) { // Keep incrementing the heap size as long as it's less than what is requested.\n    if (TOTAL_MEMORY <= 536870912) {\n      TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...\n    } else {\n      // ..., but after that, add smaller increments towards 2GB, which we cannot reach\n      TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);\n      if (TOTAL_MEMORY === OLD_TOTAL_MEMORY) {\n        warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + TOTAL_MEMORY);\n      }\n    }\n  }\n\n\n  var start = Date.now();\n\n  var replacement = Module['reallocBuffer'](TOTAL_MEMORY);\n  if (!replacement || replacement.byteLength != TOTAL_MEMORY) {\n    err('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');\n    if (replacement) {\n      err('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);\n    }\n    // restore the state to before this call, we failed\n    TOTAL_MEMORY = OLD_TOTAL_MEMORY;\n    return false;\n  }\n\n  // everything worked\n\n  updateGlobalBuffer(replacement);\n  updateGlobalBufferViews();\n\n  if (!Module[\"usingWasm\"]) {\n    err('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);\n  }\n\n\n  return true;\n}\n\nvar byteLength;\ntry {\n  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);\n  byteLength(new ArrayBuffer(4)); // can fail on older ie\n} catch(e) { // can fail on older node/v8\n  byteLength = function(buffer) { return buffer.byteLength; };\n}\n\nvar TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;\nvar TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;\nif (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')');\n\n// Initialize the runtime's memory\n// check for full engine support (use string 'subarray' to avoid closure compiler confusion)\nassert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined,\n       'JS engine does not provide full typed array support');\n\n\n\n// Use a provided buffer, if there is one, or else allocate a new one\nif (Module['buffer']) {\n  buffer = Module['buffer'];\n  assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);\n} else {\n  // Use a WebAssembly memory where available\n  if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {\n    assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);\n    Module['wasmMemory'] = new WebAssembly.Memory({ 'initial': TOTAL_MEMORY / WASM_PAGE_SIZE });\n    buffer = Module['wasmMemory'].buffer;\n  } else\n  {\n    buffer = new ArrayBuffer(TOTAL_MEMORY);\n  }\n  assert(buffer.byteLength === TOTAL_MEMORY);\n  Module['buffer'] = buffer;\n}\nupdateGlobalBufferViews();\n\n\nfunction getTotalMemory() {\n  return TOTAL_MEMORY;\n}\n\n// Endianness check (note: assumes compiler arch was little-endian)\n  HEAP32[0] = 0x63736d65; /* 'emsc' */\nHEAP16[1] = 0x6373;\nif (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';\n\nfunction callRuntimeCallbacks(callbacks) {\n  while(callbacks.length > 0) {\n    var callback = callbacks.shift();\n    if (typeof callback == 'function') {\n      callback();\n      continue;\n    }\n    var func = callback.func;\n    if (typeof func === 'number') {\n      if (callback.arg === undefined) {\n        Module['dynCall_v'](func);\n      } else {\n        Module['dynCall_vi'](func, callback.arg);\n      }\n    } else {\n      func(callback.arg === undefined ? null : callback.arg);\n    }\n  }\n}\n\nvar __ATPRERUN__  = []; // functions called before the runtime is initialized\nvar __ATINIT__    = []; // functions called during startup\nvar __ATMAIN__    = []; // functions called when main() is to be run\nvar __ATEXIT__    = []; // functions called during shutdown\nvar __ATPOSTRUN__ = []; // functions called after the main() is called\n\nvar runtimeInitialized = false;\nvar runtimeExited = false;\n\n\nfunction preRun() {\n  // compatibility - merge in anything from Module['preRun'] at this time\n  if (Module['preRun']) {\n    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n    while (Module['preRun'].length) {\n      addOnPreRun(Module['preRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPRERUN__);\n}\n\nfunction ensureInitRuntime() {\n  checkStackCookie();\n  if (runtimeInitialized) return;\n  runtimeInitialized = true;\n  callRuntimeCallbacks(__ATINIT__);\n}\n\nfunction preMain() {\n  checkStackCookie();\n  callRuntimeCallbacks(__ATMAIN__);\n}\n\nfunction exitRuntime() {\n  checkStackCookie();\n  callRuntimeCallbacks(__ATEXIT__);\n  runtimeExited = true;\n}\n\nfunction postRun() {\n  checkStackCookie();\n  // compatibility - merge in anything from Module['postRun'] at this time\n  if (Module['postRun']) {\n    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n    while (Module['postRun'].length) {\n      addOnPostRun(Module['postRun'].shift());\n    }\n  }\n  callRuntimeCallbacks(__ATPOSTRUN__);\n}\n\nfunction addOnPreRun(cb) {\n  __ATPRERUN__.unshift(cb);\n}\n\nfunction addOnInit(cb) {\n  __ATINIT__.unshift(cb);\n}\n\nfunction addOnPreMain(cb) {\n  __ATMAIN__.unshift(cb);\n}\n\nfunction addOnExit(cb) {\n  __ATEXIT__.unshift(cb);\n}\n\nfunction addOnPostRun(cb) {\n  __ATPOSTRUN__.unshift(cb);\n}\n\n// Deprecated: This function should not be called because it is unsafe and does not provide\n// a maximum length limit of how many bytes it is allowed to write. Prefer calling the\n// function stringToUTF8Array() instead, which takes in a maximum length that can be used\n// to be secure from out of bounds writes.\n/** @deprecated */\nfunction writeStringToMemory(string, buffer, dontAddNull) {\n  warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\n\n  var /** @type {number} */ lastChar, /** @type {number} */ end;\n  if (dontAddNull) {\n    // stringToUTF8Array always appends null. If we don't want to do that, remember the\n    // character that existed at the location where the null will be placed, and restore\n    // that after the write (below).\n    end = buffer + lengthBytesUTF8(string);\n    lastChar = HEAP8[end];\n  }\n  stringToUTF8(string, buffer, Infinity);\n  if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\n}\n\nfunction writeArrayToMemory(array, buffer) {\n  assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)')\n  HEAP8.set(array, buffer);\n}\n\nfunction writeAsciiToMemory(str, buffer, dontAddNull) {\n  for (var i = 0; i < str.length; ++i) {\n    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);\n    HEAP8[((buffer++)>>0)]=str.charCodeAt(i);\n  }\n  // Null-terminate the pointer to the HEAP.\n  if (!dontAddNull) HEAP8[((buffer)>>0)]=0;\n}\n\nfunction unSign(value, bits, ignore) {\n  if (value >= 0) {\n    return value;\n  }\n  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\n                    : Math.pow(2, bits)         + value;\n}\nfunction reSign(value, bits, ignore) {\n  if (value <= 0) {\n    return value;\n  }\n  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32\n                        : Math.pow(2, bits-1);\n  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that\n                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\n                                                       // TODO: In i64 mode 1, resign the two parts separately and safely\n    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\n  }\n  return value;\n}\n\nassert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');\n\nvar Math_abs = Math.abs;\nvar Math_cos = Math.cos;\nvar Math_sin = Math.sin;\nvar Math_tan = Math.tan;\nvar Math_acos = Math.acos;\nvar Math_asin = Math.asin;\nvar Math_atan = Math.atan;\nvar Math_atan2 = Math.atan2;\nvar Math_exp = Math.exp;\nvar Math_log = Math.log;\nvar Math_sqrt = Math.sqrt;\nvar Math_ceil = Math.ceil;\nvar Math_floor = Math.floor;\nvar Math_pow = Math.pow;\nvar Math_imul = Math.imul;\nvar Math_fround = Math.fround;\nvar Math_round = Math.round;\nvar Math_min = Math.min;\nvar Math_max = Math.max;\nvar Math_clz32 = Math.clz32;\nvar Math_trunc = Math.trunc;\n\n// A counter of dependencies for calling run(). If we need to\n// do asynchronous work before running, increment this and\n// decrement it. Incrementing must happen in a place like\n// Module.preRun (used by emcc to add file preloading).\n// Note that you can add dependencies in preRun, even though\n// it happens right before run - run will be postponed until\n// the dependencies are met.\nvar runDependencies = 0;\nvar runDependencyWatcher = null;\nvar dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\nvar runDependencyTracking = {};\n\nfunction getUniqueRunDependency(id) {\n  var orig = id;\n  while (1) {\n    if (!runDependencyTracking[id]) return id;\n    id = orig + Math.random();\n  }\n  return id;\n}\n\nfunction addRunDependency(id) {\n  runDependencies++;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (id) {\n    assert(!runDependencyTracking[id]);\n    runDependencyTracking[id] = 1;\n    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {\n      // Check for missing dependencies every few seconds\n      runDependencyWatcher = setInterval(function() {\n        if (ABORT) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n          return;\n        }\n        var shown = false;\n        for (var dep in runDependencyTracking) {\n          if (!shown) {\n            shown = true;\n            err('still waiting on run dependencies:');\n          }\n          err('dependency: ' + dep);\n        }\n        if (shown) {\n          err('(end of list)');\n        }\n      }, 10000);\n    }\n  } else {\n    err('warning: run dependency added without ID');\n  }\n}\n\nfunction removeRunDependency(id) {\n  runDependencies--;\n  if (Module['monitorRunDependencies']) {\n    Module['monitorRunDependencies'](runDependencies);\n  }\n  if (id) {\n    assert(runDependencyTracking[id]);\n    delete runDependencyTracking[id];\n  } else {\n    err('warning: run dependency removed without ID');\n  }\n  if (runDependencies == 0) {\n    if (runDependencyWatcher !== null) {\n      clearInterval(runDependencyWatcher);\n      runDependencyWatcher = null;\n    }\n    if (dependenciesFulfilled) {\n      var callback = dependenciesFulfilled;\n      dependenciesFulfilled = null;\n      callback(); // can add another dependenciesFulfilled\n    }\n  }\n}\n\nModule[\"preloadedImages\"] = {}; // maps url to image data\nModule[\"preloadedAudios\"] = {}; // maps url to audio data\n\n\n\nvar memoryInitializer = null;\n\n\n\nvar /* show errors on likely calls to FS when it was not included */ FS = {\n  error: function() {\n    abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');\n  },\n  init: function() { FS.error() },\n  createDataFile: function() { FS.error() },\n  createPreloadedFile: function() { FS.error() },\n  createLazyFile: function() { FS.error() },\n  open: function() { FS.error() },\n  mkdev: function() { FS.error() },\n  registerDevice: function() { FS.error() },\n  analyzePath: function() { FS.error() },\n  loadFilesFromDB: function() { FS.error() },\n\n  ErrnoError: function ErrnoError() { FS.error() },\n};\nModule['FS_createDataFile'] = FS.createDataFile;\nModule['FS_createPreloadedFile'] = FS.createPreloadedFile;\n\n\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n// Prefix of data URIs emitted by SINGLE_FILE and related options.\nvar dataURIPrefix = 'data:application/octet-stream;base64,';\n\n// Indicates whether filename is a base64 data URI.\nfunction isDataURI(filename) {\n  return String.prototype.startsWith ?\n      filename.startsWith(dataURIPrefix) :\n      filename.indexOf(dataURIPrefix) === 0;\n}\n\n\n\n\nfunction integrateWasmJS() {\n  // wasm.js has several methods for creating the compiled code module here:\n  //  * 'native-wasm' : use native WebAssembly support in the browser\n  //  * 'interpret-s-expr': load s-expression code from a .wast and interpret\n  //  * 'interpret-binary': load binary wasm and interpret\n  //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret\n  //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)\n  // The method is set at compile time (BINARYEN_METHOD)\n  // The method can be a comma-separated list, in which case, we will try the\n  // options one by one. Some of them can fail gracefully, and then we can try\n  // the next.\n\n  // inputs\n\n  var method = 'native-wasm';\n\n  var wasmTextFile = 'greycat.wast';\n  var wasmBinaryFile = 'greycat.wasm';\n  var asmjsCodeFile = 'greycat.temp.asm.js';\n\n  if (!isDataURI(wasmTextFile)) {\n    wasmTextFile = locateFile(wasmTextFile);\n  }\n  if (!isDataURI(wasmBinaryFile)) {\n    wasmBinaryFile = locateFile(wasmBinaryFile);\n  }\n  if (!isDataURI(asmjsCodeFile)) {\n    asmjsCodeFile = locateFile(asmjsCodeFile);\n  }\n\n  // utilities\n\n  var wasmPageSize = 64*1024;\n\n  var info = {\n    'global': null,\n    'env': null,\n    'asm2wasm': asm2wasmImports,\n    'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.\n  };\n\n  var exports = null;\n\n\n  function mergeMemory(newBuffer) {\n    // The wasm instance creates its memory. But static init code might have written to\n    // buffer already, including the mem init file, and we must copy it over in a proper merge.\n    // TODO: avoid this copy, by avoiding such static init writes\n    // TODO: in shorter term, just copy up to the last static init write\n    var oldBuffer = Module['buffer'];\n    if (newBuffer.byteLength < oldBuffer.byteLength) {\n      err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');\n    }\n    var oldView = new Int8Array(oldBuffer);\n    var newView = new Int8Array(newBuffer);\n\n\n    newView.set(oldView);\n    updateGlobalBuffer(newBuffer);\n    updateGlobalBufferViews();\n  }\n\n  function fixImports(imports) {\n    return imports;\n  }\n\n  function getBinary() {\n    try {\n      if (Module['wasmBinary']) {\n        return new Uint8Array(Module['wasmBinary']);\n      }\n      if (Module['readBinary']) {\n        return Module['readBinary'](wasmBinaryFile);\n      } else {\n        throw \"both async and sync fetching of the wasm failed\";\n      }\n    }\n    catch (err) {\n      abort(err);\n    }\n  }\n\n  function getBinaryPromise() {\n    // if we don't have the binary yet, and have the Fetch api, use that\n    // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web\n    if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {\n      return fetch(wasmBinaryFile, { credentials: 'same-origin' }).then(function(response) {\n        if (!response['ok']) {\n          throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n        }\n        return response['arrayBuffer']();\n      }).catch(function () {\n        return getBinary();\n      });\n    }\n    // Otherwise, getBinary should be able to get it synchronously\n    return new Promise(function(resolve, reject) {\n      resolve(getBinary());\n    });\n  }\n\n  // do-method functions\n\n\n  function doNativeWasm(global, env, providedBuffer) {\n    if (typeof WebAssembly !== 'object') {\n      // when the method is just native-wasm, our error message can be very specific\n      abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');\n      err('no native wasm support detected');\n      return false;\n    }\n    // prepare memory import\n    if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {\n      err('no native wasm Memory in use');\n      return false;\n    }\n    env['memory'] = Module['wasmMemory'];\n    // Load the wasm module and create an instance of using native support in the JS engine.\n    info['global'] = {\n      'NaN': NaN,\n      'Infinity': Infinity\n    };\n    info['global.Math'] = Math;\n    info['env'] = env;\n    // handle a generated wasm instance, receiving its exports and\n    // performing other necessary setup\n    function receiveInstance(instance, module) {\n      exports = instance.exports;\n      if (exports.memory) mergeMemory(exports.memory);\n      Module['asm'] = exports;\n      Module[\"usingWasm\"] = true;\n      removeRunDependency('wasm-instantiate');\n    }\n    addRunDependency('wasm-instantiate');\n\n    // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n    // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\n    // to any other async startup actions they are performing.\n    if (Module['instantiateWasm']) {\n      try {\n        return Module['instantiateWasm'](info, receiveInstance);\n      } catch(e) {\n        err('Module.instantiateWasm callback failed with error: ' + e);\n        return false;\n      }\n    }\n\n    // Async compilation can be confusing when an error on the page overwrites Module\n    // (for example, if the order of elements is wrong, and the one defining Module is\n    // later), so we save Module and check it later.\n    var trueModule = Module;\n    function receiveInstantiatedSource(output) {\n      // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.\n      // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n      assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');\n      trueModule = null;\n      receiveInstance(output['instance'], output['module']);\n    }\n    function instantiateArrayBuffer(receiver) {\n      getBinaryPromise().then(function(binary) {\n        return WebAssembly.instantiate(binary, info);\n      }).then(receiver, function(reason) {\n        err('failed to asynchronously prepare wasm: ' + reason);\n        abort(reason);\n      });\n    }\n    // Prefer streaming instantiation if available.\n    if (!Module['wasmBinary'] &&\n        typeof WebAssembly.instantiateStreaming === 'function' &&\n        !isDataURI(wasmBinaryFile) &&\n        typeof fetch === 'function') {\n      WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, { credentials: 'same-origin' }), info)\n        .then(receiveInstantiatedSource, function(reason) {\n          // We expect the most common failure cause to be a bad MIME type for the binary,\n          // in which case falling back to ArrayBuffer instantiation should work.\n          err('wasm streaming compile failed: ' + reason);\n          err('falling back to ArrayBuffer instantiation');\n          instantiateArrayBuffer(receiveInstantiatedSource);\n        });\n    } else {\n      instantiateArrayBuffer(receiveInstantiatedSource);\n    }\n    return {}; // no exports yet; we'll fill them in later\n  }\n\n\n  // We may have a preloaded value in Module.asm, save it\n  Module['asmPreload'] = Module['asm'];\n\n  // Memory growth integration code\n\n  var asmjsReallocBuffer = Module['reallocBuffer'];\n\n  var wasmReallocBuffer = function(size) {\n    var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\n    size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size\n    var old = Module['buffer'];\n    var oldSize = old.byteLength;\n    if (Module[\"usingWasm\"]) {\n      // native wasm support\n      try {\n        var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size\n        if (result !== (-1 | 0)) {\n          // success in native wasm memory growth, get the buffer from the memory\n          return Module['buffer'] = Module['wasmMemory'].buffer;\n        } else {\n          return null;\n        }\n      } catch(e) {\n        console.error('Module.reallocBuffer: Attempted to grow from ' + oldSize  + ' bytes to ' + size + ' bytes, but got error: ' + e);\n        return null;\n      }\n    }\n  };\n\n  Module['reallocBuffer'] = function(size) {\n    if (finalMethod === 'asmjs') {\n      return asmjsReallocBuffer(size);\n    } else {\n      return wasmReallocBuffer(size);\n    }\n  };\n\n  // we may try more than one; this is the final one, that worked and we are using\n  var finalMethod = '';\n\n  // Provide an \"asm.js function\" for the application, called to \"link\" the asm.js module. We instantiate\n  // the wasm module at that time, and it receives imports and provides exports and so forth, the app\n  // doesn't need to care that it is wasm or olyfilled wasm or asm.js.\n\n  Module['asm'] = function(global, env, providedBuffer) {\n    env = fixImports(env);\n\n    // import table\n    if (!env['table']) {\n      var TABLE_SIZE = Module['wasmTableSize'];\n      if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least\n      var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];\n      if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {\n        if (MAX_TABLE_SIZE !== undefined) {\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, 'maximum': MAX_TABLE_SIZE, 'element': 'anyfunc' });\n        } else {\n          env['table'] = new WebAssembly.Table({ 'initial': TABLE_SIZE, element: 'anyfunc' });\n        }\n      } else {\n        env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least\n      }\n      Module['wasmTable'] = env['table'];\n    }\n\n    if (!env['memoryBase']) {\n      env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves\n    }\n    if (!env['tableBase']) {\n      env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change\n    }\n\n    // try the methods. each should return the exports if it succeeded\n\n    var exports;\n    exports = doNativeWasm(global, env, providedBuffer);\n\n    assert(exports, 'no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: http://kripken.github.io/emscripten-site/docs/compiling/WebAssembly.html#binaryen-methods');\n\n\n    return exports;\n  };\n\n  var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later\n}\n\nintegrateWasmJS();\n\n// === Body ===\n\nvar ASM_CONSTS = [function($0) { delete(GreyCat.elements[$0]) },\n function($0) { GreyCat.Logger.debug(GreyCat._module.Pointer_stringify($0)); },\n function($0) { GreyCat.Logger.info(GreyCat._module.Pointer_stringify($0)); },\n function($0) { GreyCat.Logger.error(GreyCat._module.Pointer_stringify($0)); },\n function($0) { GreyCat.Logger.warn(GreyCat._module.Pointer_stringify($0)); },\n function($0) { GreyCat.Logger.log(GreyCat._module.Pointer_stringify($0)); },\n function($0, $1) { GreyCat.elements[$0](GreyCat.elements[$1]) },\n function($0, $1) { GreyCat.elements[$0].start(GreyCat.elements[$1]) },\n function($0, $1, $2, $3) { GreyCat.newWebSocketClient($0, $1, $2, $3) },\n function($0) { GreyCat.destroyWebSocketClient($0) },\n function($0, $1, $2) { GreyCat.webSocketClientSend($0, $1, $2) }];\n\nfunction _emscripten_asm_const_ii(code, a0) {\n  return ASM_CONSTS[code](a0);\n}\n\nfunction _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {\n  return ASM_CONSTS[code](a0, a1, a2, a3);\n}\n\nfunction _emscripten_asm_const_iii(code, a0, a1) {\n  return ASM_CONSTS[code](a0, a1);\n}\n\nfunction _emscripten_asm_const_iiii(code, a0, a1, a2) {\n  return ASM_CONSTS[code](a0, a1, a2);\n}\n\n\n\n\nSTATIC_BASE = GLOBAL_BASE;\n\nSTATICTOP = STATIC_BASE + 13840;\n/* global initializers */  __ATINIT__.push();\n\n\n\n\n\n\n\nvar STATIC_BUMP = 13840;\nModule[\"STATIC_BASE\"] = STATIC_BASE;\nModule[\"STATIC_BUMP\"] = STATIC_BUMP;\n\n/* no memory initializer */\nvar tempDoublePtr = STATICTOP; STATICTOP += 16;\n\nassert(tempDoublePtr % 8 == 0);\n\nfunction copyTempFloat(ptr) { // functions, because inlining this code increases code size too much\n\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n\n}\n\nfunction copyTempDouble(ptr) {\n\n  HEAP8[tempDoublePtr] = HEAP8[ptr];\n\n  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];\n\n  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];\n\n  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];\n\n  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];\n\n  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];\n\n  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];\n\n  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];\n\n}\n\n// {{PRE_LIBRARY}}\n\n\n  function ___assert_fail(condition, filename, line, func) {\n      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);\n    }\n\n  function ___lock() {}\n\n  \n  var SYSCALLS={varargs:0,get:function (varargs) {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[(((SYSCALLS.varargs)-(4))>>2)];\n        return ret;\n      },getStr:function () {\n        var ret = Pointer_stringify(SYSCALLS.get());\n        return ret;\n      },get64:function () {\n        var low = SYSCALLS.get(), high = SYSCALLS.get();\n        if (low >= 0) assert(high === 0);\n        else assert(high === -1);\n        return low;\n      },getZero:function () {\n        assert(SYSCALLS.get() === 0);\n      }};function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // llseek\n      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();\n      // NOTE: offset_high is unused - Emscripten's off_t is 32-bit\n      var offset = offset_low;\n      FS.llseek(stream, offset, whence);\n      HEAP32[((result)>>2)]=stream.position;\n      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n      return 0;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  \n  function flush_NO_FILESYSTEM() {\n      // flush anything remaining in the buffers during shutdown\n      var fflush = Module[\"_fflush\"];\n      if (fflush) fflush(0);\n      var printChar = ___syscall146.printChar;\n      if (!printChar) return;\n      var buffers = ___syscall146.buffers;\n      if (buffers[1].length) printChar(1, 10);\n      if (buffers[2].length) printChar(2, 10);\n    }function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // writev\n      // hack to support printf in FILESYSTEM=0\n      var stream = SYSCALLS.get(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();\n      var ret = 0;\n      if (!___syscall146.buffers) {\n        ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr\n        ___syscall146.printChar = function(stream, curr) {\n          var buffer = ___syscall146.buffers[stream];\n          assert(buffer);\n          if (curr === 0 || curr === 10) {\n            (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n            buffer.length = 0;\n          } else {\n            buffer.push(curr);\n          }\n        };\n      }\n      for (var i = 0; i < iovcnt; i++) {\n        var ptr = HEAP32[(((iov)+(i*8))>>2)];\n        var len = HEAP32[(((iov)+(i*8 + 4))>>2)];\n        for (var j = 0; j < len; j++) {\n          ___syscall146.printChar(stream, HEAPU8[ptr+j]);\n        }\n        ret += len;\n      }\n      return ret;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // ioctl\n      return 0;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;\n  try {\n   // close\n      var stream = SYSCALLS.getStreamFromFD();\n      FS.close(stream);\n      return 0;\n    } catch (e) {\n    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n    return -e.errno;\n  }\n  }\n\n  function ___unlock() {}\n\n  var _emscripten_asm_const_int=true;\n\n  \n  \n  \n  function _emscripten_set_main_loop_timing(mode, value) {\n      Browser.mainLoop.timingMode = mode;\n      Browser.mainLoop.timingValue = value;\n  \n      if (!Browser.mainLoop.func) {\n        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');\n        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.\n      }\n  \n      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {\n        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {\n          var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now())|0;\n          setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop\n        };\n        Browser.mainLoop.method = 'timeout';\n      } else if (mode == 1 /*EM_TIMING_RAF*/) {\n        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {\n          Browser.requestAnimationFrame(Browser.mainLoop.runner);\n        };\n        Browser.mainLoop.method = 'rAF';\n      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {\n        if (typeof setImmediate === 'undefined') {\n          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)\n          var setImmediates = [];\n          var emscriptenMainLoopMessageId = 'setimmediate';\n          function Browser_setImmediate_messageHandler(event) {\n            // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,\n            // so check for both cases.\n            if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {\n              event.stopPropagation();\n              setImmediates.shift()();\n            }\n          }\n          addEventListener(\"message\", Browser_setImmediate_messageHandler, true);\n          setImmediate = function Browser_emulated_setImmediate(func) {\n            setImmediates.push(func);\n            if (ENVIRONMENT_IS_WORKER) {\n              if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];\n              Module['setImmediates'].push(func);\n              postMessage({target: emscriptenMainLoopMessageId}); // In --proxy-to-worker, route the message via proxyClient.js\n            } else postMessage(emscriptenMainLoopMessageId, \"*\"); // On the main thread, can just send the message to itself.\n          }\n        }\n        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {\n          setImmediate(Browser.mainLoop.runner);\n        };\n        Browser.mainLoop.method = 'immediate';\n      }\n      return 0;\n    }\n  \n  function _emscripten_get_now() { abort() }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {\n      Module['noExitRuntime'] = true;\n  \n      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');\n  \n      Browser.mainLoop.func = func;\n      Browser.mainLoop.arg = arg;\n  \n      var browserIterationFunc;\n      if (typeof arg !== 'undefined') {\n        browserIterationFunc = function() {\n          Module['dynCall_vi'](func, arg);\n        };\n      } else {\n        browserIterationFunc = function() {\n          Module['dynCall_v'](func);\n        };\n      }\n  \n      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;\n  \n      Browser.mainLoop.runner = function Browser_mainLoop_runner() {\n        if (ABORT) return;\n        if (Browser.mainLoop.queue.length > 0) {\n          var start = Date.now();\n          var blocker = Browser.mainLoop.queue.shift();\n          blocker.func(blocker.arg);\n          if (Browser.mainLoop.remainingBlockers) {\n            var remaining = Browser.mainLoop.remainingBlockers;\n            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);\n            if (blocker.counted) {\n              Browser.mainLoop.remainingBlockers = next;\n            } else {\n              // not counted, but move the progress along a tiny bit\n              next = next + 0.5; // do not steal all the next one's progress\n              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;\n            }\n          }\n          console.log('main loop blocker \"' + blocker.name + '\" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);\n          Browser.mainLoop.updateStatus();\n  \n          // catches pause/resume main loop from blocker execution\n          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;\n  \n          setTimeout(Browser.mainLoop.runner, 0);\n          return;\n        }\n  \n        // catch pauses from non-main loop sources\n        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;\n  \n        // Implement very basic swap interval control\n        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;\n        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {\n          // Not the scheduled time to render this frame - skip.\n          Browser.mainLoop.scheduler();\n          return;\n        } else if (Browser.mainLoop.timingMode == 0/*EM_TIMING_SETTIMEOUT*/) {\n          Browser.mainLoop.tickStartTime = _emscripten_get_now();\n        }\n  \n        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize\n        // VBO double-buffering and reduce GPU stalls.\n  \n  \n  \n        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {\n          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');\n          Browser.mainLoop.method = ''; // just warn once per call to set main loop\n        }\n  \n        Browser.mainLoop.runIter(browserIterationFunc);\n  \n        checkStackCookie();\n  \n        // catch pauses from the main loop itself\n        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;\n  \n        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able\n        // to queue the newest produced audio samples.\n        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()\n        //       do not need to be hardcoded into this function, but can be more generic.\n        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();\n  \n        Browser.mainLoop.scheduler();\n      }\n  \n      if (!noSetTiming) {\n        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);\n        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)\n  \n        Browser.mainLoop.scheduler();\n      }\n  \n      if (simulateInfiniteLoop) {\n        throw 'SimulateInfiniteLoop';\n      }\n    }var Browser={mainLoop:{scheduler:null,method:\"\",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {\n          Browser.mainLoop.scheduler = null;\n          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.\n        },resume:function () {\n          Browser.mainLoop.currentlyRunningMainloop++;\n          var timingMode = Browser.mainLoop.timingMode;\n          var timingValue = Browser.mainLoop.timingValue;\n          var func = Browser.mainLoop.func;\n          Browser.mainLoop.func = null;\n          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);\n          _emscripten_set_main_loop_timing(timingMode, timingValue);\n          Browser.mainLoop.scheduler();\n        },updateStatus:function () {\n          if (Module['setStatus']) {\n            var message = Module['statusMessage'] || 'Please wait...';\n            var remaining = Browser.mainLoop.remainingBlockers;\n            var expected = Browser.mainLoop.expectedBlockers;\n            if (remaining) {\n              if (remaining < expected) {\n                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');\n              } else {\n                Module['setStatus'](message);\n              }\n            } else {\n              Module['setStatus']('');\n            }\n          }\n        },runIter:function (func) {\n          if (ABORT) return;\n          if (Module['preMainLoop']) {\n            var preRet = Module['preMainLoop']();\n            if (preRet === false) {\n              return; // |return false| skips a frame\n            }\n          }\n          try {\n            func();\n          } catch (e) {\n            if (e instanceof ExitStatus) {\n              return;\n            } else {\n              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);\n              throw e;\n            }\n          }\n          if (Module['postMainLoop']) Module['postMainLoop']();\n        }},isFullscreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {\n        if (!Module[\"preloadPlugins\"]) Module[\"preloadPlugins\"] = []; // needs to exist even in workers\n  \n        if (Browser.initted) return;\n        Browser.initted = true;\n  \n        try {\n          new Blob();\n          Browser.hasBlobConstructor = true;\n        } catch(e) {\n          Browser.hasBlobConstructor = false;\n          console.log(\"warning: no blob constructor, cannot create blobs with mimetypes\");\n        }\n        Browser.BlobBuilder = typeof MozBlobBuilder != \"undefined\" ? MozBlobBuilder : (typeof WebKitBlobBuilder != \"undefined\" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log(\"warning: no BlobBuilder\") : null));\n        Browser.URLObject = typeof window != \"undefined\" ? (window.URL ? window.URL : window.webkitURL) : undefined;\n        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {\n          console.log(\"warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.\");\n          Module.noImageDecoding = true;\n        }\n  \n        // Support for plugins that can process preloaded files. You can add more of these to\n        // your app by creating and appending to Module.preloadPlugins.\n        //\n        // Each plugin is asked if it can handle a file based on the file's name. If it can,\n        // it is given the file's raw data. When it is done, it calls a callback with the file's\n        // (possibly modified) data. For example, a plugin might decompress a file, or it\n        // might create some side data structure for use later (like an Image element, etc.).\n  \n        var imagePlugin = {};\n        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {\n          return !Module.noImageDecoding && /\\.(jpg|jpeg|png|bmp)$/i.test(name);\n        };\n        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {\n          var b = null;\n          if (Browser.hasBlobConstructor) {\n            try {\n              b = new Blob([byteArray], { type: Browser.getMimetype(name) });\n              if (b.size !== byteArray.length) { // Safari bug #118630\n                // Safari's Blob can only take an ArrayBuffer\n                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });\n              }\n            } catch(e) {\n              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');\n            }\n          }\n          if (!b) {\n            var bb = new Browser.BlobBuilder();\n            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range\n            b = bb.getBlob();\n          }\n          var url = Browser.URLObject.createObjectURL(b);\n          assert(typeof url == 'string', 'createObjectURL must return a url as a string');\n          var img = new Image();\n          img.onload = function img_onload() {\n            assert(img.complete, 'Image ' + name + ' could not be decoded');\n            var canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            Module[\"preloadedImages\"][name] = canvas;\n            Browser.URLObject.revokeObjectURL(url);\n            if (onload) onload(byteArray);\n          };\n          img.onerror = function img_onerror(event) {\n            console.log('Image ' + url + ' could not be decoded');\n            if (onerror) onerror();\n          };\n          img.src = url;\n        };\n        Module['preloadPlugins'].push(imagePlugin);\n  \n        var audioPlugin = {};\n        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {\n          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };\n        };\n        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {\n          var done = false;\n          function finish(audio) {\n            if (done) return;\n            done = true;\n            Module[\"preloadedAudios\"][name] = audio;\n            if (onload) onload(byteArray);\n          }\n          function fail() {\n            if (done) return;\n            done = true;\n            Module[\"preloadedAudios\"][name] = new Audio(); // empty shim\n            if (onerror) onerror();\n          }\n          if (Browser.hasBlobConstructor) {\n            try {\n              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });\n            } catch(e) {\n              return fail();\n            }\n            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!\n            assert(typeof url == 'string', 'createObjectURL must return a url as a string');\n            var audio = new Audio();\n            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926\n            audio.onerror = function audio_onerror(event) {\n              if (done) return;\n              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');\n              function encode64(data) {\n                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n                var PAD = '=';\n                var ret = '';\n                var leftchar = 0;\n                var leftbits = 0;\n                for (var i = 0; i < data.length; i++) {\n                  leftchar = (leftchar << 8) | data[i];\n                  leftbits += 8;\n                  while (leftbits >= 6) {\n                    var curr = (leftchar >> (leftbits-6)) & 0x3f;\n                    leftbits -= 6;\n                    ret += BASE[curr];\n                  }\n                }\n                if (leftbits == 2) {\n                  ret += BASE[(leftchar&3) << 4];\n                  ret += PAD + PAD;\n                } else if (leftbits == 4) {\n                  ret += BASE[(leftchar&0xf) << 2];\n                  ret += PAD;\n                }\n                return ret;\n              }\n              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);\n              finish(audio); // we don't wait for confirmation this worked - but it's worth trying\n            };\n            audio.src = url;\n            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror\n            Browser.safeSetTimeout(function() {\n              finish(audio); // try to use it even though it is not necessarily ready to play\n            }, 10000);\n          } else {\n            return fail();\n          }\n        };\n        Module['preloadPlugins'].push(audioPlugin);\n  \n  \n        // Canvas event setup\n  \n        function pointerLockChange() {\n          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] ||\n                                document['mozPointerLockElement'] === Module['canvas'] ||\n                                document['webkitPointerLockElement'] === Module['canvas'] ||\n                                document['msPointerLockElement'] === Module['canvas'];\n        }\n        var canvas = Module['canvas'];\n        if (canvas) {\n          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module\n          // Module['forcedAspectRatio'] = 4 / 3;\n  \n          canvas.requestPointerLock = canvas['requestPointerLock'] ||\n                                      canvas['mozRequestPointerLock'] ||\n                                      canvas['webkitRequestPointerLock'] ||\n                                      canvas['msRequestPointerLock'] ||\n                                      function(){};\n          canvas.exitPointerLock = document['exitPointerLock'] ||\n                                   document['mozExitPointerLock'] ||\n                                   document['webkitExitPointerLock'] ||\n                                   document['msExitPointerLock'] ||\n                                   function(){}; // no-op if function does not exist\n          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);\n  \n          document.addEventListener('pointerlockchange', pointerLockChange, false);\n          document.addEventListener('mozpointerlockchange', pointerLockChange, false);\n          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);\n          document.addEventListener('mspointerlockchange', pointerLockChange, false);\n  \n          if (Module['elementPointerLock']) {\n            canvas.addEventListener(\"click\", function(ev) {\n              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {\n                Module['canvas'].requestPointerLock();\n                ev.preventDefault();\n              }\n            }, false);\n          }\n        }\n      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {\n        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.\n  \n        var ctx;\n        var contextHandle;\n        if (useWebGL) {\n          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.\n          var contextAttributes = {\n            antialias: false,\n            alpha: false\n          };\n  \n          if (webGLContextAttributes) {\n            for (var attribute in webGLContextAttributes) {\n              contextAttributes[attribute] = webGLContextAttributes[attribute];\n            }\n          }\n  \n          contextHandle = GL.createContext(canvas, contextAttributes);\n          if (contextHandle) {\n            ctx = GL.getContext(contextHandle).GLctx;\n          }\n        } else {\n          ctx = canvas.getContext('2d');\n        }\n  \n        if (!ctx) return null;\n  \n        if (setInModule) {\n          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');\n  \n          Module.ctx = ctx;\n          if (useWebGL) GL.makeContextCurrent(contextHandle);\n          Module.useWebGL = useWebGL;\n          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });\n          Browser.init();\n        }\n        return ctx;\n      },destroyContext:function (canvas, useWebGL, setInModule) {},fullscreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullscreen:function (lockPointer, resizeCanvas, vrDevice) {\n        Browser.lockPointer = lockPointer;\n        Browser.resizeCanvas = resizeCanvas;\n        Browser.vrDevice = vrDevice;\n        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;\n        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;\n        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;\n  \n        var canvas = Module['canvas'];\n        function fullscreenChange() {\n          Browser.isFullscreen = false;\n          var canvasContainer = canvas.parentNode;\n          if ((document['fullscreenElement'] || document['mozFullScreenElement'] ||\n               document['msFullscreenElement'] || document['webkitFullscreenElement'] ||\n               document['webkitCurrentFullScreenElement']) === canvasContainer) {\n            canvas.exitFullscreen = document['exitFullscreen'] ||\n                                    document['cancelFullScreen'] ||\n                                    document['mozCancelFullScreen'] ||\n                                    document['msExitFullscreen'] ||\n                                    document['webkitCancelFullScreen'] ||\n                                    function() {};\n            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);\n            if (Browser.lockPointer) canvas.requestPointerLock();\n            Browser.isFullscreen = true;\n            if (Browser.resizeCanvas) {\n              Browser.setFullscreenCanvasSize();\n            } else {\n              Browser.updateCanvasDimensions(canvas);\n            }\n          } else {\n            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen\n            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);\n            canvasContainer.parentNode.removeChild(canvasContainer);\n  \n            if (Browser.resizeCanvas) {\n              Browser.setWindowedCanvasSize();\n            } else {\n              Browser.updateCanvasDimensions(canvas);\n            }\n          }\n          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);\n          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);\n        }\n  \n        if (!Browser.fullscreenHandlersInstalled) {\n          Browser.fullscreenHandlersInstalled = true;\n          document.addEventListener('fullscreenchange', fullscreenChange, false);\n          document.addEventListener('mozfullscreenchange', fullscreenChange, false);\n          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);\n          document.addEventListener('MSFullscreenChange', fullscreenChange, false);\n        }\n  \n        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root\n        var canvasContainer = document.createElement(\"div\");\n        canvas.parentNode.insertBefore(canvasContainer, canvas);\n        canvasContainer.appendChild(canvas);\n  \n        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)\n        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] ||\n                                            canvasContainer['mozRequestFullScreen'] ||\n                                            canvasContainer['msRequestFullscreen'] ||\n                                           (canvasContainer['webkitRequestFullscreen'] ? function() { canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null) ||\n                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);\n  \n        if (vrDevice) {\n          canvasContainer.requestFullscreen({ vrDisplay: vrDevice });\n        } else {\n          canvasContainer.requestFullscreen();\n        }\n      },requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {\n          err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');\n          Browser.requestFullScreen = function(lockPointer, resizeCanvas, vrDevice) {\n            return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);\n          }\n          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);\n      },nextRAF:0,fakeRequestAnimationFrame:function (func) {\n        // try to keep 60fps between calls to here\n        var now = Date.now();\n        if (Browser.nextRAF === 0) {\n          Browser.nextRAF = now + 1000/60;\n        } else {\n          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0\n            Browser.nextRAF += 1000/60;\n          }\n        }\n        var delay = Math.max(Browser.nextRAF - now, 0);\n        setTimeout(func, delay);\n      },requestAnimationFrame:function requestAnimationFrame(func) {\n        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)\n          Browser.fakeRequestAnimationFrame(func);\n        } else {\n          if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = window['requestAnimationFrame'] ||\n                                           window['mozRequestAnimationFrame'] ||\n                                           window['webkitRequestAnimationFrame'] ||\n                                           window['msRequestAnimationFrame'] ||\n                                           window['oRequestAnimationFrame'] ||\n                                           Browser.fakeRequestAnimationFrame;\n          }\n          window.requestAnimationFrame(func);\n        }\n      },safeCallback:function (func) {\n        return function() {\n          if (!ABORT) return func.apply(null, arguments);\n        };\n      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {\n        Browser.allowAsyncCallbacks = false;\n      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now\n        Browser.allowAsyncCallbacks = true;\n        if (Browser.queuedAsyncCallbacks.length > 0) {\n          var callbacks = Browser.queuedAsyncCallbacks;\n          Browser.queuedAsyncCallbacks = [];\n          callbacks.forEach(function(func) {\n            func();\n          });\n        }\n      },safeRequestAnimationFrame:function (func) {\n        return Browser.requestAnimationFrame(function() {\n          if (ABORT) return;\n          if (Browser.allowAsyncCallbacks) {\n            func();\n          } else {\n            Browser.queuedAsyncCallbacks.push(func);\n          }\n        });\n      },safeSetTimeout:function (func, timeout) {\n        Module['noExitRuntime'] = true;\n        return setTimeout(function() {\n          if (ABORT) return;\n          if (Browser.allowAsyncCallbacks) {\n            func();\n          } else {\n            Browser.queuedAsyncCallbacks.push(func);\n          }\n        }, timeout);\n      },safeSetInterval:function (func, timeout) {\n        Module['noExitRuntime'] = true;\n        return setInterval(function() {\n          if (ABORT) return;\n          if (Browser.allowAsyncCallbacks) {\n            func();\n          } // drop it on the floor otherwise, next interval will kick in\n        }, timeout);\n      },getMimetype:function (name) {\n        return {\n          'jpg': 'image/jpeg',\n          'jpeg': 'image/jpeg',\n          'png': 'image/png',\n          'bmp': 'image/bmp',\n          'ogg': 'audio/ogg',\n          'wav': 'audio/wav',\n          'mp3': 'audio/mpeg'\n        }[name.substr(name.lastIndexOf('.')+1)];\n      },getUserMedia:function (func) {\n        if(!window.getUserMedia) {\n          window.getUserMedia = navigator['getUserMedia'] ||\n                                navigator['mozGetUserMedia'];\n        }\n        window.getUserMedia(func);\n      },getMovementX:function (event) {\n        return event['movementX'] ||\n               event['mozMovementX'] ||\n               event['webkitMovementX'] ||\n               0;\n      },getMovementY:function (event) {\n        return event['movementY'] ||\n               event['mozMovementY'] ||\n               event['webkitMovementY'] ||\n               0;\n      },getMouseWheelDelta:function (event) {\n        var delta = 0;\n        switch (event.type) {\n          case 'DOMMouseScroll':\n            delta = event.detail;\n            break;\n          case 'mousewheel':\n            delta = event.wheelDelta;\n            break;\n          case 'wheel':\n            delta = event['deltaY'];\n            break;\n          default:\n            throw 'unrecognized mouse wheel event: ' + event.type;\n        }\n        return delta;\n      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup\n        if (Browser.pointerLock) {\n          // When the pointer is locked, calculate the coordinates\n          // based on the movement of the mouse.\n          // Workaround for Firefox bug 764498\n          if (event.type != 'mousemove' &&\n              ('mozMovementX' in event)) {\n            Browser.mouseMovementX = Browser.mouseMovementY = 0;\n          } else {\n            Browser.mouseMovementX = Browser.getMovementX(event);\n            Browser.mouseMovementY = Browser.getMovementY(event);\n          }\n  \n          // check if SDL is available\n          if (typeof SDL != \"undefined\") {\n            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;\n            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;\n          } else {\n            // just add the mouse delta to the current absolut mouse position\n            // FIXME: ideally this should be clamped against the canvas size and zero\n            Browser.mouseX += Browser.mouseMovementX;\n            Browser.mouseY += Browser.mouseMovementY;\n          }\n        } else {\n          // Otherwise, calculate the movement based on the changes\n          // in the coordinates.\n          var rect = Module[\"canvas\"].getBoundingClientRect();\n          var cw = Module[\"canvas\"].width;\n          var ch = Module[\"canvas\"].height;\n  \n          // Neither .scrollX or .pageXOffset are defined in a spec, but\n          // we prefer .scrollX because it is currently in a spec draft.\n          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)\n          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);\n          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);\n          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset\n          // and we have no viable fallback.\n          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');\n  \n          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {\n            var touch = event.touch;\n            if (touch === undefined) {\n              return; // the \"touch\" property is only defined in SDL\n  \n            }\n            var adjustedX = touch.pageX - (scrollX + rect.left);\n            var adjustedY = touch.pageY - (scrollY + rect.top);\n  \n            adjustedX = adjustedX * (cw / rect.width);\n            adjustedY = adjustedY * (ch / rect.height);\n  \n            var coords = { x: adjustedX, y: adjustedY };\n  \n            if (event.type === 'touchstart') {\n              Browser.lastTouches[touch.identifier] = coords;\n              Browser.touches[touch.identifier] = coords;\n            } else if (event.type === 'touchend' || event.type === 'touchmove') {\n              var last = Browser.touches[touch.identifier];\n              if (!last) last = coords;\n              Browser.lastTouches[touch.identifier] = last;\n              Browser.touches[touch.identifier] = coords;\n            }\n            return;\n          }\n  \n          var x = event.pageX - (scrollX + rect.left);\n          var y = event.pageY - (scrollY + rect.top);\n  \n          // the canvas might be CSS-scaled compared to its backbuffer;\n          // SDL-using content will want mouse coordinates in terms\n          // of backbuffer units.\n          x = x * (cw / rect.width);\n          y = y * (ch / rect.height);\n  \n          Browser.mouseMovementX = x - Browser.mouseX;\n          Browser.mouseMovementY = y - Browser.mouseY;\n          Browser.mouseX = x;\n          Browser.mouseY = y;\n        }\n      },asyncLoad:function (url, onload, onerror, noRunDep) {\n        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';\n        Module['readAsync'](url, function(arrayBuffer) {\n          assert(arrayBuffer, 'Loading data file \"' + url + '\" failed (no arrayBuffer).');\n          onload(new Uint8Array(arrayBuffer));\n          if (dep) removeRunDependency(dep);\n        }, function(event) {\n          if (onerror) {\n            onerror();\n          } else {\n            throw 'Loading data file \"' + url + '\" failed.';\n          }\n        });\n        if (dep) addRunDependency(dep);\n      },resizeListeners:[],updateResizeListeners:function () {\n        var canvas = Module['canvas'];\n        Browser.resizeListeners.forEach(function(listener) {\n          listener(canvas.width, canvas.height);\n        });\n      },setCanvasSize:function (width, height, noUpdates) {\n        var canvas = Module['canvas'];\n        Browser.updateCanvasDimensions(canvas, width, height);\n        if (!noUpdates) Browser.updateResizeListeners();\n      },windowedWidth:0,windowedHeight:0,setFullscreenCanvasSize:function () {\n        // check if SDL is available\n        if (typeof SDL != \"undefined\") {\n          var flags = HEAPU32[((SDL.screen)>>2)];\n          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag\n          HEAP32[((SDL.screen)>>2)]=flags\n        }\n        Browser.updateCanvasDimensions(Module['canvas']);\n        Browser.updateResizeListeners();\n      },setWindowedCanvasSize:function () {\n        // check if SDL is available\n        if (typeof SDL != \"undefined\") {\n          var flags = HEAPU32[((SDL.screen)>>2)];\n          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag\n          HEAP32[((SDL.screen)>>2)]=flags\n        }\n        Browser.updateCanvasDimensions(Module['canvas']);\n        Browser.updateResizeListeners();\n      },updateCanvasDimensions:function (canvas, wNative, hNative) {\n        if (wNative && hNative) {\n          canvas.widthNative = wNative;\n          canvas.heightNative = hNative;\n        } else {\n          wNative = canvas.widthNative;\n          hNative = canvas.heightNative;\n        }\n        var w = wNative;\n        var h = hNative;\n        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {\n          if (w/h < Module['forcedAspectRatio']) {\n            w = Math.round(h * Module['forcedAspectRatio']);\n          } else {\n            h = Math.round(w / Module['forcedAspectRatio']);\n          }\n        }\n        if (((document['fullscreenElement'] || document['mozFullScreenElement'] ||\n             document['msFullscreenElement'] || document['webkitFullscreenElement'] ||\n             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {\n           var factor = Math.min(screen.width / w, screen.height / h);\n           w = Math.round(w * factor);\n           h = Math.round(h * factor);\n        }\n        if (Browser.resizeCanvas) {\n          if (canvas.width  != w) canvas.width  = w;\n          if (canvas.height != h) canvas.height = h;\n          if (typeof canvas.style != 'undefined') {\n            canvas.style.removeProperty( \"width\");\n            canvas.style.removeProperty(\"height\");\n          }\n        } else {\n          if (canvas.width  != wNative) canvas.width  = wNative;\n          if (canvas.height != hNative) canvas.height = hNative;\n          if (typeof canvas.style != 'undefined') {\n            if (w != wNative || h != hNative) {\n              canvas.style.setProperty( \"width\", w + \"px\", \"important\");\n              canvas.style.setProperty(\"height\", h + \"px\", \"important\");\n            } else {\n              canvas.style.removeProperty( \"width\");\n              canvas.style.removeProperty(\"height\");\n            }\n          }\n        }\n      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {\n        var handle = Browser.nextWgetRequestHandle;\n        Browser.nextWgetRequestHandle++;\n        return handle;\n      }};function _emscripten_exit_with_live_runtime() {\n      Module['noExitRuntime'] = true;\n      throw 'SimulateInfiniteLoop';\n    }\n\n  \n  function __exit(status) {\n      // void _exit(int status);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html\n      exit(status);\n    }function _exit(status) {\n      __exit(status);\n    }\n\n   \n\n  var _llvm_ceil_f64=Math_ceil;\n\n  var _llvm_cos_f64=Math_cos;\n\n  var _llvm_floor_f64=Math_floor;\n\n  \n  function _llvm_log2_f32(x) {\n      return Math.log(x) / Math.LN2; // TODO: Math.log2, when browser support is there\n    }function _llvm_log2_f64() {\n  return _llvm_log2_f32.apply(null, arguments)\n  }\n\n  var _llvm_log_f64=Math_log;\n\n  var _llvm_pow_f64=Math_pow;\n\n  var _llvm_sin_f64=Math_sin;\n\n  var _llvm_sqrt_f64=Math_sqrt;\n\n  function _llvm_stackrestore(p) {\n      var self = _llvm_stacksave;\n      var ret = self.LLVM_SAVEDSTACKS[p];\n      self.LLVM_SAVEDSTACKS.splice(p, 1);\n      stackRestore(ret);\n    }\n\n  function _llvm_stacksave() {\n      var self = _llvm_stacksave;\n      if (!self.LLVM_SAVEDSTACKS) {\n        self.LLVM_SAVEDSTACKS = [];\n      }\n      self.LLVM_SAVEDSTACKS.push(stackSave());\n      return self.LLVM_SAVEDSTACKS.length-1;\n    }\n\n  \n  function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);\n      return dest;\n    } \n\n   \n\n  \n  function ___setErrNo(value) {\n      if (Module['___errno_location']) HEAP32[((Module['___errno_location']())>>2)]=value;\n      else err('failed to set errno from JS');\n      return value;\n    } \nModule[\"requestFullScreen\"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { err(\"Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.\"); Module[\"requestFullScreen\"] = Module[\"requestFullscreen\"]; Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };\n  Module[\"requestFullscreen\"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice) };\n  Module[\"requestAnimationFrame\"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };\n  Module[\"setCanvasSize\"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };\n  Module[\"pauseMainLoop\"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };\n  Module[\"resumeMainLoop\"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };\n  Module[\"getUserMedia\"] = function Module_getUserMedia() { Browser.getUserMedia() }\n  Module[\"createContext\"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) };\nif (ENVIRONMENT_IS_NODE) {\n    _emscripten_get_now = function _emscripten_get_now_actual() {\n      var t = process['hrtime']();\n      return t[0] * 1e3 + t[1] / 1e6;\n    };\n  } else if (typeof dateNow !== 'undefined') {\n    _emscripten_get_now = dateNow;\n  } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {\n    _emscripten_get_now = function() { return self['performance']['now'](); };\n  } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {\n    _emscripten_get_now = function() { return performance['now'](); };\n  } else {\n    _emscripten_get_now = Date.now;\n  };\nDYNAMICTOP_PTR = staticAlloc(4);\n\nSTACK_BASE = STACKTOP = alignMemory(STATICTOP);\n\nSTACK_MAX = STACK_BASE + TOTAL_STACK;\n\nDYNAMIC_BASE = alignMemory(STACK_MAX);\n\nHEAP32[DYNAMICTOP_PTR>>2] = DYNAMIC_BASE;\n\nstaticSealed = true; // seal the static portion of memory\n\nassert(DYNAMIC_BASE < TOTAL_MEMORY, \"TOTAL_MEMORY not big enough for stack\");\n\nvar ASSERTIONS = true;\n\n// Copyright 2017 The Emscripten Authors.  All rights reserved.\n// Emscripten is available under two separate licenses, the MIT license and the\n// University of Illinois/NCSA Open Source License.  Both these licenses can be\n// found in the LICENSE file.\n\n/** @type {function(string, boolean=, number=)} */\nfunction intArrayFromString(stringy, dontAddNull, length) {\n  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;\n  var u8array = new Array(len);\n  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n  if (dontAddNull) u8array.length = numBytesWritten;\n  return u8array;\n}\n\nfunction intArrayToString(array) {\n  var ret = [];\n  for (var i = 0; i < array.length; i++) {\n    var chr = array[i];\n    if (chr > 0xFF) {\n      if (ASSERTIONS) {\n        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\n      }\n      chr &= 0xFF;\n    }\n    ret.push(String.fromCharCode(chr));\n  }\n  return ret.join('');\n}\n\n\n\nfunction nullFunc_ii(x) { err(\"Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_iiii(x) { err(\"Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_iijji(x) { err(\"Invalid function pointer called with signature 'iijji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_vi(x) { err(\"Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_vii(x) { err(\"Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_viidii(x) { err(\"Invalid function pointer called with signature 'viidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_viidiiii(x) { err(\"Invalid function pointer called with signature 'viidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_viiidiidi(x) { err(\"Invalid function pointer called with signature 'viiidiidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_viiii(x) { err(\"Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_viiiii(x) { err(\"Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_viiiiii(x) { err(\"Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_vijj(x) { err(\"Invalid function pointer called with signature 'vijj'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nfunction nullFunc_vijji(x) { err(\"Invalid function pointer called with signature 'vijji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");  err(\"Build with ASSERTIONS=2 for more info.\");abort(x) }\n\nModule['wasmTableSize'] = 738;\n\nModule['wasmMaxTableSize'] = 738;\n\nfunction invoke_ii(index,a1) {\n  var sp = stackSave();\n  try {\n    return Module[\"dynCall_ii\"](index,a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_iiii(index,a1,a2,a3) {\n  var sp = stackSave();\n  try {\n    return Module[\"dynCall_iiii\"](index,a1,a2,a3);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_iijji(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    return Module[\"dynCall_iijji\"](index,a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_vi(index,a1) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_vi\"](index,a1);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_vii(index,a1,a2) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_vii\"](index,a1,a2);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viidii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_viidii\"](index,a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viidiiii(index,a1,a2,a3,a4,a5,a6,a7) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_viidiiii\"](index,a1,a2,a3,a4,a5,a6,a7);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viiidiidi(index,a1,a2,a3,a4,a5,a6,a7,a8) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_viiidiidi\"](index,a1,a2,a3,a4,a5,a6,a7,a8);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viiii(index,a1,a2,a3,a4) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_viiii\"](index,a1,a2,a3,a4);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viiiii(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_viiiii\"](index,a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_viiiiii\"](index,a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_vijj(index,a1,a2,a3,a4,a5) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_vijj\"](index,a1,a2,a3,a4,a5);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nfunction invoke_vijji(index,a1,a2,a3,a4,a5,a6) {\n  var sp = stackSave();\n  try {\n    Module[\"dynCall_vijji\"](index,a1,a2,a3,a4,a5,a6);\n  } catch(e) {\n    stackRestore(sp);\n    if (typeof e !== 'number' && e !== 'longjmp') throw e;\n    Module[\"setThrew\"](1, 0);\n  }\n}\n\nModule.asmGlobalArg = {};\n\nModule.asmLibraryArg = { \"abort\": abort, \"assert\": assert, \"enlargeMemory\": enlargeMemory, \"getTotalMemory\": getTotalMemory, \"abortOnCannotGrowMemory\": abortOnCannotGrowMemory, \"abortStackOverflow\": abortStackOverflow, \"nullFunc_ii\": nullFunc_ii, \"nullFunc_iiii\": nullFunc_iiii, \"nullFunc_iijji\": nullFunc_iijji, \"nullFunc_vi\": nullFunc_vi, \"nullFunc_vii\": nullFunc_vii, \"nullFunc_viidii\": nullFunc_viidii, \"nullFunc_viidiiii\": nullFunc_viidiiii, \"nullFunc_viiidiidi\": nullFunc_viiidiidi, \"nullFunc_viiii\": nullFunc_viiii, \"nullFunc_viiiii\": nullFunc_viiiii, \"nullFunc_viiiiii\": nullFunc_viiiiii, \"nullFunc_vijj\": nullFunc_vijj, \"nullFunc_vijji\": nullFunc_vijji, \"invoke_ii\": invoke_ii, \"invoke_iiii\": invoke_iiii, \"invoke_iijji\": invoke_iijji, \"invoke_vi\": invoke_vi, \"invoke_vii\": invoke_vii, \"invoke_viidii\": invoke_viidii, \"invoke_viidiiii\": invoke_viidiiii, \"invoke_viiidiidi\": invoke_viiidiidi, \"invoke_viiii\": invoke_viiii, \"invoke_viiiii\": invoke_viiiii, \"invoke_viiiiii\": invoke_viiiiii, \"invoke_vijj\": invoke_vijj, \"invoke_vijji\": invoke_vijji, \"___assert_fail\": ___assert_fail, \"___lock\": ___lock, \"___setErrNo\": ___setErrNo, \"___syscall140\": ___syscall140, \"___syscall146\": ___syscall146, \"___syscall54\": ___syscall54, \"___syscall6\": ___syscall6, \"___unlock\": ___unlock, \"__exit\": __exit, \"_emscripten_asm_const_ii\": _emscripten_asm_const_ii, \"_emscripten_asm_const_iii\": _emscripten_asm_const_iii, \"_emscripten_asm_const_iiii\": _emscripten_asm_const_iiii, \"_emscripten_asm_const_iiiii\": _emscripten_asm_const_iiiii, \"_emscripten_exit_with_live_runtime\": _emscripten_exit_with_live_runtime, \"_emscripten_get_now\": _emscripten_get_now, \"_emscripten_memcpy_big\": _emscripten_memcpy_big, \"_emscripten_set_main_loop\": _emscripten_set_main_loop, \"_emscripten_set_main_loop_timing\": _emscripten_set_main_loop_timing, \"_exit\": _exit, \"_llvm_ceil_f64\": _llvm_ceil_f64, \"_llvm_cos_f64\": _llvm_cos_f64, \"_llvm_floor_f64\": _llvm_floor_f64, \"_llvm_log2_f32\": _llvm_log2_f32, \"_llvm_log2_f64\": _llvm_log2_f64, \"_llvm_log_f64\": _llvm_log_f64, \"_llvm_pow_f64\": _llvm_pow_f64, \"_llvm_sin_f64\": _llvm_sin_f64, \"_llvm_sqrt_f64\": _llvm_sqrt_f64, \"_llvm_stackrestore\": _llvm_stackrestore, \"_llvm_stacksave\": _llvm_stacksave, \"flush_NO_FILESYSTEM\": flush_NO_FILESYSTEM, \"DYNAMICTOP_PTR\": DYNAMICTOP_PTR, \"tempDoublePtr\": tempDoublePtr, \"STACKTOP\": STACKTOP, \"STACK_MAX\": STACK_MAX };\n// EMSCRIPTEN_START_ASM\nvar asm =Module[\"asm\"]// EMSCRIPTEN_END_ASM\n(Module.asmGlobalArg, Module.asmLibraryArg, buffer);\n\nvar real____errno_location = asm[\"___errno_location\"]; asm[\"___errno_location\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real____errno_location.apply(null, arguments);\n};\n\nvar real__ctx__create = asm[\"_ctx__create\"]; asm[\"_ctx__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ctx__create.apply(null, arguments);\n};\n\nvar real__ctx__get = asm[\"_ctx__get\"]; asm[\"_ctx__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ctx__get.apply(null, arguments);\n};\n\nvar real__ctx__type = asm[\"_ctx__type\"]; asm[\"_ctx__type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ctx__type.apply(null, arguments);\n};\n\nvar real__double_array__to_string = asm[\"_double_array__to_string\"]; asm[\"_double_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__double_array__to_string.apply(null, arguments);\n};\n\nvar real__fflush = asm[\"_fflush\"]; asm[\"_fflush\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__fflush.apply(null, arguments);\n};\n\nvar real__free = asm[\"_free\"]; asm[\"_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__free.apply(null, arguments);\n};\n\nvar real__function__create = asm[\"_function__create\"]; asm[\"_function__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__function__create.apply(null, arguments);\n};\n\nvar real__function__pipe_key_with = asm[\"_function__pipe_key_with\"]; asm[\"_function__pipe_key_with\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__function__pipe_key_with.apply(null, arguments);\n};\n\nvar real__function__pipe_with = asm[\"_function__pipe_with\"]; asm[\"_function__pipe_with\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__function__pipe_with.apply(null, arguments);\n};\n\nvar real__gctx__bind = asm[\"_gctx__bind\"]; asm[\"_gctx__bind\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__bind.apply(null, arguments);\n};\n\nvar real__gctx__declare = asm[\"_gctx__declare\"]; asm[\"_gctx__declare\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__declare.apply(null, arguments);\n};\n\nvar real__gctx__declare_double = asm[\"_gctx__declare_double\"]; asm[\"_gctx__declare_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__declare_double.apply(null, arguments);\n};\n\nvar real__gctx__declare_int = asm[\"_gctx__declare_int\"]; asm[\"_gctx__declare_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__declare_int.apply(null, arguments);\n};\n\nvar real__gctx__declare_long = asm[\"_gctx__declare_long\"]; asm[\"_gctx__declare_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__declare_long.apply(null, arguments);\n};\n\nvar real__gctx__declare_null = asm[\"_gctx__declare_null\"]; asm[\"_gctx__declare_null\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__declare_null.apply(null, arguments);\n};\n\nvar real__gctx__declare_raw_string = asm[\"_gctx__declare_raw_string\"]; asm[\"_gctx__declare_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__declare_raw_string.apply(null, arguments);\n};\n\nvar real__gctx__execute = asm[\"_gctx__execute\"]; asm[\"_gctx__execute\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__execute.apply(null, arguments);\n};\n\nvar real__gctx__execute_key = asm[\"_gctx__execute_key\"]; asm[\"_gctx__execute_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__execute_key.apply(null, arguments);\n};\n\nvar real__gctx__execute_prepared = asm[\"_gctx__execute_prepared\"]; asm[\"_gctx__execute_prepared\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__execute_prepared.apply(null, arguments);\n};\n\nvar real__gctx__get_bool = asm[\"_gctx__get_bool\"]; asm[\"_gctx__get_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__get_bool.apply(null, arguments);\n};\n\nvar real__gctx__get_double = asm[\"_gctx__get_double\"]; asm[\"_gctx__get_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__get_double.apply(null, arguments);\n};\n\nvar real__gctx__get_int = asm[\"_gctx__get_int\"]; asm[\"_gctx__get_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__get_int.apply(null, arguments);\n};\n\nvar real__gctx__get_long = asm[\"_gctx__get_long\"]; asm[\"_gctx__get_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__get_long.apply(null, arguments);\n};\n\nvar real__gctx__get_raw_string = asm[\"_gctx__get_raw_string\"]; asm[\"_gctx__get_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__get_raw_string.apply(null, arguments);\n};\n\nvar real__gctx__get_ulong = asm[\"_gctx__get_ulong\"]; asm[\"_gctx__get_ulong\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__get_ulong.apply(null, arguments);\n};\n\nvar real__gctx__graph = asm[\"_gctx__graph\"]; asm[\"_gctx__graph\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__graph.apply(null, arguments);\n};\n\nvar real__gctx__json = asm[\"_gctx__json\"]; asm[\"_gctx__json\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__json.apply(null, arguments);\n};\n\nvar real__gctx__on_end = asm[\"_gctx__on_end\"]; asm[\"_gctx__on_end\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__on_end.apply(null, arguments);\n};\n\nvar real__gctx__ordinal = asm[\"_gctx__ordinal\"]; asm[\"_gctx__ordinal\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__ordinal.apply(null, arguments);\n};\n\nvar real__gctx__path = asm[\"_gctx__path\"]; asm[\"_gctx__path\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__path.apply(null, arguments);\n};\n\nvar real__gctx__prepare = asm[\"_gctx__prepare\"]; asm[\"_gctx__prepare\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__prepare.apply(null, arguments);\n};\n\nvar real__gctx__prepare_key = asm[\"_gctx__prepare_key\"]; asm[\"_gctx__prepare_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__prepare_key.apply(null, arguments);\n};\n\nvar real__gctx__set_double = asm[\"_gctx__set_double\"]; asm[\"_gctx__set_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__set_double.apply(null, arguments);\n};\n\nvar real__gctx__set_int = asm[\"_gctx__set_int\"]; asm[\"_gctx__set_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__set_int.apply(null, arguments);\n};\n\nvar real__gctx__set_long = asm[\"_gctx__set_long\"]; asm[\"_gctx__set_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__set_long.apply(null, arguments);\n};\n\nvar real__gctx__set_raw_string = asm[\"_gctx__set_raw_string\"]; asm[\"_gctx__set_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gctx__set_raw_string.apply(null, arguments);\n};\n\nvar real__gdouble_array__get = asm[\"_gdouble_array__get\"]; asm[\"_gdouble_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gdouble_array__get.apply(null, arguments);\n};\n\nvar real__gdouble_array__set = asm[\"_gdouble_array__set\"]; asm[\"_gdouble_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gdouble_array__set.apply(null, arguments);\n};\n\nvar real__gdouble_array__size = asm[\"_gdouble_array__size\"]; asm[\"_gdouble_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gdouble_array__size.apply(null, arguments);\n};\n\nvar real__gfunction__create = asm[\"_gfunction__create\"]; asm[\"_gfunction__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gfunction__create.apply(null, arguments);\n};\n\nvar real__gfunction__parse = asm[\"_gfunction__parse\"]; asm[\"_gfunction__parse\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gfunction__parse.apply(null, arguments);\n};\n\nvar real__gfunction__pipe = asm[\"_gfunction__pipe\"]; asm[\"_gfunction__pipe\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gfunction__pipe.apply(null, arguments);\n};\n\nvar real__gfunction__pipe_key = asm[\"_gfunction__pipe_key\"]; asm[\"_gfunction__pipe_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gfunction__pipe_key.apply(null, arguments);\n};\n\nvar real__gfunction__unsafe_dec_ref = asm[\"_gfunction__unsafe_dec_ref\"]; asm[\"_gfunction__unsafe_dec_ref\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gfunction__unsafe_dec_ref.apply(null, arguments);\n};\n\nvar real__gfunction__unsafe_set_key = asm[\"_gfunction__unsafe_set_key\"]; asm[\"_gfunction__unsafe_set_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gfunction__unsafe_set_key.apply(null, arguments);\n};\n\nvar real__ggraph__create_node_volatile = asm[\"_ggraph__create_node_volatile\"]; asm[\"_ggraph__create_node_volatile\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__create_node_volatile.apply(null, arguments);\n};\n\nvar real__ggraph__declare_function = asm[\"_ggraph__declare_function\"]; asm[\"_ggraph__declare_function\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__declare_function.apply(null, arguments);\n};\n\nvar real__ggraph__declare_meta = asm[\"_ggraph__declare_meta\"]; asm[\"_ggraph__declare_meta\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__declare_meta.apply(null, arguments);\n};\n\nvar real__ggraph__declare_plugin = asm[\"_ggraph__declare_plugin\"]; asm[\"_ggraph__declare_plugin\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__declare_plugin.apply(null, arguments);\n};\n\nvar real__ggraph__declare_type = asm[\"_ggraph__declare_type\"]; asm[\"_ggraph__declare_type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__declare_type.apply(null, arguments);\n};\n\nvar real__ggraph__destroy = asm[\"_ggraph__destroy\"]; asm[\"_ggraph__destroy\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__destroy.apply(null, arguments);\n};\n\nvar real__ggraph__disable_debug = asm[\"_ggraph__disable_debug\"]; asm[\"_ggraph__disable_debug\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__disable_debug.apply(null, arguments);\n};\n\nvar real__ggraph__enable_debug = asm[\"_ggraph__enable_debug\"]; asm[\"_ggraph__enable_debug\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__enable_debug.apply(null, arguments);\n};\n\nvar real__ggraph__function = asm[\"_ggraph__function\"]; asm[\"_ggraph__function\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__function.apply(null, arguments);\n};\n\nvar real__ggraph__is_meta = asm[\"_ggraph__is_meta\"]; asm[\"_ggraph__is_meta\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__is_meta.apply(null, arguments);\n};\n\nvar real__ggraph__meta = asm[\"_ggraph__meta\"]; asm[\"_ggraph__meta\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__meta.apply(null, arguments);\n};\n\nvar real__ggraph__type = asm[\"_ggraph__type\"]; asm[\"_ggraph__type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph__type.apply(null, arguments);\n};\n\nvar real__ggraph_export_functions = asm[\"_ggraph_export_functions\"]; asm[\"_ggraph_export_functions\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph_export_functions.apply(null, arguments);\n};\n\nvar real__ggraph_export_types = asm[\"_ggraph_export_types\"]; asm[\"_ggraph_export_types\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ggraph_export_types.apply(null, arguments);\n};\n\nvar real__gint_array__get = asm[\"_gint_array__get\"]; asm[\"_gint_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gint_array__get.apply(null, arguments);\n};\n\nvar real__gint_array__set = asm[\"_gint_array__set\"]; asm[\"_gint_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gint_array__set.apply(null, arguments);\n};\n\nvar real__gint_array__size = asm[\"_gint_array__size\"]; asm[\"_gint_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gint_array__size.apply(null, arguments);\n};\n\nvar real__glong_array__get = asm[\"_glong_array__get\"]; asm[\"_glong_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__glong_array__get.apply(null, arguments);\n};\n\nvar real__glong_array__set = asm[\"_glong_array__set\"]; asm[\"_glong_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__glong_array__set.apply(null, arguments);\n};\n\nvar real__glong_array__size = asm[\"_glong_array__size\"]; asm[\"_glong_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__glong_array__size.apply(null, arguments);\n};\n\nvar real__gnode__get_bool = asm[\"_gnode__get_bool\"]; asm[\"_gnode__get_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__get_bool.apply(null, arguments);\n};\n\nvar real__gnode__get_double = asm[\"_gnode__get_double\"]; asm[\"_gnode__get_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__get_double.apply(null, arguments);\n};\n\nvar real__gnode__get_int = asm[\"_gnode__get_int\"]; asm[\"_gnode__get_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__get_int.apply(null, arguments);\n};\n\nvar real__gnode__get_long = asm[\"_gnode__get_long\"]; asm[\"_gnode__get_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__get_long.apply(null, arguments);\n};\n\nvar real__gnode__get_or_create = asm[\"_gnode__get_or_create\"]; asm[\"_gnode__get_or_create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__get_or_create.apply(null, arguments);\n};\n\nvar real__gnode__get_raw_string = asm[\"_gnode__get_raw_string\"]; asm[\"_gnode__get_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__get_raw_string.apply(null, arguments);\n};\n\nvar real__gnode__json = asm[\"_gnode__json\"]; asm[\"_gnode__json\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__json.apply(null, arguments);\n};\n\nvar real__gnode__set = asm[\"_gnode__set\"]; asm[\"_gnode__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__set.apply(null, arguments);\n};\n\nvar real__gnode__set_double = asm[\"_gnode__set_double\"]; asm[\"_gnode__set_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__set_double.apply(null, arguments);\n};\n\nvar real__gnode__set_int = asm[\"_gnode__set_int\"]; asm[\"_gnode__set_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__set_int.apply(null, arguments);\n};\n\nvar real__gnode__set_long = asm[\"_gnode__set_long\"]; asm[\"_gnode__set_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__set_long.apply(null, arguments);\n};\n\nvar real__gnode__set_null = asm[\"_gnode__set_null\"]; asm[\"_gnode__set_null\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__set_null.apply(null, arguments);\n};\n\nvar real__gnode__set_raw_string = asm[\"_gnode__set_raw_string\"]; asm[\"_gnode__set_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode__set_raw_string.apply(null, arguments);\n};\n\nvar real__gnode_type__declare_attribute = asm[\"_gnode_type__declare_attribute\"]; asm[\"_gnode_type__declare_attribute\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode_type__declare_attribute.apply(null, arguments);\n};\n\nvar real__gnode_type__declare_constant = asm[\"_gnode_type__declare_constant\"]; asm[\"_gnode_type__declare_constant\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode_type__declare_constant.apply(null, arguments);\n};\n\nvar real__gnode_type__json_to = asm[\"_gnode_type__json_to\"]; asm[\"_gnode_type__json_to\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode_type__json_to.apply(null, arguments);\n};\n\nvar real__gnode_type__key = asm[\"_gnode_type__key\"]; asm[\"_gnode_type__key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gnode_type__key.apply(null, arguments);\n};\n\nvar real__gobject__un_mark = asm[\"_gobject__un_mark\"]; asm[\"_gobject__un_mark\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gobject__un_mark.apply(null, arguments);\n};\n\nvar real__graph__configure_plugin = asm[\"_graph__configure_plugin\"]; asm[\"_graph__configure_plugin\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__graph__configure_plugin.apply(null, arguments);\n};\n\nvar real__graph__create = asm[\"_graph__create\"]; asm[\"_graph__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__graph__create.apply(null, arguments);\n};\n\nvar real__graph__size_buffer = asm[\"_graph__size_buffer\"]; asm[\"_graph__size_buffer\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__graph__size_buffer.apply(null, arguments);\n};\n\nvar real__graph__size_cache = asm[\"_graph__size_cache\"]; asm[\"_graph__size_cache\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__graph__size_cache.apply(null, arguments);\n};\n\nvar real__graph__size_heap = asm[\"_graph__size_heap\"]; asm[\"_graph__size_heap\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__graph__size_heap.apply(null, arguments);\n};\n\nvar real__gstring__close = asm[\"_gstring__close\"]; asm[\"_gstring__close\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring__close.apply(null, arguments);\n};\n\nvar real__gstring__create = asm[\"_gstring__create\"]; asm[\"_gstring__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring__create.apply(null, arguments);\n};\n\nvar real__gstring__get = asm[\"_gstring__get\"]; asm[\"_gstring__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring__get.apply(null, arguments);\n};\n\nvar real__gstring__prepare = asm[\"_gstring__prepare\"]; asm[\"_gstring__prepare\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring__prepare.apply(null, arguments);\n};\n\nvar real__gstring_array__add = asm[\"_gstring_array__add\"]; asm[\"_gstring_array__add\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring_array__add.apply(null, arguments);\n};\n\nvar real__gstring_array__create = asm[\"_gstring_array__create\"]; asm[\"_gstring_array__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring_array__create.apply(null, arguments);\n};\n\nvar real__gstring_array__get = asm[\"_gstring_array__get\"]; asm[\"_gstring_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring_array__get.apply(null, arguments);\n};\n\nvar real__gstring_array__set = asm[\"_gstring_array__set\"]; asm[\"_gstring_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring_array__set.apply(null, arguments);\n};\n\nvar real__gstring_array__size = asm[\"_gstring_array__size\"]; asm[\"_gstring_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gstring_array__size.apply(null, arguments);\n};\n\nvar real__gulong_array__get = asm[\"_gulong_array__get\"]; asm[\"_gulong_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gulong_array__get.apply(null, arguments);\n};\n\nvar real__gulong_array__set = asm[\"_gulong_array__set\"]; asm[\"_gulong_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gulong_array__set.apply(null, arguments);\n};\n\nvar real__gulong_array__size = asm[\"_gulong_array__size\"]; asm[\"_gulong_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gulong_array__size.apply(null, arguments);\n};\n\nvar real__gwebsocket_client__on_msg = asm[\"_gwebsocket_client__on_msg\"]; asm[\"_gwebsocket_client__on_msg\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__gwebsocket_client__on_msg.apply(null, arguments);\n};\n\nvar real__int_array__to_string = asm[\"_int_array__to_string\"]; asm[\"_int_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__int_array__to_string.apply(null, arguments);\n};\n\nvar real__js_free = asm[\"_js_free\"]; asm[\"_js_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__js_free.apply(null, arguments);\n};\n\nvar real__js_malloc = asm[\"_js_malloc\"]; asm[\"_js_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__js_malloc.apply(null, arguments);\n};\n\nvar real__llvm_bswap_i32 = asm[\"_llvm_bswap_i32\"]; asm[\"_llvm_bswap_i32\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__llvm_bswap_i32.apply(null, arguments);\n};\n\nvar real__long_array__to_string = asm[\"_long_array__to_string\"]; asm[\"_long_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__long_array__to_string.apply(null, arguments);\n};\n\nvar real__main = asm[\"_main\"]; asm[\"_main\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__main.apply(null, arguments);\n};\n\nvar real__malloc = asm[\"_malloc\"]; asm[\"_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__malloc.apply(null, arguments);\n};\n\nvar real__node__get = asm[\"_node__get\"]; asm[\"_node__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node__get.apply(null, arguments);\n};\n\nvar real__node__graph = asm[\"_node__graph\"]; asm[\"_node__graph\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node__graph.apply(null, arguments);\n};\n\nvar real__node__type = asm[\"_node__type\"]; asm[\"_node__type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node__type.apply(null, arguments);\n};\n\nvar real__node_type__declare_constant_double = asm[\"_node_type__declare_constant_double\"]; asm[\"_node_type__declare_constant_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node_type__declare_constant_double.apply(null, arguments);\n};\n\nvar real__node_type__declare_constant_int = asm[\"_node_type__declare_constant_int\"]; asm[\"_node_type__declare_constant_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node_type__declare_constant_int.apply(null, arguments);\n};\n\nvar real__node_type__declare_constant_long = asm[\"_node_type__declare_constant_long\"]; asm[\"_node_type__declare_constant_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node_type__declare_constant_long.apply(null, arguments);\n};\n\nvar real__node_type__declare_constant_raw_string = asm[\"_node_type__declare_constant_raw_string\"]; asm[\"_node_type__declare_constant_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node_type__declare_constant_raw_string.apply(null, arguments);\n};\n\nvar real__node_type__graph = asm[\"_node_type__graph\"]; asm[\"_node_type__graph\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__node_type__graph.apply(null, arguments);\n};\n\nvar real__params__add_bool = asm[\"_params__add_bool\"]; asm[\"_params__add_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_bool.apply(null, arguments);\n};\n\nvar real__params__add_double = asm[\"_params__add_double\"]; asm[\"_params__add_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_double.apply(null, arguments);\n};\n\nvar real__params__add_function_key = asm[\"_params__add_function_key\"]; asm[\"_params__add_function_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_function_key.apply(null, arguments);\n};\n\nvar real__params__add_int = asm[\"_params__add_int\"]; asm[\"_params__add_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_int.apply(null, arguments);\n};\n\nvar real__params__add_long = asm[\"_params__add_long\"]; asm[\"_params__add_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_long.apply(null, arguments);\n};\n\nvar real__params__add_null = asm[\"_params__add_null\"]; asm[\"_params__add_null\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_null.apply(null, arguments);\n};\n\nvar real__params__add_object = asm[\"_params__add_object\"]; asm[\"_params__add_object\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_object.apply(null, arguments);\n};\n\nvar real__params__add_string = asm[\"_params__add_string\"]; asm[\"_params__add_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_string.apply(null, arguments);\n};\n\nvar real__params__add_var_key = asm[\"_params__add_var_key\"]; asm[\"_params__add_var_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_var_key.apply(null, arguments);\n};\n\nvar real__params__add_var_key_new = asm[\"_params__add_var_key_new\"]; asm[\"_params__add_var_key_new\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__add_var_key_new.apply(null, arguments);\n};\n\nvar real__params__create = asm[\"_params__create\"]; asm[\"_params__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__params__create.apply(null, arguments);\n};\n\nvar real__plugin__create = asm[\"_plugin__create\"]; asm[\"_plugin__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__plugin__create.apply(null, arguments);\n};\n\nvar real__read_bool = asm[\"_read_bool\"]; asm[\"_read_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__read_bool.apply(null, arguments);\n};\n\nvar real__read_double = asm[\"_read_double\"]; asm[\"_read_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__read_double.apply(null, arguments);\n};\n\nvar real__read_int = asm[\"_read_int\"]; asm[\"_read_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__read_int.apply(null, arguments);\n};\n\nvar real__read_long = asm[\"_read_long\"]; asm[\"_read_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__read_long.apply(null, arguments);\n};\n\nvar real__read_ulong = asm[\"_read_ulong\"]; asm[\"_read_ulong\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__read_ulong.apply(null, arguments);\n};\n\nvar real__sbrk = asm[\"_sbrk\"]; asm[\"_sbrk\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__sbrk.apply(null, arguments);\n};\n\nvar real__string__set_size = asm[\"_string__set_size\"]; asm[\"_string__set_size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__string__set_size.apply(null, arguments);\n};\n\nvar real__string_array__to_string = asm[\"_string_array__to_string\"]; asm[\"_string_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__string_array__to_string.apply(null, arguments);\n};\n\nvar real__ulong_array__to_string = asm[\"_ulong_array__to_string\"]; asm[\"_ulong_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real__ulong_array__to_string.apply(null, arguments);\n};\n\nvar real_establishStackSpace = asm[\"establishStackSpace\"]; asm[\"establishStackSpace\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_establishStackSpace.apply(null, arguments);\n};\n\nvar real_getTempRet0 = asm[\"getTempRet0\"]; asm[\"getTempRet0\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_getTempRet0.apply(null, arguments);\n};\n\nvar real_setTempRet0 = asm[\"setTempRet0\"]; asm[\"setTempRet0\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_setTempRet0.apply(null, arguments);\n};\n\nvar real_setThrew = asm[\"setThrew\"]; asm[\"setThrew\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_setThrew.apply(null, arguments);\n};\n\nvar real_stackAlloc = asm[\"stackAlloc\"]; asm[\"stackAlloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackAlloc.apply(null, arguments);\n};\n\nvar real_stackRestore = asm[\"stackRestore\"]; asm[\"stackRestore\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackRestore.apply(null, arguments);\n};\n\nvar real_stackSave = asm[\"stackSave\"]; asm[\"stackSave\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return real_stackSave.apply(null, arguments);\n};\nModule[\"asm\"] = asm;\nvar ___errno_location = Module[\"___errno_location\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"___errno_location\"].apply(null, arguments) };\nvar _ctx__create = Module[\"_ctx__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ctx__create\"].apply(null, arguments) };\nvar _ctx__get = Module[\"_ctx__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ctx__get\"].apply(null, arguments) };\nvar _ctx__type = Module[\"_ctx__type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ctx__type\"].apply(null, arguments) };\nvar _double_array__to_string = Module[\"_double_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_double_array__to_string\"].apply(null, arguments) };\nvar _emscripten_replace_memory = Module[\"_emscripten_replace_memory\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null, arguments) };\nvar _fflush = Module[\"_fflush\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_fflush\"].apply(null, arguments) };\nvar _free = Module[\"_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_free\"].apply(null, arguments) };\nvar _function__create = Module[\"_function__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_function__create\"].apply(null, arguments) };\nvar _function__pipe_key_with = Module[\"_function__pipe_key_with\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_function__pipe_key_with\"].apply(null, arguments) };\nvar _function__pipe_with = Module[\"_function__pipe_with\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_function__pipe_with\"].apply(null, arguments) };\nvar _gctx__bind = Module[\"_gctx__bind\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__bind\"].apply(null, arguments) };\nvar _gctx__declare = Module[\"_gctx__declare\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__declare\"].apply(null, arguments) };\nvar _gctx__declare_double = Module[\"_gctx__declare_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__declare_double\"].apply(null, arguments) };\nvar _gctx__declare_int = Module[\"_gctx__declare_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__declare_int\"].apply(null, arguments) };\nvar _gctx__declare_long = Module[\"_gctx__declare_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__declare_long\"].apply(null, arguments) };\nvar _gctx__declare_null = Module[\"_gctx__declare_null\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__declare_null\"].apply(null, arguments) };\nvar _gctx__declare_raw_string = Module[\"_gctx__declare_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__declare_raw_string\"].apply(null, arguments) };\nvar _gctx__execute = Module[\"_gctx__execute\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__execute\"].apply(null, arguments) };\nvar _gctx__execute_key = Module[\"_gctx__execute_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__execute_key\"].apply(null, arguments) };\nvar _gctx__execute_prepared = Module[\"_gctx__execute_prepared\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__execute_prepared\"].apply(null, arguments) };\nvar _gctx__get_bool = Module[\"_gctx__get_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__get_bool\"].apply(null, arguments) };\nvar _gctx__get_double = Module[\"_gctx__get_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__get_double\"].apply(null, arguments) };\nvar _gctx__get_int = Module[\"_gctx__get_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__get_int\"].apply(null, arguments) };\nvar _gctx__get_long = Module[\"_gctx__get_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__get_long\"].apply(null, arguments) };\nvar _gctx__get_raw_string = Module[\"_gctx__get_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__get_raw_string\"].apply(null, arguments) };\nvar _gctx__get_ulong = Module[\"_gctx__get_ulong\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__get_ulong\"].apply(null, arguments) };\nvar _gctx__graph = Module[\"_gctx__graph\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__graph\"].apply(null, arguments) };\nvar _gctx__json = Module[\"_gctx__json\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__json\"].apply(null, arguments) };\nvar _gctx__on_end = Module[\"_gctx__on_end\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__on_end\"].apply(null, arguments) };\nvar _gctx__ordinal = Module[\"_gctx__ordinal\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__ordinal\"].apply(null, arguments) };\nvar _gctx__path = Module[\"_gctx__path\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__path\"].apply(null, arguments) };\nvar _gctx__prepare = Module[\"_gctx__prepare\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__prepare\"].apply(null, arguments) };\nvar _gctx__prepare_key = Module[\"_gctx__prepare_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__prepare_key\"].apply(null, arguments) };\nvar _gctx__set_double = Module[\"_gctx__set_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__set_double\"].apply(null, arguments) };\nvar _gctx__set_int = Module[\"_gctx__set_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__set_int\"].apply(null, arguments) };\nvar _gctx__set_long = Module[\"_gctx__set_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__set_long\"].apply(null, arguments) };\nvar _gctx__set_raw_string = Module[\"_gctx__set_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gctx__set_raw_string\"].apply(null, arguments) };\nvar _gdouble_array__get = Module[\"_gdouble_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gdouble_array__get\"].apply(null, arguments) };\nvar _gdouble_array__set = Module[\"_gdouble_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gdouble_array__set\"].apply(null, arguments) };\nvar _gdouble_array__size = Module[\"_gdouble_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gdouble_array__size\"].apply(null, arguments) };\nvar _gfunction__create = Module[\"_gfunction__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gfunction__create\"].apply(null, arguments) };\nvar _gfunction__parse = Module[\"_gfunction__parse\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gfunction__parse\"].apply(null, arguments) };\nvar _gfunction__pipe = Module[\"_gfunction__pipe\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gfunction__pipe\"].apply(null, arguments) };\nvar _gfunction__pipe_key = Module[\"_gfunction__pipe_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gfunction__pipe_key\"].apply(null, arguments) };\nvar _gfunction__unsafe_dec_ref = Module[\"_gfunction__unsafe_dec_ref\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gfunction__unsafe_dec_ref\"].apply(null, arguments) };\nvar _gfunction__unsafe_set_key = Module[\"_gfunction__unsafe_set_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gfunction__unsafe_set_key\"].apply(null, arguments) };\nvar _ggraph__create_node_volatile = Module[\"_ggraph__create_node_volatile\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__create_node_volatile\"].apply(null, arguments) };\nvar _ggraph__declare_function = Module[\"_ggraph__declare_function\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__declare_function\"].apply(null, arguments) };\nvar _ggraph__declare_meta = Module[\"_ggraph__declare_meta\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__declare_meta\"].apply(null, arguments) };\nvar _ggraph__declare_plugin = Module[\"_ggraph__declare_plugin\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__declare_plugin\"].apply(null, arguments) };\nvar _ggraph__declare_type = Module[\"_ggraph__declare_type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__declare_type\"].apply(null, arguments) };\nvar _ggraph__destroy = Module[\"_ggraph__destroy\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__destroy\"].apply(null, arguments) };\nvar _ggraph__disable_debug = Module[\"_ggraph__disable_debug\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__disable_debug\"].apply(null, arguments) };\nvar _ggraph__enable_debug = Module[\"_ggraph__enable_debug\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__enable_debug\"].apply(null, arguments) };\nvar _ggraph__function = Module[\"_ggraph__function\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__function\"].apply(null, arguments) };\nvar _ggraph__is_meta = Module[\"_ggraph__is_meta\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__is_meta\"].apply(null, arguments) };\nvar _ggraph__meta = Module[\"_ggraph__meta\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__meta\"].apply(null, arguments) };\nvar _ggraph__type = Module[\"_ggraph__type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph__type\"].apply(null, arguments) };\nvar _ggraph_export_functions = Module[\"_ggraph_export_functions\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph_export_functions\"].apply(null, arguments) };\nvar _ggraph_export_types = Module[\"_ggraph_export_types\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ggraph_export_types\"].apply(null, arguments) };\nvar _gint_array__get = Module[\"_gint_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gint_array__get\"].apply(null, arguments) };\nvar _gint_array__set = Module[\"_gint_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gint_array__set\"].apply(null, arguments) };\nvar _gint_array__size = Module[\"_gint_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gint_array__size\"].apply(null, arguments) };\nvar _glong_array__get = Module[\"_glong_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_glong_array__get\"].apply(null, arguments) };\nvar _glong_array__set = Module[\"_glong_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_glong_array__set\"].apply(null, arguments) };\nvar _glong_array__size = Module[\"_glong_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_glong_array__size\"].apply(null, arguments) };\nvar _gnode__get_bool = Module[\"_gnode__get_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__get_bool\"].apply(null, arguments) };\nvar _gnode__get_double = Module[\"_gnode__get_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__get_double\"].apply(null, arguments) };\nvar _gnode__get_int = Module[\"_gnode__get_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__get_int\"].apply(null, arguments) };\nvar _gnode__get_long = Module[\"_gnode__get_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__get_long\"].apply(null, arguments) };\nvar _gnode__get_or_create = Module[\"_gnode__get_or_create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__get_or_create\"].apply(null, arguments) };\nvar _gnode__get_raw_string = Module[\"_gnode__get_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__get_raw_string\"].apply(null, arguments) };\nvar _gnode__json = Module[\"_gnode__json\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__json\"].apply(null, arguments) };\nvar _gnode__set = Module[\"_gnode__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__set\"].apply(null, arguments) };\nvar _gnode__set_double = Module[\"_gnode__set_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__set_double\"].apply(null, arguments) };\nvar _gnode__set_int = Module[\"_gnode__set_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__set_int\"].apply(null, arguments) };\nvar _gnode__set_long = Module[\"_gnode__set_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__set_long\"].apply(null, arguments) };\nvar _gnode__set_null = Module[\"_gnode__set_null\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__set_null\"].apply(null, arguments) };\nvar _gnode__set_raw_string = Module[\"_gnode__set_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode__set_raw_string\"].apply(null, arguments) };\nvar _gnode_type__declare_attribute = Module[\"_gnode_type__declare_attribute\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode_type__declare_attribute\"].apply(null, arguments) };\nvar _gnode_type__declare_constant = Module[\"_gnode_type__declare_constant\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode_type__declare_constant\"].apply(null, arguments) };\nvar _gnode_type__json_to = Module[\"_gnode_type__json_to\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode_type__json_to\"].apply(null, arguments) };\nvar _gnode_type__key = Module[\"_gnode_type__key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gnode_type__key\"].apply(null, arguments) };\nvar _gobject__un_mark = Module[\"_gobject__un_mark\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gobject__un_mark\"].apply(null, arguments) };\nvar _graph__configure_plugin = Module[\"_graph__configure_plugin\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_graph__configure_plugin\"].apply(null, arguments) };\nvar _graph__create = Module[\"_graph__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_graph__create\"].apply(null, arguments) };\nvar _graph__size_buffer = Module[\"_graph__size_buffer\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_graph__size_buffer\"].apply(null, arguments) };\nvar _graph__size_cache = Module[\"_graph__size_cache\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_graph__size_cache\"].apply(null, arguments) };\nvar _graph__size_heap = Module[\"_graph__size_heap\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_graph__size_heap\"].apply(null, arguments) };\nvar _gstring__close = Module[\"_gstring__close\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring__close\"].apply(null, arguments) };\nvar _gstring__create = Module[\"_gstring__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring__create\"].apply(null, arguments) };\nvar _gstring__get = Module[\"_gstring__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring__get\"].apply(null, arguments) };\nvar _gstring__prepare = Module[\"_gstring__prepare\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring__prepare\"].apply(null, arguments) };\nvar _gstring_array__add = Module[\"_gstring_array__add\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring_array__add\"].apply(null, arguments) };\nvar _gstring_array__create = Module[\"_gstring_array__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring_array__create\"].apply(null, arguments) };\nvar _gstring_array__get = Module[\"_gstring_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring_array__get\"].apply(null, arguments) };\nvar _gstring_array__set = Module[\"_gstring_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring_array__set\"].apply(null, arguments) };\nvar _gstring_array__size = Module[\"_gstring_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gstring_array__size\"].apply(null, arguments) };\nvar _gulong_array__get = Module[\"_gulong_array__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gulong_array__get\"].apply(null, arguments) };\nvar _gulong_array__set = Module[\"_gulong_array__set\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gulong_array__set\"].apply(null, arguments) };\nvar _gulong_array__size = Module[\"_gulong_array__size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gulong_array__size\"].apply(null, arguments) };\nvar _gwebsocket_client__on_msg = Module[\"_gwebsocket_client__on_msg\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_gwebsocket_client__on_msg\"].apply(null, arguments) };\nvar _int_array__to_string = Module[\"_int_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_int_array__to_string\"].apply(null, arguments) };\nvar _js_free = Module[\"_js_free\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_js_free\"].apply(null, arguments) };\nvar _js_malloc = Module[\"_js_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_js_malloc\"].apply(null, arguments) };\nvar _llvm_bswap_i32 = Module[\"_llvm_bswap_i32\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_llvm_bswap_i32\"].apply(null, arguments) };\nvar _long_array__to_string = Module[\"_long_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_long_array__to_string\"].apply(null, arguments) };\nvar _main = Module[\"_main\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_main\"].apply(null, arguments) };\nvar _malloc = Module[\"_malloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_malloc\"].apply(null, arguments) };\nvar _memcpy = Module[\"_memcpy\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_memcpy\"].apply(null, arguments) };\nvar _memset = Module[\"_memset\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_memset\"].apply(null, arguments) };\nvar _node__get = Module[\"_node__get\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node__get\"].apply(null, arguments) };\nvar _node__graph = Module[\"_node__graph\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node__graph\"].apply(null, arguments) };\nvar _node__type = Module[\"_node__type\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node__type\"].apply(null, arguments) };\nvar _node_type__declare_constant_double = Module[\"_node_type__declare_constant_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node_type__declare_constant_double\"].apply(null, arguments) };\nvar _node_type__declare_constant_int = Module[\"_node_type__declare_constant_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node_type__declare_constant_int\"].apply(null, arguments) };\nvar _node_type__declare_constant_long = Module[\"_node_type__declare_constant_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node_type__declare_constant_long\"].apply(null, arguments) };\nvar _node_type__declare_constant_raw_string = Module[\"_node_type__declare_constant_raw_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node_type__declare_constant_raw_string\"].apply(null, arguments) };\nvar _node_type__graph = Module[\"_node_type__graph\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_node_type__graph\"].apply(null, arguments) };\nvar _params__add_bool = Module[\"_params__add_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_bool\"].apply(null, arguments) };\nvar _params__add_double = Module[\"_params__add_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_double\"].apply(null, arguments) };\nvar _params__add_function_key = Module[\"_params__add_function_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_function_key\"].apply(null, arguments) };\nvar _params__add_int = Module[\"_params__add_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_int\"].apply(null, arguments) };\nvar _params__add_long = Module[\"_params__add_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_long\"].apply(null, arguments) };\nvar _params__add_null = Module[\"_params__add_null\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_null\"].apply(null, arguments) };\nvar _params__add_object = Module[\"_params__add_object\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_object\"].apply(null, arguments) };\nvar _params__add_string = Module[\"_params__add_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_string\"].apply(null, arguments) };\nvar _params__add_var_key = Module[\"_params__add_var_key\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_var_key\"].apply(null, arguments) };\nvar _params__add_var_key_new = Module[\"_params__add_var_key_new\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__add_var_key_new\"].apply(null, arguments) };\nvar _params__create = Module[\"_params__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_params__create\"].apply(null, arguments) };\nvar _plugin__create = Module[\"_plugin__create\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_plugin__create\"].apply(null, arguments) };\nvar _read_bool = Module[\"_read_bool\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_read_bool\"].apply(null, arguments) };\nvar _read_double = Module[\"_read_double\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_read_double\"].apply(null, arguments) };\nvar _read_int = Module[\"_read_int\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_read_int\"].apply(null, arguments) };\nvar _read_long = Module[\"_read_long\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_read_long\"].apply(null, arguments) };\nvar _read_ulong = Module[\"_read_ulong\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_read_ulong\"].apply(null, arguments) };\nvar _sbrk = Module[\"_sbrk\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_sbrk\"].apply(null, arguments) };\nvar _string__set_size = Module[\"_string__set_size\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_string__set_size\"].apply(null, arguments) };\nvar _string_array__to_string = Module[\"_string_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_string_array__to_string\"].apply(null, arguments) };\nvar _ulong_array__to_string = Module[\"_ulong_array__to_string\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"_ulong_array__to_string\"].apply(null, arguments) };\nvar establishStackSpace = Module[\"establishStackSpace\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments) };\nvar getTempRet0 = Module[\"getTempRet0\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"getTempRet0\"].apply(null, arguments) };\nvar runPostSets = Module[\"runPostSets\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"runPostSets\"].apply(null, arguments) };\nvar setTempRet0 = Module[\"setTempRet0\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"setTempRet0\"].apply(null, arguments) };\nvar setThrew = Module[\"setThrew\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"setThrew\"].apply(null, arguments) };\nvar stackAlloc = Module[\"stackAlloc\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments) };\nvar stackRestore = Module[\"stackRestore\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"stackRestore\"].apply(null, arguments) };\nvar stackSave = Module[\"stackSave\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"stackSave\"].apply(null, arguments) };\nvar dynCall_ii = Module[\"dynCall_ii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_ii\"].apply(null, arguments) };\nvar dynCall_iiii = Module[\"dynCall_iiii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_iiii\"].apply(null, arguments) };\nvar dynCall_iijji = Module[\"dynCall_iijji\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_iijji\"].apply(null, arguments) };\nvar dynCall_vi = Module[\"dynCall_vi\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_vi\"].apply(null, arguments) };\nvar dynCall_vii = Module[\"dynCall_vii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_vii\"].apply(null, arguments) };\nvar dynCall_viidii = Module[\"dynCall_viidii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_viidii\"].apply(null, arguments) };\nvar dynCall_viidiiii = Module[\"dynCall_viidiiii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_viidiiii\"].apply(null, arguments) };\nvar dynCall_viiidiidi = Module[\"dynCall_viiidiidi\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_viiidiidi\"].apply(null, arguments) };\nvar dynCall_viiii = Module[\"dynCall_viiii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_viiii\"].apply(null, arguments) };\nvar dynCall_viiiii = Module[\"dynCall_viiiii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_viiiii\"].apply(null, arguments) };\nvar dynCall_viiiiii = Module[\"dynCall_viiiiii\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null, arguments) };\nvar dynCall_vijj = Module[\"dynCall_vijj\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_vijj\"].apply(null, arguments) };\nvar dynCall_vijji = Module[\"dynCall_vijji\"] = function() {\n  assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n  assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n  return Module[\"asm\"][\"dynCall_vijji\"].apply(null, arguments) };\n;\n\n\n\n// === Auto-generated postamble setup entry stuff ===\n\nModule['asm'] = asm;\n\nif (!Module[\"intArrayFromString\"]) Module[\"intArrayFromString\"] = function() { abort(\"'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"intArrayToString\"]) Module[\"intArrayToString\"] = function() { abort(\"'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"ccall\"]) Module[\"ccall\"] = function() { abort(\"'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"cwrap\"]) Module[\"cwrap\"] = function() { abort(\"'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"setValue\"]) Module[\"setValue\"] = function() { abort(\"'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getValue\"]) Module[\"getValue\"] = function() { abort(\"'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"allocate\"]) Module[\"allocate\"] = function() { abort(\"'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getMemory\"]) Module[\"getMemory\"] = function() { abort(\"'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nModule[\"Pointer_stringify\"] = Pointer_stringify;\nif (!Module[\"AsciiToString\"]) Module[\"AsciiToString\"] = function() { abort(\"'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToAscii\"]) Module[\"stringToAscii\"] = function() { abort(\"'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF8ArrayToString\"]) Module[\"UTF8ArrayToString\"] = function() { abort(\"'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF8ToString\"]) Module[\"UTF8ToString\"] = function() { abort(\"'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF8Array\"]) Module[\"stringToUTF8Array\"] = function() { abort(\"'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF8\"]) Module[\"stringToUTF8\"] = function() { abort(\"'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF8\"]) Module[\"lengthBytesUTF8\"] = function() { abort(\"'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF16ToString\"]) Module[\"UTF16ToString\"] = function() { abort(\"'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF16\"]) Module[\"stringToUTF16\"] = function() { abort(\"'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF16\"]) Module[\"lengthBytesUTF16\"] = function() { abort(\"'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"UTF32ToString\"]) Module[\"UTF32ToString\"] = function() { abort(\"'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stringToUTF32\"]) Module[\"stringToUTF32\"] = function() { abort(\"'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"lengthBytesUTF32\"]) Module[\"lengthBytesUTF32\"] = function() { abort(\"'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"allocateUTF8\"]) Module[\"allocateUTF8\"] = function() { abort(\"'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackTrace\"]) Module[\"stackTrace\"] = function() { abort(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPreRun\"]) Module[\"addOnPreRun\"] = function() { abort(\"'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnInit\"]) Module[\"addOnInit\"] = function() { abort(\"'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPreMain\"]) Module[\"addOnPreMain\"] = function() { abort(\"'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnExit\"]) Module[\"addOnExit\"] = function() { abort(\"'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addOnPostRun\"]) Module[\"addOnPostRun\"] = function() { abort(\"'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeStringToMemory\"]) Module[\"writeStringToMemory\"] = function() { abort(\"'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"writeArrayToMemory\"]) Module[\"writeArrayToMemory\"] = function() { abort(\"'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nModule[\"writeAsciiToMemory\"] = writeAsciiToMemory;\nif (!Module[\"addRunDependency\"]) Module[\"addRunDependency\"] = function() { abort(\"'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"removeRunDependency\"]) Module[\"removeRunDependency\"] = function() { abort(\"'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"ENV\"]) Module[\"ENV\"] = function() { abort(\"'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"FS\"]) Module[\"FS\"] = function() { abort(\"'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"FS_createFolder\"]) Module[\"FS_createFolder\"] = function() { abort(\"'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createPath\"]) Module[\"FS_createPath\"] = function() { abort(\"'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createDataFile\"]) Module[\"FS_createDataFile\"] = function() { abort(\"'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createPreloadedFile\"]) Module[\"FS_createPreloadedFile\"] = function() { abort(\"'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createLazyFile\"]) Module[\"FS_createLazyFile\"] = function() { abort(\"'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createLink\"]) Module[\"FS_createLink\"] = function() { abort(\"'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_createDevice\"]) Module[\"FS_createDevice\"] = function() { abort(\"'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"FS_unlink\"]) Module[\"FS_unlink\"] = function() { abort(\"'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\") };\nif (!Module[\"GL\"]) Module[\"GL\"] = function() { abort(\"'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"staticAlloc\"]) Module[\"staticAlloc\"] = function() { abort(\"'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"dynamicAlloc\"]) Module[\"dynamicAlloc\"] = function() { abort(\"'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"warnOnce\"]) Module[\"warnOnce\"] = function() { abort(\"'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"loadDynamicLibrary\"]) Module[\"loadDynamicLibrary\"] = function() { abort(\"'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"loadWebAssemblyModule\"]) Module[\"loadWebAssemblyModule\"] = function() { abort(\"'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getLEB\"]) Module[\"getLEB\"] = function() { abort(\"'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getFunctionTables\"]) Module[\"getFunctionTables\"] = function() { abort(\"'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"alignFunctionTables\"]) Module[\"alignFunctionTables\"] = function() { abort(\"'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"registerFunctions\"]) Module[\"registerFunctions\"] = function() { abort(\"'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"addFunction\"]) Module[\"addFunction\"] = function() { abort(\"'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"removeFunction\"]) Module[\"removeFunction\"] = function() { abort(\"'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getFuncWrapper\"]) Module[\"getFuncWrapper\"] = function() { abort(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"prettyPrint\"]) Module[\"prettyPrint\"] = function() { abort(\"'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"makeBigInt\"]) Module[\"makeBigInt\"] = function() { abort(\"'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"dynCall\"]) Module[\"dynCall\"] = function() { abort(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"getCompilerSetting\"]) Module[\"getCompilerSetting\"] = function() { abort(\"'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackSave\"]) Module[\"stackSave\"] = function() { abort(\"'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackRestore\"]) Module[\"stackRestore\"] = function() { abort(\"'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"stackAlloc\"]) Module[\"stackAlloc\"] = function() { abort(\"'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"establishStackSpace\"]) Module[\"establishStackSpace\"] = function() { abort(\"'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"print\"]) Module[\"print\"] = function() { abort(\"'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };\nif (!Module[\"printErr\"]) Module[\"printErr\"] = function() { abort(\"'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") };if (!Module[\"ALLOC_NORMAL\"]) Object.defineProperty(Module, \"ALLOC_NORMAL\", { get: function() { abort(\"'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_STACK\"]) Object.defineProperty(Module, \"ALLOC_STACK\", { get: function() { abort(\"'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_STATIC\"]) Object.defineProperty(Module, \"ALLOC_STATIC\", { get: function() { abort(\"'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_DYNAMIC\"]) Object.defineProperty(Module, \"ALLOC_DYNAMIC\", { get: function() { abort(\"'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\nif (!Module[\"ALLOC_NONE\"]) Object.defineProperty(Module, \"ALLOC_NONE\", { get: function() { abort(\"'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\") } });\n\n\n\n// Modularize mode returns a function, which can be called to\n// create instances. The instances provide a then() method,\n// must like a Promise, that receives a callback. The callback\n// is called when the module is ready to run, with the module\n// as a parameter. (Like a Promise, it also returns the module\n// so you can use the output of .then(..)).\nModule['then'] = function(func) {\n  // We may already be ready to run code at this time. if\n  // so, just queue a call to the callback.\n  if (Module['calledRun']) {\n    func(Module);\n  } else {\n    // we are not ready to call then() yet. we must call it\n    // at the same time we would call onRuntimeInitialized.\n    var old = Module['onRuntimeInitialized'];\n    Module['onRuntimeInitialized'] = function() {\n      if (old) old();\n      func(Module);\n    };\n  }\n  return Module;\n};\n\n/**\n * @constructor\n * @extends {Error}\n * @this {ExitStatus}\n */\nfunction ExitStatus(status) {\n  this.name = \"ExitStatus\";\n  this.message = \"Program terminated with exit(\" + status + \")\";\n  this.status = status;\n};\nExitStatus.prototype = new Error();\nExitStatus.prototype.constructor = ExitStatus;\n\nvar initialStackTop;\nvar calledMain = false;\n\ndependenciesFulfilled = function runCaller() {\n  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n  if (!Module['calledRun']) run();\n  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n}\n\nModule['callMain'] = function callMain(args) {\n  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');\n  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');\n\n  args = args || [];\n\n  ensureInitRuntime();\n\n  var argc = args.length+1;\n  var argv = stackAlloc((argc + 1) * 4);\n  HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);\n  for (var i = 1; i < argc; i++) {\n    HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);\n  }\n  HEAP32[(argv >> 2) + argc] = 0;\n\n\n  try {\n\n    var ret = Module['_main'](argc, argv, 0);\n\n\n    // if we're not running an evented main loop, it's time to exit\n      exit(ret, /* implicit = */ true);\n  }\n  catch(e) {\n    if (e instanceof ExitStatus) {\n      // exit() throws this once it's done to make sure execution\n      // has been stopped completely\n      return;\n    } else if (e == 'SimulateInfiniteLoop') {\n      // running an evented main loop, don't immediately exit\n      Module['noExitRuntime'] = true;\n      return;\n    } else {\n      var toLog = e;\n      if (e && typeof e === 'object' && e.stack) {\n        toLog = [e, e.stack];\n      }\n      err('exception thrown: ' + toLog);\n      Module['quit'](1, e);\n    }\n  } finally {\n    calledMain = true;\n  }\n}\n\n\n\n\n/** @type {function(Array=)} */\nfunction run(args) {\n  args = args || Module['arguments'];\n\n  if (runDependencies > 0) {\n    return;\n  }\n\n  writeStackCookie();\n\n  preRun();\n\n  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\n  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\n\n  function doRun() {\n    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\n    Module['calledRun'] = true;\n\n    if (ABORT) return;\n\n    ensureInitRuntime();\n\n    preMain();\n\n    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n\n    if (Module['_main'] && shouldRunNow) Module['callMain'](args);\n\n    postRun();\n  }\n\n  if (Module['setStatus']) {\n    Module['setStatus']('Running...');\n    setTimeout(function() {\n      setTimeout(function() {\n        Module['setStatus']('');\n      }, 1);\n      doRun();\n    }, 1);\n  } else {\n    doRun();\n  }\n  checkStackCookie();\n}\nModule['run'] = run;\n\nfunction checkUnflushedContent() {\n  // Compiler settings do not allow exiting the runtime, so flushing\n  // the streams is not possible. but in ASSERTIONS mode we check\n  // if there was something to flush, and if so tell the user they\n  // should request that the runtime be exitable.\n  // Normally we would not even include flush() at all, but in ASSERTIONS\n  // builds we do so just for this check, and here we see if there is any\n  // content to flush, that is, we check if there would have been\n  // something a non-ASSERTIONS build would have not seen.\n  // How we flush the streams depends on whether we are in FILESYSTEM=0\n  // mode (which has its own special function for this; otherwise, all\n  // the code is inside libc)\n  var print = out;\n  var printErr = err;\n  var has = false;\n  out = err = function(x) {\n    has = true;\n  }\n  try { // it doesn't matter if it fails\n    var flush = flush_NO_FILESYSTEM;\n    if (flush) flush(0);\n  } catch(e) {}\n  out = print;\n  err = printErr;\n  if (has) {\n    warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');\n  }\n}\n\nfunction exit(status, implicit) {\n  checkUnflushedContent();\n\n  // if this is just main exit-ing implicitly, and the status is 0, then we\n  // don't need to do anything here and can just leave. if the status is\n  // non-zero, though, then we need to report it.\n  // (we may have warned about this earlier, if a situation justifies doing so)\n  if (implicit && Module['noExitRuntime'] && status === 0) {\n    return;\n  }\n\n  if (Module['noExitRuntime']) {\n    // if exit() was called, we may warn the user if the runtime isn't actually being shut down\n    if (!implicit) {\n      err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');\n    }\n  } else {\n\n    ABORT = true;\n    EXITSTATUS = status;\n    STACKTOP = initialStackTop;\n\n    exitRuntime();\n\n    if (Module['onExit']) Module['onExit'](status);\n  }\n\n  Module['quit'](status, new ExitStatus(status));\n}\n\nvar abortDecorators = [];\n\nfunction abort(what) {\n  if (Module['onAbort']) {\n    Module['onAbort'](what);\n  }\n\n  if (what !== undefined) {\n    out(what);\n    err(what);\n    what = JSON.stringify(what)\n  } else {\n    what = '';\n  }\n\n  ABORT = true;\n  EXITSTATUS = 1;\n\n  var extra = '';\n  var output = 'abort(' + what + ') at ' + stackTrace() + extra;\n  if (abortDecorators) {\n    abortDecorators.forEach(function(decorator) {\n      output = decorator(output, what);\n    });\n  }\n  throw output;\n}\nModule['abort'] = abort;\n\nif (Module['preInit']) {\n  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n  while (Module['preInit'].length > 0) {\n    Module['preInit'].pop()();\n  }\n}\n\n// shouldRunNow refers to calling main(), not run().\nvar shouldRunNow = true;\nif (Module['noInitialRun']) {\n  shouldRunNow = false;\n}\n\nModule[\"noExitRuntime\"] = true;\n\nrun();\n\n\n\n\n\n// {{MODULE_ADDITIONS}}\n\n\n\n\n\n  return Module;\n}\n);\n})();\nexport default Module;","module.exports = __webpack_public_path__ + \"static/wasm/greycat.de310772.wasm\";","// tslint:disable-next-line:no-namespace\nexport namespace __hack {}\n\n// instruct monaco-editor how we named the\n// bundles that contain the web workers.\ndeclare global {\n  interface Window {\n    MonacoEnvironment: any;\n  }\n  // tslint:disable-next-line:variable-name\n  var __webpack_public_path__: string;\n}\n\nself.MonacoEnvironment = {\n  getWorkerUrl(moduleId: string, label: string) {\n    const PUBLIC_PATH = __webpack_public_path__ || '';\n    if (label === 'typescript' || label === 'javascript') {\n      return `${PUBLIC_PATH}static/js/ts.worker.js`;\n    }\n    if (label === 'greycat') {\n      return `${PUBLIC_PATH}static/js/gc.worker.js`;\n    }\n    return `${PUBLIC_PATH}static/js/editor.worker.js`;\n  },\n};\n","import greycat from '@greycat/core-wasm';\nimport Keys from './__gen/keys';\nimport * as WebSocket from 'isomorphic-ws';\nexport { default as Keys } from './__gen/keys';\nexport class NodeType {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    declareFactory(factory) {\n        const graph_ptr = greycat._node_type__graph(this.ptr);\n        const graph = GreyCat.elements[graph_ptr];\n        graph.factories[greycat._gnode_type__key(this.ptr)] = factory;\n    }\n    declareAttribute(key, value) {\n        if (typeof value === 'number') {\n            greycat._gnode_type__declare_attribute(this.ptr, GreyCat.paramToKey(key), value);\n        }\n        else {\n            greycat._gnode_type__declare_attribute(this.ptr, GreyCat.paramToKey(key), GreyCat.hash(value));\n        }\n        return this;\n    }\n    declareConstant(key, value) {\n        if (typeof value === 'string') {\n            const js_str = value;\n            const ptr_str = greycat._js_malloc(js_str.length + 1);\n            greycat.writeAsciiToMemory(js_str, ptr_str, false);\n            greycat._node_type__declare_constant_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n            greycat._js_free(ptr_str);\n        }\n        else if (typeof value === 'number') {\n            if (value % 1 !== 0) {\n                greycat._node_type__declare_constant_double(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n            else if (value > -9007199254740992 && value < 9007199254740992) {\n                greycat._node_type__declare_constant_int(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n            else {\n                greycat._node_type__declare_constant_long(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n        }\n        else if (value instanceof Function) {\n            greycat._gnode_type__declare_constant(this.ptr, GreyCat.paramToKey(key, this), value.ptr, Keys.g_function);\n        }\n        else {\n            const graph_ptr = greycat._node_type__graph(this.ptr);\n            const anonymous_func_ptr = greycat._function__create(graph_ptr);\n            GreyCat.elements[anonymous_func_ptr] = value;\n            greycat._gnode_type__declare_constant(this.ptr, GreyCat.paramToKey(key, this), anonymous_func_ptr, Keys.g_function);\n            greycat._gobject__un_mark(anonymous_func_ptr, Keys.g_function);\n        }\n        return this;\n    }\n    declareFunction(key, value) {\n        return this;\n    }\n    toString() {\n        const buffer = greycat._gstring__create();\n        greycat._gnode_type__json_to(this.ptr, buffer);\n        greycat._gstring__close(buffer);\n        const buffer_raw = greycat._gstring__get(buffer);\n        const result = greycat.Pointer_stringify(buffer_raw);\n        greycat._gobject__un_mark(buffer, Keys.g_string);\n        return result;\n    }\n}\nexport class Context {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.userData = {};\n        this.ptr = nptr;\n    }\n    execute(f) {\n        if (typeof f === 'number') {\n            greycat._gctx__execute_key(this.ptr, f);\n        }\n        else if (typeof f === 'string') {\n            greycat._gctx__execute_key(this.ptr, GreyCat.hash(f));\n        }\n        else {\n            greycat._gctx__execute(this.ptr, f.ptr);\n        }\n    }\n    prepareExecute(f) {\n        if (typeof f === 'number') {\n            greycat._gctx__prepare_execute_key(this.ptr, f);\n        }\n        else if (typeof f === 'string') {\n            greycat._gctx__prepare_execute_key(this.ptr, GreyCat.hash(f));\n        }\n        else {\n            greycat._gctx__prepare(this.ptr, f.ptr);\n        }\n        return this;\n    }\n    executePrepared() {\n        greycat._gctx__execute_prepared(this.ptr);\n    }\n    ordinal() {\n        return greycat._gctx__ordinal(this.ptr);\n    }\n    onEnd(body) {\n        if (body instanceof Function) {\n            greycat._gctx__on_end(this.ptr, body.ptr);\n        }\n        else {\n            const final_func_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n            GreyCat.elements[final_func_ptr] = body;\n            greycat._gctx__on_end(this.ptr, final_func_ptr);\n            greycat._gobject__un_mark(final_func_ptr, Keys.g_function);\n        }\n        return this;\n    }\n    path() {\n        const strPtr = greycat._gctx__path(this.ptr);\n        const jsStr = greycat.Pointer_stringify(strPtr);\n        greycat._js_free(strPtr);\n        return jsStr;\n    }\n    toString() {\n        const strPtr = greycat._gctx__json(this.ptr);\n        const jsStr = greycat.Pointer_stringify(strPtr);\n        greycat._js_free(strPtr);\n        return jsStr;\n    }\n    toObject() {\n        return JSON.parse(this.toString());\n    }\n    declare(key, value) {\n        if (!value) {\n            greycat._gctx__declare_null(this.ptr, GreyCat.paramToKey(key, this));\n        }\n        else if (typeof value === 'string') {\n            const js_str = value;\n            const ptr_str = greycat._js_malloc(js_str.length + 1);\n            greycat.writeAsciiToMemory(js_str, ptr_str, false);\n            greycat._gctx__declare_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n            greycat._js_free(ptr_str);\n        }\n        else if (value % 1 !== 0) {\n            greycat._gctx__declare_double(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n        else if (value > -9007199254740992 && value < 9007199254740992) {\n            greycat._gctx__declare_int(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n        else {\n            greycat._gctx__declare_long(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n        return this;\n    }\n    set(key, value) {\n        if (typeof value === 'string') {\n            const js_str = value;\n            const ptr_str = greycat._js_malloc(js_str.length + 1);\n            greycat.writeAsciiToMemory(js_str, ptr_str, false);\n            greycat._gctx__set_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n            greycat._js_free(ptr_str);\n        }\n        else if (typeof value === 'number') {\n            if (value % 1 !== 0) {\n                greycat._gctx__set_double(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n            else if (value > -9007199254740992 && value < 9007199254740992) {\n                greycat._gctx__set_int(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n        }\n        else if (typeof value === 'boolean') {\n            greycat._gctx__set_long(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n        else if (value instanceof Function) {\n            greycat._gctx__set_long(this.ptr, GreyCat.paramToKey(key, this), value.ptr);\n        }\n        else {\n        }\n        return this;\n    }\n    get(prop) {\n        const propKey = GreyCat.paramToKey(prop);\n        const type = greycat._ctx__type(this.ptr, propKey);\n        switch (type) {\n            case Keys.g_double:\n                return greycat._gctx__get_double(this.ptr, propKey);\n            case Keys.g_int:\n                return greycat._gctx__get_int(this.ptr, propKey);\n            case Keys.g_long:\n                return greycat._gctx__get_long(this.ptr, propKey);\n            case Keys.g_ulong:\n                return greycat._gctx__get_ulong(this.ptr, propKey);\n            case Keys.g_bool:\n                return greycat._gctx__get_bool(this.ptr, propKey) === 1;\n            case Keys.g_string: {\n                const ptr = greycat._gctx__get_raw_string(this.ptr, propKey);\n                return ptr !== 0 ? greycat.Pointer_stringify(ptr) : null;\n            }\n            case Keys.g_string_array: {\n                const ptr = greycat._ctx__get(this.ptr, propKey);\n                return ptr !== 0 ? new StringArray(ptr) : null;\n            }\n            case Keys.g_long_array: {\n                const ptr = greycat._ctx__get(this.ptr, propKey);\n                return ptr !== 0 ? new LongArray(ptr) : null;\n            }\n            case Keys.g_ulong_array: {\n                const ptr = greycat._ctx__get(this.ptr, propKey);\n                return ptr !== 0 ? new ULongArray(ptr) : null;\n            }\n            case Keys.g_int_array: {\n                const ptr = greycat._ctx__get(this.ptr, propKey);\n                return ptr !== 0 ? new IntArray(ptr) : null;\n            }\n            case Keys.g_double_array: {\n                const ptr = greycat._ctx__get(this.ptr, propKey);\n                return ptr !== 0 ? new DoubleArray(ptr) : null;\n            }\n            default: {\n                const ptr = greycat._ctx__get(this.ptr, propKey);\n                if (ptr === 0) {\n                    return null;\n                }\n                else {\n                    const graph_ptr = greycat._gctx__graph(this.ptr);\n                    const graph = GreyCat.elements[graph_ptr];\n                    const factory = graph.factories[type];\n                    if (factory !== undefined) {\n                        return factory(ptr);\n                    }\n                    else {\n                        return new Node(ptr);\n                    }\n                }\n            }\n        }\n    }\n    bind(src, target) {\n        greycat._gctx__bind(this.ptr, GreyCat.paramToKey(src, this), GreyCat.paramToKey(target, this));\n        return this;\n    }\n}\nexport class ULongArray {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_ulong_array);\n            this.ptr = 0;\n        }\n    }\n    toString() {\n        const raw_c_str = greycat._ulong_array__to_string(this.ptr);\n        const ts_str = greycat.Pointer_stringify(raw_c_str);\n        greycat._js_free(ts_str);\n        return ts_str;\n    }\n    get(offset) {\n        return greycat._gulong_array__get(this.ptr, offset);\n    }\n    set(offset, value) {\n        greycat._gulong_array__set(this.ptr, offset, value);\n        return this;\n    }\n    add(value) {\n        return greycat._gulong_array__add(this.ptr, value);\n    }\n    size() {\n        return greycat._gulong_array__size(this.ptr);\n    }\n}\nexport class LongArray {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_long_array);\n            this.ptr = 0;\n        }\n    }\n    toString() {\n        const raw_c_str = greycat._long_array__to_string(this.ptr);\n        const ts_str = greycat.Pointer_stringify(raw_c_str);\n        greycat._js_free(ts_str);\n        return ts_str;\n    }\n    get(offset) {\n        return greycat._glong_array__get(this.ptr, offset);\n    }\n    set(offset, value) {\n        greycat._glong_array__set(this.ptr, offset, value);\n        return this;\n    }\n    add(value) {\n        return greycat._glong_array__add(this.ptr, value);\n    }\n    size() {\n        return greycat._glong_array__size(this.ptr);\n    }\n}\nexport class IntArray {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_int_array);\n            this.ptr = 0;\n        }\n    }\n    toString() {\n        const raw_c_str = greycat._int_array__to_string(this.ptr);\n        const ts_str = greycat.Pointer_stringify(raw_c_str);\n        greycat._js_free(ts_str);\n        return ts_str;\n    }\n    get(offset) {\n        return greycat._gint_array__get(this.ptr, offset);\n    }\n    set(offset, value) {\n        greycat._gint_array__set(this.ptr, offset, value);\n        return this;\n    }\n    add(value) {\n        return greycat._gint_array__add(this.ptr, value);\n    }\n    size() {\n        return greycat._gint_array__size(this.ptr);\n    }\n}\nexport class DoubleArray {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_double_array);\n            this.ptr = 0;\n        }\n    }\n    toString() {\n        const raw_c_str = greycat._double_array__to_string(this.ptr);\n        const ts_str = greycat.Pointer_stringify(raw_c_str);\n        greycat._js_free(ts_str);\n        return ts_str;\n    }\n    get(offset) {\n        return greycat._gdouble_array__get(this.ptr, offset);\n    }\n    set(offset, value) {\n        greycat._gdouble_array__set(this.ptr, offset, value);\n        return this;\n    }\n    add(value) {\n        return greycat._gdouble_array__add(this.ptr, value);\n    }\n    size() {\n        return greycat._gdouble_array__size(this.ptr);\n    }\n}\nexport class StringArray {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_string_array);\n            this.ptr = 0;\n        }\n    }\n    toString() {\n        const raw_c_str = greycat._string_array__to_string(this.ptr);\n        const ts_str = greycat.Pointer_stringify(raw_c_str);\n        greycat._js_free(ts_str);\n        return ts_str;\n    }\n    get(offset) {\n        const gstring_ptr = greycat._gstring_array__get(this.ptr, offset);\n        return greycat.Pointer_stringify(greycat._gstring__get(gstring_ptr));\n    }\n    set(offset, value) {\n        const new_str_ptr = greycat._gstring__create();\n        greycat._gstring__prepare(new_str_ptr, value.length + 1);\n        const new_ptr_raw = greycat._gstring__get(new_str_ptr);\n        greycat.writeAsciiToMemory(value, new_ptr_raw, false);\n        greycat._string__set_size(new_str_ptr, value.length);\n        greycat._gstring__close(new_str_ptr);\n        greycat._gstring_array__set(this.ptr, offset, new_str_ptr);\n        greycat._gobject__un_mark(new_str_ptr, Keys.g_string_array);\n        return this;\n    }\n    add(value) {\n        const new_gstring = greycat._gstring_array__add(this.ptr);\n        greycat._gstring__prepare(new_gstring, value.length + 1);\n        const new_ptr_raw = greycat._gstring__get(new_gstring);\n        greycat.writeAsciiToMemory(value, new_ptr_raw, false);\n        greycat._string__set_size(new_gstring, value.length);\n        greycat._gstring__close(new_gstring);\n        return this;\n    }\n    values(...new_values) {\n        for (let i = 0; i < new_values.length; i++) {\n            this.add(new_values[i]);\n        }\n    }\n    size() {\n        return greycat._gstring_array__size(this.ptr);\n    }\n}\nexport class Param {\n    constructor(type_code, key, value) {\n        this.type_code = type_code;\n        this.key = key;\n        this.value = value;\n    }\n}\nexport class Params {\n    constructor(capacity) {\n        this.ptr = 0;\n        this.ptr = greycat._params__create(capacity);\n    }\n    addInt(key, value) {\n        greycat._params__add_int(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addLong(key, value) {\n        greycat._params__add_long(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addDouble(key, value) {\n        greycat._params__add_double(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addBool(key, value) {\n        greycat._params__add_bool(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addNull(key) {\n        greycat._params__add_null(this.ptr, GreyCat.paramToKey(key));\n        return this;\n    }\n    addVarKey(key, value) {\n        greycat._params__add_var_key(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addVarKeyNew(key, value) {\n        greycat._params__add_var_key_new(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addFunctionKey(key, value) {\n        greycat._params__add_function_key(this.ptr, GreyCat.paramToKey(key), value);\n        return this;\n    }\n    addString(key, value) {\n        const ptr_str = greycat._js_malloc(value.length + 1);\n        greycat.writeAsciiToMemory(value, ptr_str, false);\n        greycat._params__add_string(this.ptr, GreyCat.paramToKey(key), ptr_str);\n        greycat._js_free(ptr_str);\n        return this;\n    }\n    addObject(key, value) {\n        if (value instanceof ULongArray) {\n            greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_ulong_array, value.ptr);\n        }\n        else if (value instanceof LongArray) {\n            greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_long_array, value.ptr);\n        }\n        else if (value instanceof IntArray) {\n            greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_int_array, value.ptr);\n        }\n        else if (value instanceof DoubleArray) {\n            greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_double_array, value.ptr);\n        }\n        else if (value instanceof Function) {\n            greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_function, value.ptr);\n        }\n        return this;\n    }\n    addTypedObject(key, value, type) {\n        greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), type, value);\n        return this;\n    }\n    addAuto(key, value) {\n        const ikey = GreyCat.paramToKey(key);\n        if (value instanceof ULongArray ||\n            value instanceof LongArray ||\n            value instanceof IntArray ||\n            value instanceof DoubleArray) {\n            greycat._params__add_object(this.ptr, ikey, value.ptr);\n        }\n        else if (typeof value === 'string') {\n            this.addString(ikey, value);\n        }\n        else if (typeof value === 'boolean') {\n            this.addBool(ikey, value);\n        }\n        else if (typeof value === 'number') {\n            if (value % 1 !== 0) {\n                this.addDouble(ikey, value);\n            }\n            else if (value > -9007199254740992 && value < 9007199254740992) {\n                this.addInt(ikey, value);\n            }\n            else {\n                this.addLong(ikey, value);\n            }\n        }\n        else if (value instanceof Function) {\n            this.addFunctionKey(key, value.ptr);\n        }\n        return this;\n    }\n}\nexport class Function {\n    constructor(nptr) {\n        this.ptr = 0;\n        this.ptr = nptr;\n    }\n    static params(capacity) {\n        return new Params(capacity);\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_function);\n            this.ptr = 0;\n        }\n    }\n    name(name) {\n        greycat._gfunction__unsafe_set_key(this.ptr, GreyCat.paramToKey(name, this));\n        return this;\n    }\n    pipe(sub, params) {\n        if (typeof sub === 'string') {\n            if (params) {\n                greycat._function__pipe_key_with(this.ptr, GreyCat.hash(sub), params.ptr);\n            }\n            else {\n                greycat._gfunction__pipe_key(this.ptr, GreyCat.hash(sub));\n            }\n        }\n        else if (typeof sub === 'number') {\n            if (params) {\n                greycat._function__pipe_key_with(this.ptr, sub, params.ptr);\n            }\n            else {\n                greycat._gfunction__pipe_key(this.ptr, sub);\n            }\n        }\n        else if (sub instanceof Function) {\n            if (params) {\n                greycat._function__pipe_with(this.ptr, sub.ptr, params.ptr);\n            }\n            else {\n                greycat._gfunction__pipe(this.ptr, sub.ptr);\n            }\n        }\n        else {\n            const sub_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n            GreyCat.elements[sub_ptr] = sub;\n            if (params) {\n                greycat._function__pipe_with(this.ptr, sub_ptr, params.ptr);\n            }\n            else {\n                greycat._gfunction__pipe(this.ptr, sub_ptr);\n            }\n            greycat._gobject__un_mark(sub_ptr, Keys.g_function);\n        }\n        return this;\n    }\n    parse(greycatl_data) {\n        const ptr_str = greycat._js_malloc(greycatl_data.length + 1);\n        greycat.writeAsciiToMemory(greycatl_data, ptr_str, false);\n        const result = greycat._gfunction__parse(this.ptr, ptr_str);\n        greycat._js_free(ptr_str);\n        if (!result) {\n            throw new Error('GreyCat parse error');\n        }\n        return this;\n    }\n    sync() {\n        this.pipe(Keys.g_sync);\n        return this;\n    }\n    declareVar(value, targetVar) {\n        this.pipe(Keys.g_declare_var, Function.params(2)\n            .addAuto(Keys.g_value, value)\n            .addVarKeyNew(Keys.g_result, GreyCat.paramToKey(targetVar)));\n        return this;\n    }\n    assignVar(value, targetVar) {\n        this.pipe(Keys.g_assign_var, Function.params(2)\n            .addAuto(Keys.g_value, value)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n        return this;\n    }\n    print(srcVar) {\n        this.pipe(Keys.g_print, Function.params(1).addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar)));\n        return this;\n    }\n    printAppend(srcVar, targetVar) {\n        this.pipe(Keys.g_print, Function.params(2)\n            .addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar))\n            .addVarKey(Keys.g_result, targetVar ? GreyCat.paramToKey(targetVar) : Keys.g_console));\n        return this;\n    }\n    printAll() {\n        this.pipe(Keys.g_print_all);\n        return this;\n    }\n    newNode(nodeType, targetVar) {\n        this.pipe(Keys.g_new_node, Function.params(2)\n            .addInt(Keys.g_node_type, GreyCat.paramToKey(nodeType))\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n        return this;\n    }\n    newTimepoint(srcVar, timestamp, targetVar) {\n        this.pipe(Keys.g_new_timepoint, Function.params(3)\n            .addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar))\n            .addLong(Keys.g_time, timestamp)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n        return this;\n    }\n    setAttribute(value, targetVar, property) {\n        this.pipe(Keys.g_set_attribute, Function.params(3)\n            .addAuto(Keys.g_value, value)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar))\n            .addInt(Keys.g_prop, GreyCat.paramToKey(property)));\n        return this;\n    }\n    setReference(srcVar, targetVar, property) {\n        this.pipe(Keys.g_set_reference, Function.params(3)\n            .addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar))\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar))\n            .addInt(Keys.g_prop, GreyCat.paramToKey(property)));\n        return this;\n    }\n    readProperty(srcVar, property, targetVar) {\n        this.pipe(Keys.g_read_property, Function.params(3)\n            .addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar))\n            .addInt(Keys.g_prop, GreyCat.paramToKey(property))\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n        return this;\n    }\n    repeat(nb_iteration, sub) {\n        if (typeof sub === 'number') {\n            this.pipe(Keys.g_repeat, Function.params(2)\n                .addInt(Keys.g_nb, nb_iteration)\n                .addFunctionKey(Keys.g_sub, sub));\n        }\n        else if (sub instanceof Function) {\n            this.pipe(Keys.g_repeat, Function.params(2)\n                .addInt(Keys.g_nb, nb_iteration)\n                .addTypedObject(Keys.g_sub, sub.ptr, Keys.g_function));\n        }\n        else {\n            const sub_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n            GreyCat.elements[sub_ptr] = sub;\n            this.pipe(Keys.g_repeat, Function.params(2)\n                .addInt(Keys.g_nb, nb_iteration)\n                .addTypedObject(Keys.g_sub, sub_ptr, Keys.g_function));\n            greycat._gobject__un_mark(sub_ptr, Keys.g_function);\n        }\n        return this;\n    }\n    foreach(src, target, sub) {\n        if (typeof sub === 'number') {\n            this.pipe(Keys.g_foreach, Function.params(2)\n                .addVarKey(Keys.g_src, GreyCat.paramToKey(src))\n                .addFunctionKey(Keys.g_sub, sub));\n        }\n        else if (sub instanceof Function) {\n            this.pipe(Keys.g_foreach, Function.params(2)\n                .addVarKey(Keys.g_src, GreyCat.paramToKey(src))\n                .addTypedObject(Keys.g_sub, sub.ptr, Keys.g_function));\n        }\n        else {\n            const sub_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n            GreyCat.elements[sub_ptr] = sub;\n            this.pipe(Keys.g_foreach, Function.params(2)\n                .addVarKey(Keys.g_src, GreyCat.paramToKey(src))\n                .addTypedObject(Keys.g_sub, sub_ptr, Keys.g_function));\n            greycat._gobject__un_mark(sub_ptr, Keys.g_function);\n        }\n        return this;\n    }\n    loadGlobalIndex(index, target) {\n        this.pipe(Keys.g_load_global_index, Function.params(2)\n            .addString(Keys.g_id, index)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n        return this;\n    }\n    newGlobalIndex(index, target) {\n        this.pipe(Keys.g_new_global_index, Function.params(2)\n            .addString(Keys.g_id, index)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n        return this;\n    }\n    loadMasterIndex(target) {\n        this.pipe(Keys.g_load_master_index, Function.params(1).addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n        return this;\n    }\n    configureIndex(target, property) {\n        this.pipe(Keys.g_configure_index, Function.params(2)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(target))\n            .addInt(Keys.g_prop, GreyCat.paramToKey(property)));\n        return this;\n    }\n    addToIndex(src, target) {\n        this.pipe(Keys.g_add_to_index, Function.params(2)\n            .addVarKey(Keys.g_src, GreyCat.paramToKey(src))\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n        return this;\n    }\n    queryIndex(src, value, target) {\n        this.pipe(Keys.g_query_index, Function.params(3)\n            .addVarKey(Keys.g_src, GreyCat.paramToKey(src))\n            .addAuto(Keys.g_value, value)\n            .addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n        return this;\n    }\n}\nexport class Plugin {\n    start(graph) {\n    }\n    stop(graph) {\n    }\n}\nexport class Node {\n    constructor(nptr) {\n        this.ptr = nptr;\n    }\n    toString() {\n        const strPtr = greycat._gnode__json(this.ptr);\n        const jsStr = greycat.Pointer_stringify(strPtr);\n        greycat._js_free(strPtr);\n        return jsStr;\n    }\n    toObject() {\n        return JSON.parse(this.toString());\n    }\n    set(key, value) {\n        if (value === null) {\n            greycat._gnode__set_null(this.ptr, GreyCat.paramToKey(key, this));\n        }\n        else if (typeof value === 'string') {\n            const js_str = value;\n            const ptr_str = greycat._js_malloc(js_str.length + 1);\n            greycat.writeAsciiToMemory(js_str, ptr_str, false);\n            greycat._gnode__set_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n            greycat._js_free(ptr_str);\n        }\n        else if (typeof value === 'number') {\n            if (value % 1 !== 0) {\n                greycat._gnode__set_double(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n            else if (value > -9007199254740992 && value < 9007199254740992) {\n                greycat._gnode__set_int(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n            else {\n                greycat._gnode__set_long(this.ptr, GreyCat.paramToKey(key, this), value);\n            }\n        }\n        else if (value instanceof Function) {\n            greycat._gnode__set(this.ptr, GreyCat.paramToKey(key, this), value.ptr, Keys.g_function);\n        }\n        else {\n            const graph_ptr = greycat._node__graph(this.ptr);\n            const anonymous_func_ptr = greycat._function__create(graph_ptr);\n            GreyCat.elements[anonymous_func_ptr] = value;\n            greycat._gnode__set(this.ptr, GreyCat.paramToKey(key, this), anonymous_func_ptr, Keys.g_function);\n            greycat._gobject__un_mark(anonymous_func_ptr, Keys.g_function);\n        }\n        return this;\n    }\n    get(key) {\n        const pkey = GreyCat.paramToKey(key);\n        const ptype = greycat._node__type(this.ptr, pkey);\n        switch (ptype) {\n            case Keys.g_null:\n                return null;\n            case Keys.g_bool:\n                return greycat._gnode__get_bool(this.ptr, pkey) === 1;\n            case Keys.g_long:\n            case Keys.g_ulong:\n                return greycat._gnode__get_long(this.ptr, pkey);\n            case Keys.g_double:\n                return greycat._gnode__get_double(this.ptr, pkey);\n            case Keys.g_int:\n                return greycat._gnode__get_int(this.ptr, pkey);\n            case Keys.g_string: {\n                const string_ptr = greycat._gnode__get_raw_string(this.ptr, pkey);\n                if (string_ptr !== 0) {\n                    return greycat.Pointer_stringify(string_ptr);\n                }\n                else {\n                    return null;\n                }\n            }\n            case Keys.g_ulong_array: {\n                return new ULongArray(greycat._node__get(this.ptr, pkey));\n            }\n            case Keys.g_long_array: {\n                return new LongArray(greycat._node__get(this.ptr, pkey));\n            }\n            case Keys.g_int_array: {\n                return new IntArray(greycat._node__get(this.ptr, pkey));\n            }\n            case Keys.g_double_array: {\n                return new DoubleArray(greycat._node__get(this.ptr, pkey));\n            }\n            default: {\n                const ptr = greycat._node__get(this.ptr, pkey);\n                const graph_ptr = greycat._node__graph(this.ptr);\n                const graph = GreyCat.elements[graph_ptr];\n                const factory = graph.factories[ptype];\n                if (factory !== undefined) {\n                    return factory(ptr);\n                }\n                else {\n                    return new Node(ptr);\n                }\n            }\n        }\n    }\n    getOrCreate(key, prop_type) {\n        const pkey = GreyCat.paramToKey(key, this);\n        const ptype = GreyCat.paramToKey(prop_type);\n        const res_ptr = greycat._gnode__get_or_create(this.ptr, pkey, ptype);\n        switch (ptype) {\n            case Keys.g_null:\n                return null;\n            case Keys.g_bool:\n                return greycat._js_read_bool(res_ptr) === 1;\n            case Keys.g_long:\n                return greycat._js_read_ulong(res_ptr);\n            case Keys.g_ulong:\n                return greycat._js_read_long(res_ptr);\n            case Keys.g_double:\n                return greycat._js_read_double(res_ptr);\n            case Keys.g_int:\n                return greycat._js_read_int(res_ptr);\n            case Keys.g_string: {\n                const string_ptr = greycat._gnode__get_raw_string(this.ptr, pkey);\n                if (string_ptr !== 0) {\n                    return greycat.Pointer_stringify(string_ptr);\n                }\n                else {\n                    return null;\n                }\n            }\n            case Keys.g_ulong_array: {\n                return new ULongArray(res_ptr);\n            }\n            case Keys.g_long_array: {\n                return new LongArray(res_ptr);\n            }\n            case Keys.g_int_array: {\n                return new IntArray(res_ptr);\n            }\n            case Keys.g_double_array: {\n                return new DoubleArray(res_ptr);\n            }\n            default: {\n                const graph_ptr = greycat._node__graph(this.ptr);\n                const graph = GreyCat.elements[graph_ptr];\n                const factory = graph.factories[ptype];\n                if (factory !== undefined) {\n                    return factory(res_ptr);\n                }\n                else {\n                    return new Node(res_ptr);\n                }\n            }\n        }\n    }\n    deleteRef() {\n        if (this.ptr !== 0) {\n            greycat._gobject__un_mark(this.ptr, Keys.g_node);\n            this.ptr = 0;\n        }\n    }\n}\nexport class Graph {\n    constructor(cacheSize, bufferSize) {\n        this.ptr = 0;\n        this.factories = {};\n        if (cacheSize === undefined) {\n            cacheSize = 1000;\n        }\n        if (bufferSize === undefined) {\n            bufferSize = 10;\n        }\n        this.ptr = greycat._graph__create(cacheSize, bufferSize);\n        GreyCat.elements[this.ptr] = this;\n    }\n    enableDebug() {\n        greycat._ggraph__enable_debug(this.ptr);\n    }\n    disableDebug() {\n        greycat._ggraph__disable_debug(this.ptr);\n    }\n    declareMeta(meta_key, meta) {\n        if (greycat._ggraph__is_meta(this.ptr, meta_key) === 0) {\n            const buffer = greycat._js_malloc(meta.length + 1);\n            greycat.writeAsciiToMemory(meta, buffer, false);\n            greycat._ggraph__declare_meta(this.ptr, meta_key, buffer);\n            greycat._js_free(buffer);\n        }\n    }\n    declareFunction(id, func) {\n        if (func instanceof Function) {\n            greycat._ggraph__declare_function(this.ptr, GreyCat.paramToKey(id, this), func.ptr);\n        }\n        else {\n            const ptr = greycat._function__create(this.ptr);\n            GreyCat.elements[ptr] = func;\n            greycat._ggraph__declare_function(this.ptr, GreyCat.paramToKey(id, this), ptr);\n            greycat._gobject__un_mark(ptr, Keys.g_function);\n        }\n    }\n    declareType(id) {\n        return new NodeType(greycat._ggraph__declare_type(this.ptr, GreyCat.paramToKey(id, this)));\n    }\n    declarePlugin(plugin) {\n        const plug_ptr = greycat._plugin__create();\n        GreyCat.elements[plug_ptr] = plugin;\n        greycat._ggraph__declare_plugin(this.ptr, plug_ptr);\n        return this;\n    }\n    configurePlugin(plugin, params) {\n        greycat._graph__configure_plugin(this.ptr, GreyCat.paramToKey(plugin), params.ptr);\n        return this;\n    }\n    newFunction(body) {\n        if (body !== undefined) {\n            const ptr = greycat._function__create(this.ptr);\n            GreyCat.elements[ptr] = body;\n            return new Function(ptr);\n        }\n        else {\n            return new Function(greycat._gfunction__create(this.ptr));\n        }\n    }\n    getFunction(id) {\n        const ptr = greycat._ggraph__function(this.ptr, GreyCat.paramToKey(id, this));\n        if (ptr === 0) {\n            return null;\n        }\n        else {\n            return new Function(ptr);\n        }\n    }\n    getType(id) {\n        const type_ptr = greycat._ggraph__type(this.ptr, GreyCat.paramToKey(id, this));\n        if (type_ptr === 0) {\n            return null;\n        }\n        else {\n            return new NodeType(type_ptr);\n        }\n    }\n    getMeta(id) {\n        const gstring_ptr = greycat._ggraph__meta(this.ptr, GreyCat.paramToKey(id, this));\n        if (gstring_ptr === 0) {\n            return null;\n        }\n        return greycat.Pointer_stringify(gstring_ptr);\n    }\n    newAnonymousFunction(body) {\n        let ptr;\n        if (body !== undefined) {\n            ptr = greycat._function__create(this.ptr);\n            GreyCat.elements[ptr] = body;\n        }\n        else {\n            ptr = greycat._gfunction__create(this.ptr);\n        }\n        greycat._gfunction__unsafe_dec_ref(ptr);\n        return new Function(ptr);\n    }\n    newContext() {\n        const ptr = greycat._ctx__create(this.ptr);\n        const new_ctx = new Context(ptr);\n        GreyCat.elements[ptr] = new_ctx;\n        return new_ctx;\n    }\n    newVolatile(type) {\n        const vtype = GreyCat.paramToKey(type);\n        switch (vtype) {\n            case Keys.g_string_array:\n                return new StringArray(greycat._gstring_array__create(this.ptr));\n            default:\n                const ptr = greycat._ggraph__create_node_volatile(this.ptr, vtype);\n                if (ptr === 0) {\n                    return null;\n                }\n                else {\n                    const factory = this.factories[vtype];\n                    if (factory !== undefined) {\n                        return factory(ptr);\n                    }\n                    else {\n                        return new Node(ptr);\n                    }\n                }\n        }\n    }\n    exportTypes() {\n        const buffer = greycat._gstring__create();\n        greycat._ggraph_export_types(this.ptr, buffer);\n        greycat._gstring__close(buffer);\n        const buffer_raw = greycat._gstring__get(buffer);\n        const result = greycat.Pointer_stringify(buffer_raw);\n        greycat._gobject__un_mark(buffer, Keys.g_string);\n        return result;\n    }\n    exportFunctions() {\n        const buffer = greycat._gstring__create();\n        greycat._ggraph_export_functions(this.ptr, buffer);\n        greycat._gstring__close(buffer);\n        const buffer_raw = greycat._gstring__get(buffer);\n        const result = greycat.Pointer_stringify(buffer_raw);\n        greycat._gobject__un_mark(buffer, Keys.g_string);\n        return result;\n    }\n    destroy() {\n        if (this.ptr !== 0) {\n            delete GreyCat.elements[this.ptr];\n            greycat._ggraph__destroy(this.ptr);\n            this.ptr = 0;\n        }\n    }\n    heapSize() {\n        return greycat._graph__size_heap(this.ptr);\n    }\n    cacheSize() {\n        return greycat._graph__size_cache(this.ptr);\n    }\n    bufferSize() {\n        return greycat._graph__size_buffer(this.ptr);\n    }\n}\nexport class WebSocketAdapter {\n    constructor(s) {\n        this.buffer = [];\n        this.socket = s;\n        this.connected = false;\n    }\n}\nexport class GreyCat {\n    static onReady(callback) {\n        if (this.isInitiliazed) {\n            callback();\n        }\n        else {\n            greycat.onRuntimeInitialized = () => {\n                this.isInitiliazed = true;\n                callback();\n            };\n        }\n    }\n    static newGraph(cacheSize, bufferSize) {\n        return new Graph(cacheSize, bufferSize);\n    }\n    static newWebSocketClient(nptr, url_ptr, port, use_wss) {\n        const address = greycat.Pointer_stringify(url_ptr);\n        const socket = new WebSocket((use_wss === 1 ? 'wss://' : 'ws://') + address + ':' + port, 'default', {\n            rejectUnauthorized: false,\n        });\n        socket.binaryType = 'arraybuffer';\n        const ws = new WebSocketAdapter(socket);\n        socket.onopen = (e) => {\n            ws.connected = true;\n            for (let i = 0; i < ws.buffer.length; i++) {\n                socket.send(ws.buffer[i].buffer);\n            }\n            ws.buffer = [];\n        };\n        socket.onclose = (e) => {\n            ws.connected = false;\n        };\n        socket.onerror = (e) => {\n            console.error(e);\n        };\n        socket.onmessage = (e) => {\n            const msgBuf = new Uint8Array(e.data);\n            const bug_len = msgBuf.length;\n            const buf = greycat._js_malloc(bug_len);\n            greycat.HEAPU8.set(msgBuf, buf);\n            greycat._gwebsocket_client__on_msg(nptr, buf, bug_len);\n            greycat._js_free(buf);\n        };\n        GreyCat.elements[nptr] = ws;\n    }\n    static destroyWebSocketClient(nptr) {\n        const ws = GreyCat.elements[nptr];\n        ws.socket.close();\n        delete GreyCat.elements[nptr];\n    }\n    static webSocketClientSend(client_id, data_ptr, len) {\n        const ws = GreyCat.elements[client_id];\n        const new_buffer = new Uint8Array(greycat.buffer).slice(data_ptr, data_ptr + len);\n        if (!ws.connected) {\n            ws.buffer.push(new Uint8Array(new_buffer));\n        }\n        else {\n            ws.socket.send(new_buffer.buffer);\n        }\n    }\n    static hash(str) {\n        let hash = 0;\n        let char;\n        if (str.length === 0) {\n            return hash;\n        }\n        for (let i = 0; i < str.length; i++) {\n            char = str.charCodeAt(i);\n            hash = (hash << 5) - hash + char;\n            hash = hash & hash;\n        }\n        return hash;\n    }\n    static paramToKey(param, origin) {\n        if (typeof param === 'string') {\n            const paramHash = GreyCat.hash(param);\n            if (origin !== undefined) {\n                let graph_ptr;\n                if (origin instanceof Function) {\n                    graph_ptr = greycat._gfunction__graph(origin.ptr);\n                }\n                else if (origin instanceof Graph) {\n                    graph_ptr = origin.ptr;\n                }\n                else if (origin instanceof NodeType) {\n                    graph_ptr = greycat._node_type__graph(origin.ptr);\n                }\n                else if (origin instanceof Node) {\n                    graph_ptr = greycat._node__graph(origin.ptr);\n                }\n                else if (origin instanceof Context) {\n                    graph_ptr = greycat._gctx__graph(origin.ptr);\n                }\n                if (greycat._ggraph__is_meta(graph_ptr, paramHash) === 0) {\n                    const meta = param;\n                    const buffer = greycat._js_malloc(meta.length + 1);\n                    greycat.writeAsciiToMemory(meta, buffer, false);\n                    greycat._ggraph__declare_meta(graph_ptr, paramHash, buffer);\n                    greycat._js_free(buffer);\n                }\n            }\n            return paramHash;\n        }\n        else {\n            return param;\n        }\n    }\n}\nGreyCat._module = greycat;\nGreyCat.elements = {};\nGreyCat.isInitiliazed = false;\nGreyCat.Logger = console;\nexport function intParam(key, value) {\n    return new Param(Keys.g_int, GreyCat.paramToKey(key), value);\n}\nexport function longParam(key, value) {\n    return new Param(Keys.g_long, GreyCat.paramToKey(key), value);\n}\nexport function doubleParam(key, value) {\n    return new Param(Keys.g_double, GreyCat.paramToKey(key), value);\n}\nexport function boolParam(key, value) {\n    return new Param(Keys.g_bool, GreyCat.paramToKey(key), value);\n}\nexport function nullParam(key) {\n    return new Param(Keys.g_null, GreyCat.paramToKey(key), 0);\n}\nexport function varKeyParam(key, value) {\n    return new Param(Keys.g_var_key, GreyCat.paramToKey(key), value);\n}\nexport function functionKeyParam(key, value) {\n    return new Param(Keys.g_function_key, GreyCat.paramToKey(key), value);\n}\nexport function stringParam(key, value) {\n    return new Param(Keys.g_string, GreyCat.paramToKey(key), value);\n}\nglobal.GreyCat = GreyCat;\n//# sourceMappingURL=greycat.js.map","module.exports = \"// Generated by dts-bundle v0.7.3\\n// Dependencies for this module:\\n//   ../../isomorphic-ws\\n\\ndeclare module '@greycat/core' {\\n    import * as WebSocket from 'isomorphic-ws';\\n    export { default as Keys } from '@greycat/core/__gen/keys';\\n    interface Reference {\\n        deleteRef(): void;\\n    }\\n    export type Property = string | string[] | boolean | number | Reference | Reference[] | Node | Node[] | Function | ULongArray | DoubleArray | IntArray | LongArray | null;\\n    export type FunctionBody<T = {}> = (t: Context<T>) => void;\\n    export class NodeType {\\n        ptr: number;\\n        constructor(nptr: number);\\n        declareFactory(factory: NodeFactory): void;\\n        declareAttribute(key: number | string, value: number | string): NodeType;\\n        declareConstant(key: number | string, value: number | string | Function | FunctionBody): NodeType;\\n        declareFunction<T = {}>(key: number | string, value: Function<T> | FunctionBody<T>): NodeType;\\n        toString(): string;\\n    }\\n    export class Context<T = {}> {\\n        ptr: number;\\n        userData: {\\n            [P in keyof T]?: T[P];\\n        };\\n        constructor(nptr: number);\\n        execute(f: Function<T> | number | string): void;\\n        prepareExecute(f: Function<T> | number | string): Context<T>;\\n        executePrepared(): void;\\n        ordinal(): number;\\n        onEnd(body: Function<T> | FunctionBody<T>): Context<T>;\\n        path(): string;\\n        toString(): string;\\n        toObject(): any;\\n        declare(key: number | string, value?: number | string): Context<T>;\\n        set(key: number | string, value: Property): Context<T>;\\n        get(prop: string | number): Property;\\n        bind(src: string | number, target: string | number): Context<T>;\\n    }\\n    export class ULongArray implements Reference {\\n        ptr: number;\\n        constructor(nptr: number);\\n        deleteRef(): void;\\n        toString(): string;\\n        get(offset: number): number;\\n        set(offset: number, value: number): ULongArray;\\n        add(value: number): number;\\n        size(): number;\\n    }\\n    export class LongArray implements Reference {\\n        ptr: number;\\n        constructor(nptr: number);\\n        deleteRef(): void;\\n        toString(): string;\\n        get(offset: number): number;\\n        set(offset: number, value: number): ULongArray;\\n        add(value: number): number;\\n        size(): number;\\n    }\\n    export class IntArray implements Reference {\\n        ptr: number;\\n        constructor(nptr: number);\\n        deleteRef(): void;\\n        toString(): string;\\n        get(offset: number): number;\\n        set(offset: number, value: number): ULongArray;\\n        add(value: number): number;\\n        size(): number;\\n    }\\n    export class DoubleArray implements Reference {\\n        ptr: number;\\n        constructor(nptr: number);\\n        deleteRef(): void;\\n        toString(): string;\\n        get(offset: number): number;\\n        set(offset: number, value: number): ULongArray;\\n        add(value: number): number;\\n        size(): number;\\n    }\\n    export class StringArray implements Reference {\\n        ptr: number;\\n        constructor(nptr: number);\\n        deleteRef(): void;\\n        toString(): string;\\n        get(offset: number): number;\\n        set(offset: number, value: string): StringArray;\\n        add(value: string): StringArray;\\n        values(...new_values: string[]): void;\\n        size(): number;\\n    }\\n    export class Param {\\n        type_code: number;\\n        key: number;\\n        value: any;\\n        constructor(type_code: number, key: number, value: any);\\n    }\\n    export class Params {\\n        ptr: number;\\n        constructor(capacity: number);\\n        addInt(key: number | string, value: number): Params;\\n        addLong(key: number | string, value: number): Params;\\n        addDouble(key: number | string, value: number): Params;\\n        addBool(key: number | string, value: boolean): Params;\\n        addNull(key: number | string): Params;\\n        addVarKey(key: number | string, value: number): Params;\\n        addVarKeyNew(key: number | string, value: number): Params;\\n        addFunctionKey(key: number | string, value: number): Params;\\n        addString(key: number | string, value: string): Params;\\n        addObject(key: number | string, value: ULongArray | LongArray | IntArray | DoubleArray | Function): Params;\\n        addTypedObject(key: number | string, value: number, type: number): Params;\\n        addAuto(key: number | string, value: Property): Params;\\n    }\\n    export class Function<T = {}> implements Reference {\\n        static params(capacity: number): Params;\\n        ptr: number;\\n        constructor(nptr: number);\\n        deleteRef(): void;\\n        name(name: string): Function<T>;\\n        pipe(sub: Function<T> | FunctionBody<T> | string | number, params?: Params): Function<T>;\\n        parse(greycatl_data: string): Function<T>;\\n        sync(): Function<T>;\\n        declareVar(value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, targetVar: string | number): Function<T>;\\n        assignVar(value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, targetVar: string | number): Function<T>;\\n        print(srcVar: number | string): Function<T>;\\n        printAppend(srcVar: number | string, targetVar?: number | string): Function<T>;\\n        printAll(): Function<T>;\\n        newNode(nodeType: number | string, targetVar: number | string): Function<T>;\\n        newTimepoint(srcVar: number | string, timestamp: number, targetVar: number | string): Function<T>;\\n        setAttribute(value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, targetVar: string | number, property: number | string): Function<T>;\\n        setReference(srcVar: number | string, targetVar: string | number, property: number | string): Function<T>;\\n        readProperty(srcVar: number | string, property: number | string, targetVar: string | number): Function<T>;\\n        repeat(nb_iteration: number, sub: Function<T> | FunctionBody | number): Function<T>;\\n        foreach(src: number | string, target: number | string, sub: Function<T> | FunctionBody<T> | number): Function<T>;\\n        loadGlobalIndex(index: string, target: number | string): Function<T>;\\n        newGlobalIndex(index: string, target: number | string): Function<T>;\\n        loadMasterIndex(target: number | string): Function<T>;\\n        configureIndex(target: number | string, property: number | string): Function<T>;\\n        addToIndex(src: number | string, target: number | string): Function<T>;\\n        queryIndex(src: number | string, value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, target: number | string): Function<T>;\\n    }\\n    export class Plugin {\\n        start(graph: Graph): void;\\n        stop(graph: Graph): void;\\n    }\\n    export class Node implements Reference {\\n        ptr: number;\\n        constructor(nptr: number);\\n        toString(): string;\\n        toObject(): any;\\n        set(key: number | string, value: number | string | Function | FunctionBody | null): Node;\\n        get(key: number | string): number | string | boolean | Reference | Function | null;\\n        getOrCreate(key: number | string, prop_type: number | string): number | string | boolean | Reference | null;\\n        deleteRef(): void;\\n    }\\n    export type NodeFactory = (t: number) => Node;\\n    export class Graph {\\n        ptr: number;\\n        factories: {\\n            [ptr: number]: NodeFactory;\\n        };\\n        constructor(cacheSize?: number, bufferSize?: number);\\n        enableDebug(): void;\\n        disableDebug(): void;\\n        declareMeta(meta_key: number, meta: string): void;\\n        declareFunction<T = {}>(id: number | string, func: Function<T> | FunctionBody<T>): void;\\n        declareType(id: number | string): NodeType;\\n        declarePlugin(plugin: Plugin): Graph;\\n        configurePlugin(plugin: string | number, params: Params): Graph;\\n        newFunction<T = {}>(body?: FunctionBody<T>): Function<T>;\\n        getFunction(id: number | string): Function | null;\\n        getType(id: number | string): NodeType | null;\\n        getMeta(id: number | string): string | null;\\n        newAnonymousFunction(body?: FunctionBody): Function;\\n        newContext<T = {}>(): Context<T>;\\n        newVolatile(type: number | string): Node | Reference | null;\\n        exportTypes(): string;\\n        exportFunctions(): string;\\n        destroy(): void;\\n        heapSize(): number;\\n        cacheSize(): number;\\n        bufferSize(): number;\\n    }\\n    export class WebSocketAdapter {\\n        buffer: Uint8Array[];\\n        socket: WebSocket;\\n        connected: boolean;\\n        constructor(s: WebSocket);\\n    }\\n    export class GreyCat {\\n        static _module: any;\\n        static elements: {\\n            [ptr: number]: Graph | FunctionBody | Context | Plugin | WebSocketAdapter;\\n        };\\n        static isInitiliazed: boolean;\\n        static Logger: Console;\\n        static onReady(callback: () => void): void;\\n        static newGraph(cacheSize?: number, bufferSize?: number): Graph;\\n        static newWebSocketClient(nptr: number, url_ptr: number, port: number, use_wss: number): void;\\n        static destroyWebSocketClient(nptr: number): void;\\n        static webSocketClientSend(client_id: number, data_ptr: number, len: number): void;\\n        static hash(str: string): number;\\n        static paramToKey(param: number | string, origin?: Function | Graph | NodeType | Node | Context): number;\\n    }\\n    export function intParam(key: number | string, value: number): Param;\\n    export function longParam(key: number | string, value: number): Param;\\n    export function doubleParam(key: number | string, value: number): Param;\\n    export function boolParam(key: number | string, value: number): Param;\\n    export function nullParam(key: number | string): Param;\\n    export function varKeyParam(key: number | string, value: number): Param;\\n    export function functionKeyParam(key: number | string, value: number): Param;\\n    export function stringParam(key: number | string, value: number): Param;\\n}\\n\\ndeclare module '@greycat/core/__gen/keys' {\\n    const _default: {\\n        g_bool: number;\\n        g_true: number;\\n        g_false: number;\\n        g_int: number;\\n        g_long: number;\\n        g_ulong: number;\\n        g_double: number;\\n        g_string: number;\\n        g_template: number;\\n        g_null: number;\\n        g_matrix: number;\\n        g_number: number;\\n        g_double_array: number;\\n        g_int_array: number;\\n        g_long_array: number;\\n        g_ulong_array: number;\\n        g_ref_array: number;\\n        g_string_array: number;\\n        g_node: number;\\n        g_node_array: number;\\n        g_function: number;\\n        g_meta_key: number;\\n        g_var_key: number;\\n        g_var_key_new: number;\\n        g_var_offset: number;\\n        g_offset: number;\\n        g_read_offset: number;\\n        g_src: number;\\n        g_result: number;\\n        g_declare_var: number;\\n        g_assign_var: number;\\n        g_free_var: number;\\n        g_master_index: number;\\n        g_load_master_index: number;\\n        g_load_global_index: number;\\n        g_new_global_index: number;\\n        g_configure_index: number;\\n        g_configure: number;\\n        g_add_to_index: number;\\n        g_query_index: number;\\n        g_it: number;\\n        g_it_offset: number;\\n        g_it_key: number;\\n        g_return: number;\\n        g_if_then_else: number;\\n        g_operator: number;\\n        g_then: number;\\n        g_else: number;\\n        g_all: number;\\n        g_name: number;\\n        g_result_temp: number;\\n        g_meta: number;\\n        g_session: number;\\n        g_sessions: number;\\n        g_node_generator: number;\\n        g_session_generator: number;\\n        g_id: number;\\n        g_ids: number;\\n        g_this: number;\\n        g_prop: number;\\n        g_key: number;\\n        g_keys: number;\\n        g_binary_op: number;\\n        g_new_node: number;\\n        g_new_object: number;\\n        g_new_object_at: number;\\n        g_object_type: number;\\n        g_repeat: number;\\n        g_init: number;\\n        g_sync: number;\\n        g_merge: number;\\n        g_print: number;\\n        g_print_append: number;\\n        g_print_all: number;\\n        g_get_all: number;\\n        g_set: number;\\n        g_value: number;\\n        g_value2: number;\\n        g_values: number;\\n        g_blob: number;\\n        g_blob_ext: number;\\n        g_any: number;\\n        g_any_node: number;\\n        g_page: number;\\n        g_pages: number;\\n        g_seq: number;\\n        g_offsets: number;\\n        g_function_key: number;\\n        g_from: number;\\n        g_node_type: number;\\n        g_foreach: number;\\n        g_new_timepoint: number;\\n        g_new_node_timepoint: number;\\n        g_time: number;\\n        g_load: number;\\n        g_load_all: number;\\n        g_index: number;\\n        g_query: number;\\n        g_lookup: number;\\n        g_lookup_all: number;\\n        g_default: number;\\n        g_reference: number;\\n        g_index_hash: number;\\n        g_index_hash_candidates: number;\\n        g_index_hash_values: number;\\n        g_resolved_values: number;\\n        g_index_result: number;\\n        g_global_index: number;\\n        g_add: number;\\n        g_to: number;\\n        g_ordinal: number;\\n        g_param: number;\\n        g_set_attribute: number;\\n        g_set_reference: number;\\n        g_set_at: number;\\n        g_read_property: number;\\n        g_execute_property: number;\\n        g_console: number;\\n        g_nb: number;\\n        g_sub: number;\\n        g_i: number;\\n        g_j: number;\\n        g_k: number;\\n        g_callee_origin: number;\\n        g_callee_session: number;\\n        g_new_session: number;\\n        g_noop: number;\\n        g_std: number;\\n        g_path: number;\\n        g_port: number;\\n        g_leveldb: number;\\n        g_rocksdb: number;\\n        g_websocket_server: number;\\n        g_websocket_client: number;\\n        g_url: number;\\n        g_openblas: number;\\n        g_cublas: number;\\n        g_eigen: number;\\n        g_hybridblas: number;\\n        g_mqtt: number;\\n        g_mqtt_topic: number;\\n        g_mqtt_topics_list: number;\\n        g_mqtt_custom_parser: number;\\n        g_opcua_server: number;\\n        g_opcua_client: number;\\n        g_opcua_node_identifier_list: number;\\n        g_node_identifier: number;\\n        g_gateway: number;\\n        g_remotes: number;\\n        g_subscriptions: number;\\n        g_cursor: number;\\n        g_max: number;\\n        g_grafana: number;\\n        g_use_wss: number;\\n        g_cert: number;\\n    };\\n    export default _default;\\n}\\n\\n\"","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 398;","import React from 'react';\nimport cx from 'classnames';\n\nimport './pane.css';\nimport PaneStore from '../../stores/PaneStore';\nimport { observer } from 'mobx-react';\n\nexport interface PaneProps {\n  title: React.ReactNode;\n  store: PaneStore;\n  /**\n   *  A list of Pane-specific actions\n   */\n  actions?: PaneActionProps[];\n  /**\n   * Secondary splitter pane; otherwise primary\n   */\n  secondary?: boolean;\n  /**\n   * Show minimize/maximize actions if true\n   */\n  resizeActions?: boolean;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport interface PaneTitleProps {\n  name?: string;\n  className?: string;\n  children?: React.ReactNode;\n}\n\nexport function PaneTitle({ name, className, children }: PaneTitleProps) {\n  return <h2 className={cx('title', className)}>{name || children}</h2>;\n}\n\nexport interface PaneActionProps {\n  onClick: (e: React.MouseEvent<HTMLElement>) => void;\n  className?: string;\n}\n\nexport function PaneAction({ onClick, className }: PaneActionProps) {\n  return <i className={cx('action', className)} onClick={onClick} />;\n}\n\n@observer\nexport default class Pane extends React.Component<PaneProps> {\n\n  constructor(props: PaneProps) {\n    super(props);\n\n    this.onMinimize = this.onMinimize.bind(this);\n    this.onMaximize = this.onMaximize.bind(this);\n  }\n\n  onMinimize() {\n    const { store, secondary = false } = this.props;\n    store.minimize(secondary);\n  }\n\n  onMaximize() {\n    const { store, secondary = false } = this.props;\n    store.maximize(secondary);\n  }\n\n  render() {\n    const { title, store, actions = [], resizeActions = false, className, children } = this.props;\n    const titleNode = typeof title === 'string' ? <PaneTitle name={title} /> : title;\n\n    return (\n      <div className={cx('studio-pane', className)}>\n        <div className=\"header\">\n          {titleNode}\n          <div className=\"actions\">\n            {actions.map((a, i) => <PaneAction key={i} {...a} />)}\n            {resizeActions && (\n              store.isMinimized ? (\n                <PaneAction className=\"fas fa-window-maximize\" onClick={this.onMaximize} />\n              ) : (\n                <PaneAction className=\"fas fa-window-minimize\" onClick={this.onMinimize} />\n              )\n            )}\n          </div>\n        </div>\n        {children}\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\n\nimport StudioStore from '../../stores/StudioStore';\nimport Pane from '../pane/Pane';\n\nimport './workspace-pane.css';\n\nexport interface WorkspacePaneProps {\n  store: StudioStore;\n}\n\n@observer\nexport default class WorkspacePane extends React.Component<WorkspacePaneProps> {\n\n  constructor(props: WorkspacePaneProps) {\n    super(props);\n\n    this.onConnect = this.onConnect.bind(this);\n  }\n\n  setString(name: 'hostname' | 'path') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { workspace } = this.props.store;\n      workspace[name] = e.target.value;\n    };\n  }\n\n  setNumber(name: 'port') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { workspace } = this.props.store;\n      workspace[name] = parseInt(e.target.value, 10);\n    };\n  }\n\n  setBoolean(name: 'secured') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      const { workspace } = this.props.store;\n      workspace[name] = e.target.checked;\n    };\n  }\n\n  onConnect(e: React.MouseEvent<HTMLButtonElement>) {\n    const { workspace } = this.props.store;\n    workspace.configure(this.props.store.graph);\n  }\n\n  render() {\n    const { store } = this.props;\n    const { hostname, port, path, secured } = store.workspace;\n\n    return (\n      <Pane className=\"workspace-pane\" title=\"Workspace\" store={store.workspace}>\n        <div className=\"websocket-form\">\n          <div className=\"input-group\">\n            <label htmlFor=\"hostname\">Hostname:</label>\n            <input name=\"hostname\" type=\"text\" value={hostname} onChange={this.setString('hostname')} />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"port\">Port:</label>\n            <input name=\"port\" type=\"number\" value={port} onChange={this.setNumber('port')} />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"path\">Path:</label>\n            <input name=\"path\" type=\"text\" value={path} onChange={this.setString('path')} />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"secured\">Secured:</label>\n            <input name=\"secured\" type=\"checkbox\" checked={secured} onChange={this.setBoolean('secured')} />\n          </div>\n          <button onClick={this.onConnect}>Connect</button>\n        </div>\n      </Pane>\n    );\n  }\n}","import React from 'react';\nimport { Icon } from '@mdi/react';\nimport { mdiLanguageTypescript, mdiFileQuestion } from '@mdi/js';\nimport greycatLogo from '../../assets/images/greycat-head.svg';\n\nexport type Language = 'typescript' | 'greycat' | string;\n\nexport default ({ language, className }: { language: Language, className?: string }) => {\n  switch (language) {\n    case 'typescript':\n      return <Icon className={className} path={mdiLanguageTypescript} color=\"#0070bc\" />;\n    case 'greycat':\n      return <img src={greycatLogo} className={className} />;\n    default:\n      return <Icon className={className} path={mdiFileQuestion} />;\n  }\n};","import { observable, action } from 'mobx';\n\nexport default abstract class PaneStore {\n  @observable private _defaultSize: number | string;\n  @observable private _paneSize: number | string;\n  @observable private _isMinimized: boolean = false;\n\n  /**\n   * Do not initialize vertical PaneStore with a 0 size\n   * otherwise the minimize/maximize process will be wrong\n   */\n  constructor(defaultSize: number | string) {\n    this._defaultSize = defaultSize;\n    this._paneSize = defaultSize;\n  }\n\n  @action\n  minimize(isSecondary: boolean) {\n    if (isSecondary) {\n      this._paneSize = '100%';\n    } else {\n      this._paneSize = 0;\n    }\n    this._isMinimized = true;\n  }\n\n  @action\n  maximize(_isSecondary: boolean) {\n    this._paneSize = this._defaultSize;\n    this._isMinimized = false;\n  }\n\n  get paneSize(): number | string {\n    return this._paneSize;\n  }\n\n  set paneSize(width: number | string) {\n    this._paneSize = width;\n    this._isMinimized = false;\n  }\n\n  get isMinimized(): boolean {\n    return this._isMinimized;\n  }\n\n  get defaultSize(): number | string {\n    return this._defaultSize;\n  }\n}","import { observable, action } from 'mobx';\nimport * as monaco from 'monaco-editor';\nimport PaneStore from './PaneStore';\n\nexport interface File {\n  uri: string;\n  language: string;\n  content: string;\n  isOpen: boolean;\n  isSelected?: boolean;\n  state?: monaco.editor.ICodeEditorViewState;\n}\n\nexport default class EditorStore extends PaneStore {\n  static MAIN: string = 'main.gcl';\n  static EXTENSIONS: string = 'extensions.ts';\n\n  @observable private _files: Map<string, File> = new Map();\n\n  constructor() {\n    super('60%');\n\n    this._files.set(EditorStore.MAIN, {\n      uri: EditorStore.MAIN,\n      language: 'greycat',\n      content: 'var hello = \"Hello World!\";\\n\\nsayHi();',\n      isOpen: true,\n      isSelected: true,\n    });\n    this._files.set(EditorStore.EXTENSIONS, {\n      uri: EditorStore.EXTENSIONS,\n      language: 'typescript',\n      content: \"export function sayHi(ctx: g.Context) {\\n  console.log(ctx.get('hello'));\\n}\",\n      isOpen: true,\n    });\n  }\n\n  @action\n  select(uri: string) {\n    this._files.forEach((f) => {\n      if (f.uri !== uri) {\n        f.isSelected = false;\n      } else {\n        f.isSelected = true;\n      }\n    });\n  }\n\n  @action\n  open(uri: string) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.isOpen = true;\n      this.select(uri);\n    }\n  }\n\n  @action\n  close(uri: string) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.isOpen = false;\n      file.isSelected = false;\n    }\n  }\n\n  @action\n  setState(uri: string, state: monaco.editor.ICodeEditorViewState) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.state = state;\n    }\n  }\n\n  @action\n  setContent(uri: string, content: string) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.content = content;\n    }\n  }\n\n  get files(): Map<string, File> {\n    return this._files;\n  }\n\n  get selected(): File | undefined {\n    return [...this._files.values()].find((f) => Boolean(f.isSelected));\n  }\n\n  get opened(): File[] {\n    return [...this._files.values()].filter(({ isOpen }) => Boolean(isOpen));\n  }\n}","import React from 'react';\nimport { autorun, IReactionDisposer } from 'mobx';\nimport * as monaco from 'monaco-editor';\nimport cx from 'classnames';\nimport MonacoEditor from 'react-monaco-editor';\nimport { observer } from 'mobx-react';\n\nimport LanguageIcon from '../icons/LanguageIcon';\nimport EditorStore from '../../stores/EditorStore';\nimport StudioStore from '../../stores/StudioStore';\nimport Pane from '../pane/Pane';\n\nimport './editor-pane.css';\n\nexport interface EditorPaneProps {\n  store: StudioStore;\n  editorDidMount: (e: monaco.editor.IStandaloneCodeEditor) => void;\n}\n\n@observer\nexport default class EditorPane extends React.Component<EditorPaneProps> {\n  private _editor: monaco.editor.IStandaloneCodeEditor | null = null;\n  private _updateModelDisposer: IReactionDisposer | null = null;\n  private _interpretTimeout: NodeJS.Timeout | null = null;\n\n  constructor(props: EditorPaneProps) {\n    super(props);\n    this.onEditorDidMount = this.onEditorDidMount.bind(this);\n    this.onEditorChange = this.onEditorChange.bind(this);\n    this.onTabClicked = this.onTabClicked.bind(this);\n    this.onTabCloseClicked = this.onTabCloseClicked.bind(this);\n  }\n\n  componentWillMount() {\n    const { editor } = this.props.store;\n    editor.files.forEach((file, uri) => {\n      monaco.editor.createModel(file.content, file.language, monaco.Uri.parse(uri));\n    });\n  }\n\n  onEditorDidMount(e: monaco.editor.IStandaloneCodeEditor) {\n    this._editor = e;\n    this.props.editorDidMount(e);\n    this._updateModelDisposer = autorun(() => {\n      // automatically run when we change model\n      const { selected } = this.props.store.editor;\n      // set new model in editor\n      e.setModel(selected ? monaco.editor.getModel(monaco.Uri.parse(selected.uri)) : null);\n      if (selected && selected.state) {\n        // restore state if any\n        e.restoreViewState(selected.state);\n      }\n    });\n\n    this._editor.addAction({\n      id: 'execute-greycat-main',\n      label: 'Execute main.gcl',\n      keybindings: [\n        monaco.KeyMod.Shift | monaco.KeyCode.Enter,\n      ],\n      contextMenuGroupId: 'navigation',\n      contextMenuOrder: 0,\n      run: () => {\n        this.props.store.execute();\n      },\n    });\n  }\n\n  onEditorChange(newValue: string) {\n    if (this._editor) {\n      const model = this._editor.getModel();\n      const { store } = this.props;\n      store.editor.setContent(model.uri.path, newValue);\n\n      if (model.uri.path === EditorStore.EXTENSIONS) {\n        if (this._interpretTimeout) {\n          clearTimeout(this._interpretTimeout);\n        }\n        this._interpretTimeout = setTimeout(() => {\n          store.interpretExtensions();\n        }, 500);\n      }\n    }\n  }\n\n  onTabClicked(uri: string) {\n    return () => this.props.store.editor.select(uri);\n  }\n\n  onTabCloseClicked(uri: string) {\n    return (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.props.store.editor.close(uri);\n    };\n  }\n\n  componentWillUnmount() {\n    if (this._updateModelDisposer) {\n      this._updateModelDisposer();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { opened, selected } = store.editor;\n    const model = selected ? monaco.editor.getModel(monaco.Uri.parse(selected.uri)) : null;\n\n    return (\n      <Pane className=\"editor-pane\" title=\"Editor\" store={store.editor}>\n        <div className=\"editor-header\">\n          <div className=\"file-tabs\">\n            {opened.map(({ uri, isSelected, language }) => (\n              <div className={cx('tab', { selected: isSelected })} key={uri} onClick={this.onTabClicked(uri)}>\n                <div className=\"flex\">\n                  <LanguageIcon className=\"language-icon\" language={language} />\n                  <span className=\"name\">{uri}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"editor-actions\" />\n        </div>\n        <div className=\"monaco-container\">\n          <MonacoEditor\n            theme=\"vs-dark\"\n            height=\"100%\"\n            options={{\n              model,\n              folding: true,\n              extraEditorClassName: 'monaco-greycat',\n              scrollBeyondLastLine: false,\n              minimap: {\n                enabled: false,\n              },\n              renderWhitespace: 'boundary',\n              autoIndent: true,\n            }}\n            editorDidMount={this.onEditorDidMount}\n            onChange={this.onEditorChange}\n          />\n        </div>\n        {model === null && (\n          <div className=\"no-model\">\n            <h2 className=\"muted\">Select a file to open in the left panel</h2>\n          </div>\n        )}\n      </Pane>\n    );\n  }\n}\n","import React from 'react';\nimport ReactTable, { Column } from 'react-table';\nimport 'react-table/react-table.css';\n\nimport './table.css';\n\nexport interface ResultProps {\n  data: any;\n}\n\nexport default class Table extends React.Component<ResultProps> {\n\n  render() {\n    const { columns, rows } = convertData(this.props.data);\n\n    return (\n      <ReactTable\n        data={rows}\n        columns={columns}\n        showPagination={false}\n        pageSize={rows.length}\n        defaultPageSize={rows.length}\n        className=\"-striped -highlight\"\n      />\n    );\n  }\n}\n\nfunction convertData(data: object): { columns: Column[]; rows: any[] } {\n  const colMap: { [k: string]: string } = {\n    name: 'Name',\n    type: 'Type',\n    value: 'Value',\n  };\n  const rows = Object.keys(data).map((k: string) => {\n    const o = data[k];\n    if (o instanceof Array || !(o instanceof Object)) {\n      const type: string = o instanceof Array ? 'array' : typeof o;\n      return { name: k, value: JSON.stringify(o), type };\n    } else if (o instanceof Object) {\n      const values = Object.keys(o).reduce((obj, oKey) => {\n        if (!colMap[oKey]) {\n          colMap[oKey] = oKey.substr(0, 1).toUpperCase() + oKey.substr(1, oKey.length - 1);\n        }\n        obj[oKey] = JSON.stringify(o[oKey]);\n        return obj;\n      }, {});\n      return { name: k, ...values };\n    }\n    return data;\n  });\n\n  return {\n    columns: [\n      {\n        headerStyle: { display: 'none' },\n        columns: Object.keys(colMap).reduce((cols, k) => {\n          const col: any = {\n            Header: colMap[k],\n            accessor: k,\n          };\n          if (col.accessor === 'name') {\n            col.maxWidth = 140;\n          }\n          if (col.accessor === 'type') {\n            col.maxWidth = 100;\n          }\n          return [ ...cols, col ];\n        }, []),\n      },\n    ],\n    rows,\n  };\n}\n","import React from 'react';\nimport JsonInspector from 'react-json-inspector';\nimport 'react-json-inspector/json-inspector.css';\n\nimport './json-tree.css';\n\nexport interface JsonTreeProps {\n  data: any;\n  onChange?: (keypath: string, newValue: any) => void;\n}\n\nexport default class JsonTree extends React.Component<JsonTreeProps> {\n\n  onChange(keypath: string) {\n    return (newValue: string) => {\n      // tslint:disable-next-line:no-console\n      console.log('onChange', keypath, newValue);\n      if (this.props.onChange) {\n        this.props.onChange(keypath, newValue);\n      }\n    };\n  }\n\n  render() {\n    return (\n      <JsonInspector data={this.props.data} />\n    );\n  }\n}","import React from 'react';\nimport { observer } from 'mobx-react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport StudioStore from '../../stores/StudioStore';\nimport Table from '../table/Table';\nimport JsonTree from '../json-tree/JsonTree';\nimport Pane from '../pane/Pane';\nimport './context-pane.css';\n\nexport interface ContextPaneProps {\n  store: StudioStore;\n}\n\n/*\nvar hello = \"Hello World!\";\nvar a = true;\nvar b = 42;\nvar c = new { foo: 'bar', baz: 'beep' }\nvar d = 100.0\nvar e = `The answer: ${b}`\n*/\n\n@observer\nexport default class ContextPane extends React.Component<ContextPaneProps> {\n\n  constructor(props: ContextPaneProps) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(keypath: string, newValue: any) {\n    console.log('=== ON CHANGE ===');\n    console.log(' - keypath:', keypath);\n    console.log(' - newValue:', newValue);\n  }\n\n  render() {\n    const { data, globalTypes, globalFunctions, editor } = this.props.store;\n\n    return (\n      <Pane className=\"context-pane\" title=\"Graph State\" store={editor} secondary>\n        <Tabs>\n          <TabList>\n            <Tab>Context Table</Tab>\n            <Tab>Context JSON</Tab>\n            <Tab>Global Types</Tab>\n            <Tab>Global Functions</Tab>\n          </TabList>\n\n          <TabPanel>\n            <Table data={data} />\n          </TabPanel>\n          <TabPanel>\n            <JsonTree data={data} onChange={this.onChange} />\n          </TabPanel>\n          <TabPanel>\n            <JsonTree data={globalTypes} />\n          </TabPanel>\n          <TabPanel>\n            <JsonTree data={globalFunctions} />\n          </TabPanel>\n        </Tabs>\n      </Pane>\n    );\n  }\n}","import React from 'react';\nimport cx from 'classnames';\nimport padStart from 'lodash.padstart';\nimport { observer } from 'mobx-react';\n\nimport ConsoleStore from '../../stores/ConsoleStore';\nimport Pane, { PaneTitle } from '../pane/Pane';\nimport './console-pane.css';\n\nexport interface ConsolePaneProps {\n  store: ConsoleStore;\n}\n\n@observer\nexport default class ConsolePane extends React.Component<ConsolePaneProps> {\n\n  private _logsBottomEl: HTMLDivElement | null = null;\n\n  constructor(props: ConsolePaneProps) {\n    super(props);\n\n    this.onClear = this.onClear.bind(this);\n  }\n\n  onClear() {\n    this.props.store.clear();\n  }\n\n  componentDidMount() {\n    this._scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this._scrollToBottom();\n  }\n\n  render() {\n    const { store } = this.props;\n    return (\n      <Pane\n        className=\"console-pane\"\n        title={(\n          <PaneTitle>\n            <span className=\"name\">Console</span>\n            <span className=\"muted\">({store.logs.length})</span>\n          </PaneTitle>\n        )}\n        actions={[\n          { onClick: this.onClear, className: 'far fa-trash-alt' },\n        ]}\n        store={store}\n        secondary\n      >\n        <div className=\"logs-container\">\n          <ul className=\"logs-list\">\n            {store.logs.map((l, i) => (\n              <li className={cx('log', l.level)} key={i}>\n                <pre className=\"time\">[{this._formatTime(l.time)}]</pre>\n                <pre className=\"message\">{l.message}</pre>\n              </li>\n            ))}\n            <div className=\"logs-list-bottom-marker\" ref={(el) => this._logsBottomEl = el} />\n          </ul>\n        </div>\n      </Pane>\n    );\n  }\n\n  _scrollToBottom() {\n    if (this._logsBottomEl) {\n      this._logsBottomEl.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  _formatTime(t: number): string {\n    const d = new Date(t);\n    return (\n      padStart(d.getHours() + '', 2, '0') + ':' +\n      padStart(d.getMinutes() + '', 2, '0') + ':' +\n      padStart(d.getSeconds() + '', 2, '0') + ':' +\n      padStart(d.getMilliseconds() + '', 3, '0')\n    );\n  }\n}\n","import React from 'react';\nimport { observer } from 'mobx-react';\nimport * as monaco from 'monaco-editor';\nimport { Icon } from '@mdi/react';\nimport { mdiPlay } from '@mdi/js';\n\nimport Splitter from '@leiko/m-react-splitters';\nimport '@leiko/m-react-splitters/lib/splitters.css';\n\nimport { version } from '../package.json';\nimport StudioStore from './stores/StudioStore';\nimport PaneStore from './stores/PaneStore';\nimport greycatLogo from './assets/images/greycat-head.svg';\n\nimport WorkspacePane from './components/workspace-pane/WorkspacePane';\nimport EditorPane from './components/editor-pane/EditorPane';\nimport ContextPane from './components/context-pane/ContextPane';\nimport ConsolePane from './components/console-pane/ConsolePane';\n\n// tslint:disable-next-line:no-var-requires\nconst gcDeclaration = require('raw-loader!@greycat/core/dist/typings/greycat-core.d.ts');\nmonaco.languages.typescript.typescriptDefaults.addExtraLib(gcDeclaration, 'greycat-core.d.ts');\nmonaco.languages.typescript.typescriptDefaults.addExtraLib(`import * as g from '@greycat/core';\nexport = g;\nexport as namespace g;`, 'greycat-studio.d.ts');\n\nimport 'open-iconic/font/css/open-iconic-bootstrap.min.css';\nimport './index.css';\n\nimport './studio.css';\n\nexport interface StudioProps {\n  store: StudioStore;\n}\n\n@observer\nexport default class Studio extends React.Component<StudioProps> {\n\n  private _editor: monaco.editor.IStandaloneCodeEditor | null = null;\n\n  constructor(props: StudioProps) {\n    super(props);\n    this.onEditorSplitterDragFinished = this.onEditorSplitterDragFinished.bind(this);\n    this.onEditorDidMount = this.onEditorDidMount.bind(this);\n    this.onExecute = this.onExecute.bind(this);\n  }\n\n  onEditorSplitterDragFinished(store: PaneStore) {\n    return (primaryPaneWidth: number) => {\n      store.paneSize = primaryPaneWidth;\n      if (this._editor) {\n        this._editor.layout();\n      }\n    };\n  }\n\n  onEditorDidMount(e: monaco.editor.IStandaloneCodeEditor) {\n    this._editor = e;\n  }\n\n  onExecute() {\n    this.props.store.execute();\n  }\n\n  render() {\n    const { workspace, editor, console } = this.props.store;\n\n    return (\n      <div className=\"studio\">\n        <div className=\"studio-header\">\n          <div className=\"header\">\n            <img className=\"header-logo\" src={greycatLogo} />\n            <div className=\"header-title\">\n              <h1>GreyCat Studio</h1>\n              <span className=\"muted\" style={{ fontFamily: 'monospace' }}>v{version}</span>\n            </div>\n          </div>\n          <div className=\"header-actions\">\n            <span className=\"action\" onClick={this.onExecute}>\n              <Icon path={mdiPlay} color=\"#89d185\" />\n            </span>\n          </div>\n        </div>\n        <div className=\"studio-body\">\n          <Splitter\n            className=\"main-splitter\"\n            position=\"vertical\"\n            primaryPaneWidth={workspace.paneSize}\n            primaryPaneMaxHeight=\"100%\"\n            primaryPaneMaxWidth=\"calc(100% - 8px)\"\n            primaryPaneMinHeight={0}\n            primaryPaneMinWidth={0}\n            onDragFinished={this.onEditorSplitterDragFinished(workspace)}\n          >\n            <WorkspacePane store={this.props.store} />\n            <Splitter\n              position=\"horizontal\"\n              primaryPaneHeight={console.paneSize}\n              primaryPaneMaxHeight=\"calc(100% - 38px)\"\n              primaryPaneMaxWidth=\"100%\"\n              primaryPaneMinHeight={0}\n              primaryPaneMinWidth={0}\n              onDragFinished={this.onEditorSplitterDragFinished(console)}\n            >\n              <Splitter\n                position=\"vertical\"\n                primaryPaneClassName=\"editor-pane-container\"\n                primaryPaneWidth={editor.paneSize}\n                primaryPaneMaxHeight=\"100%\"\n                primaryPaneMaxWidth=\"calc(100% - 8px)\"\n                primaryPaneMinHeight={0}\n                primaryPaneMinWidth={0}\n                onDragFinished={this.onEditorSplitterDragFinished(editor)}\n              >\n                <EditorPane store={this.props.store} editorDidMount={this.onEditorDidMount} />\n                <ContextPane store={this.props.store} />\n              </Splitter>\n              <ConsolePane store={console} />\n            </Splitter>\n          </Splitter>\n        </div>\n      </div>\n    );\n  }\n}\n","var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar Emitter = monaco.Emitter;\n// --- GreyCat configuration and defaults ---------\nvar DEFAULT_SETTINGS = {\n    lint: true,\n    lintOptions: {\n        strict: true,\n    },\n};\nvar LanguageServiceDefaultsImpl = /** @class */ (function () {\n    function LanguageServiceDefaultsImpl(languageId, settings) {\n        this._onDidChange = new Emitter();\n        this._gcTypes = [];\n        this._gcFunctions = [];\n        this._languageId = languageId;\n        this.setSettings(settings);\n    }\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\n        get: function () {\n            return this._onDidChange.event;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageId\", {\n        get: function () {\n            return this._languageId;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"settings\", {\n        get: function () {\n            return this._settings;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"gcTypes\", {\n        get: function () {\n            return this._gcTypes;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"gcFunctions\", {\n        get: function () {\n            return this._gcFunctions;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    LanguageServiceDefaultsImpl.prototype.setSettings = function (options) {\n        this._settings = __assign({}, DEFAULT_SETTINGS, options);\n        this._onDidChange.fire(this);\n    };\n    LanguageServiceDefaultsImpl.prototype.addTypes = function (types) {\n        var _this = this;\n        var _a;\n        (_a = this._gcTypes).push.apply(_a, types);\n        this._onDidChange.fire(this);\n        return {\n            dispose: function () {\n                _this._gcTypes.length = 0;\n                _this._onDidChange.fire(_this);\n            },\n        };\n    };\n    LanguageServiceDefaultsImpl.prototype.addFunctions = function (functions) {\n        var _this = this;\n        var _a;\n        (_a = this._gcFunctions).push.apply(_a, functions);\n        this._onDidChange.fire(this);\n        return {\n            dispose: function () {\n                _this._gcFunctions.length = 0;\n                _this._onDidChange.fire(_this);\n            },\n        };\n    };\n    return LanguageServiceDefaultsImpl;\n}());\nexport { LanguageServiceDefaultsImpl };\nvar defaults = new LanguageServiceDefaultsImpl('greycat', DEFAULT_SETTINGS);\n// Export API\nfunction createAPI() {\n    return defaults;\n}\nexport default (monaco.languages.greycat = createAPI());\n// --- Registration to monaco editor ---\nfunction getMode() {\n    return monaco.Promise.wrap(import('./gcMode'));\n}\nmonaco.languages.register({ id: 'greycat', extensions: ['gcl'] });\nmonaco.languages.onLanguage('greycat', function () {\n    return getMode().then(function (m) { return m.setupMode(defaults); });\n});\n//# sourceMappingURL=monaco.contribution.js.map","import { observable, action } from 'mobx';\nimport { GreyCat } from '@greycat/core';\nimport PaneStore from './PaneStore';\n\nexport interface Log {\n  time: number;\n  level: 'log' | 'info' | 'warn' | 'error' | 'debug';\n  message: string;\n}\n\nexport default class ConsoleStore extends PaneStore {\n  @observable private _logs: Log[]  = [];\n\n  constructor() {\n    super('75%');\n    (GreyCat.Logger as any) = this;\n  }\n\n  log(message: any) {\n    console.log('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'log', message });\n  }\n\n  info(message: any) {\n    console.info('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'info', message });\n  }\n\n  debug(message: any) {\n    console.debug('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'debug', message });\n  }\n\n  warn(message: any) {\n    console.warn('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'warn', message });\n  }\n\n  error(message: any) {\n    console.error('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'error', message });\n  }\n\n  @action\n  clear() {\n    this._logs.length = 0;\n  }\n\n  @action\n  private _push(log: Log) {\n    // logs array is limited to 1000 items\n    if (this._logs.length >= 1000) {\n      this._logs.splice(0, (this._logs.length - 1000) + 1);\n    }\n    this._logs.push(log);\n  }\n\n  get logs() {\n    return this._logs;\n  }\n}","import { observable, action, computed } from 'mobx';\nimport { Graph, Keys, Params } from '@greycat/core';\nimport PaneStore from './PaneStore';\n\nexport default class WorkspaceStore extends PaneStore {\n\n  @observable\n  private _hostname: string = 'localhost';\n  @observable\n  private _port: number = 8066;\n  @observable\n  private _path: string = '/';\n  @observable\n  private _secured: boolean = false;\n\n  constructor() {\n    super('15%');\n  }\n\n  @action\n  configure(graph: Graph) {\n    try {\n      const url = new URL(this.url);\n      console.log('=> Trying to connect to:', url.toString());\n      graph.configurePlugin(\n        Keys.g_websocket_client,\n        new Params(4)\n          // FIXME add \"secured\" boolean when implemented\n          .addString(Keys.g_url, url.hostname)\n          .addInt(Keys.g_port, parseInt(url.port, 10))\n          .addInt(Keys.g_use_wss, url.protocol === 'ws:' ? 0 : 1)\n          .addString(Keys.g_path, url.pathname),\n      );\n    } catch (err) {\n      // TODO handle err on invalid uri\n    }\n  }\n\n  @computed\n  get url() {\n    if (this._secured) {\n      return `wss://${this._hostname}:${this._port}${this._path}`;\n    } else {\n      return `ws://${this._hostname}:${this._port}${this._path}`;\n    }\n  }\n\n  get hostname(): string {\n    return this._hostname;\n  }\n\n  set hostname(value: string) {\n    this._hostname = value;\n  }\n\n  get port(): number {\n    return this._port;\n  }\n\n  set port(value: number) {\n    this._port = value;\n  }\n\n  get path(): string {\n    return this._path;\n  }\n\n  set path(value: string) {\n    this._path = value;\n  }\n\n  get secured(): boolean {\n    return this._secured;\n  }\n\n  set secured(value: boolean) {\n    this._secured = value;\n  }\n}\n","import { observable, action, autorun } from 'mobx';\nimport { Graph, GreyCat } from '@greycat/core';\nimport gcLangService from '@greycat/lang-monaco';\nimport * as ts from 'typescript';\n\nimport EditorStore from './EditorStore';\nimport ConsoleStore from './ConsoleStore';\nimport WorkspaceStore from './WorkspaceStore';\n\nconst TS_OPTS: ts.TranspileOptions = {\n  compilerOptions: {\n    target: ts.ScriptTarget.ES2015,\n    module: ts.ModuleKind.CommonJS,\n    removeComments: true,\n  },\n};\n\nexport default class StudioStore {\n  @observable private _editor = new EditorStore();\n  @observable private _console = new ConsoleStore();\n  @observable private _workspace = new WorkspaceStore();\n  @observable private _graph: Graph = GreyCat.newGraph();\n  @observable private _data: any = {};\n  @observable private _globalTypes: object = {};\n  @observable private _globalFunctions: object = {};\n\n  constructor() {\n    autorun(() => {\n      // automatically register types & functions on @greycat/lang-monaco when they change\n      gcLangService.addTypes(Object.values(this._globalTypes));\n      gcLangService.addFunctions(Object.values(this._globalFunctions));\n    });\n  }\n\n  @action\n  execute() {\n    return new Promise((resolve) => {\n      const main = this._editor.files.get(EditorStore.MAIN)!;\n      this._console.debug(`Executing: ${main.uri}`);\n\n      const context = this._graph.newContext();\n      context.onEnd((ctx) => resolve(ctx.toObject()));\n      context.execute(this._graph.newFunction().parse(main.content));\n    }).then((data) => {\n      this._console.debug('Done.');\n      this._data = data;\n      this.updateGlobalTypes();\n      this.updateGlobalFunctions();\n    }, (err) => {\n      this._console.error(err.stack);\n    });\n  }\n\n  @action\n  interpretExtensions() {\n    try {\n      const file = this._editor.files.get(EditorStore.EXTENSIONS)!;\n      const { outputText } = ts.transpileModule(file.content, TS_OPTS);\n      const extensionsLoader = new Function('exports', outputText);\n      const extensions = {};\n      extensionsLoader(extensions);\n      Object.keys(extensions).forEach((name) => {\n        if (typeof extensions[name] === 'function') {\n          this._graph.declareFunction(name, extensions[name]);\n        }\n      });\n      this.updateGlobalTypes();\n      this.updateGlobalFunctions();\n    } catch (err) {\n      this._console.error(`[Extensions Error] ${err.message}`);\n    }\n  }\n\n  @action\n  private updateGlobalTypes() {\n    this._globalTypes = JSON.parse(this._graph.exportTypes()).reduce((o: any, t: any) => {\n      o[t.type] = t;\n      return o;\n    }, {});\n  }\n\n  @action\n  private updateGlobalFunctions() {\n    this._globalFunctions = JSON.parse(this._graph.exportFunctions()).reduce((o: any, t: any) => {\n      o[t.name] = t;\n      return o;\n    }, {});\n  }\n\n  get editor(): EditorStore {\n    return this._editor;\n  }\n\n  get console(): ConsoleStore {\n    return this._console;\n  }\n\n  get workspace(): WorkspaceStore {\n    return this._workspace;\n  }\n\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get globalTypes() {\n    return this._globalTypes;\n  }\n\n  get globalFunctions() {\n    return this._globalFunctions;\n  }\n}\n","import './monaco-editor-hack';\nimport React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { GreyCat } from '@greycat/core';\n\nimport Studio from './Studio';\nimport StudioStore from './stores/StudioStore';\n\nconst root = document.getElementById('root')!;\nconst errorTimeout = setTimeout(() => {\n  root.innerHTML = '<p class=\"alert alert-danger\">Something went wrong while initializing GreyCat Studio. Sorry :/</p>';\n}, 10000);\n\nGreyCat.onReady(() => {\n  clearTimeout(errorTimeout);\n\n  // initialize stores\n  const store = new StudioStore();\n  // automatically interpret extensions at start-up\n  store.interpretExtensions();\n\n  // render app\n  ReactDOM.render(<Studio store={store} />, root);\n});\n","export default {\n    g_bool: 3029738,\n    g_true: 3569038,\n    g_false: 97196323,\n    g_int: 104431,\n    g_long: 3327612,\n    g_ulong: 111379569,\n    g_double: -1325958191,\n    g_string: -891985903,\n    g_template: -1321546630,\n    g_null: 3392903,\n    g_matrix: -1081239615,\n    g_number: -1034364087,\n    g_double_array: 1372483691,\n    g_int_array: 315522569,\n    g_long_array: -340537642,\n    g_ulong_array: -130449141,\n    g_ref_array: -1112239187,\n    g_string_array: 406856875,\n    g_node: 3386882,\n    g_node_array: 1538161116,\n    g_function: 1380938712,\n    g_meta_key: -450143963,\n    g_var_key: 236497223,\n    g_var_key_new: -1817082200,\n    g_var_offset: 1857392811,\n    g_offset: -1019779949,\n    g_read_offset: -715377828,\n    g_src: 114148,\n    g_result: -934426595,\n    g_declare_var: -2025425198,\n    g_assign_var: 1025861591,\n    g_free_var: -1538001196,\n    g_master_index: -809507659,\n    g_load_master_index: 1863200622,\n    g_load_global_index: -1948757009,\n    g_new_global_index: -847221387,\n    g_configure_index: 602712633,\n    g_configure: -804429082,\n    g_add_to_index: 799961068,\n    g_query_index: -927797605,\n    g_it: 3371,\n    g_it_offset: 1187069479,\n    g_it_key: -1178841781,\n    g_return: -934396624,\n    g_if_then_else: 615401849,\n    g_operator: -500553564,\n    g_then: 3558941,\n    g_else: 3116345,\n    g_all: 96673,\n    g_name: 3373707,\n    g_result_temp: -537084234,\n    g_meta: 3347973,\n    g_session: 1984987798,\n    g_sessions: 1405079709,\n    g_node_generator: -266917674,\n    g_session_generator: -344828822,\n    g_id: 3355,\n    g_ids: 104120,\n    g_this: 3559070,\n    g_prop: 3449699,\n    g_key: 106079,\n    g_keys: 3288564,\n    g_binary_op: -998221089,\n    g_new_node: 1377157441,\n    g_new_object: 615178942,\n    g_new_object_at: 170503508,\n    g_object_type: -1277176774,\n    g_repeat: -934531685,\n    g_init: 3237136,\n    g_sync: 3545755,\n    g_merge: 103785528,\n    g_print: 106934957,\n    g_print_append: -227267348,\n    g_print_all: -1796653809,\n    g_get_all: -74801864,\n    g_set: 113762,\n    g_value: 111972721,\n    g_value2: -823812895,\n    g_values: -823812830,\n    g_blob: 3026845,\n    g_blob_ext: -665857409,\n    g_any: 96748,\n    g_any_node: -349683595,\n    g_page: 3433103,\n    g_pages: 106426308,\n    g_seq: 113759,\n    g_offsets: -1548407232,\n    g_function_key: -210856584,\n    g_from: 3151786,\n    g_node_type: 465832791,\n    g_foreach: -677682614,\n    g_new_timepoint: 1712314116,\n    g_new_node_timepoint: 1594333541,\n    g_time: 3560141,\n    g_load: 3327206,\n    g_load_all: 1845922504,\n    g_index: 100346066,\n    g_query: 107944136,\n    g_lookup: -1097094790,\n    g_lookup_all: 1300432220,\n    g_default: 1544803905,\n    g_reference: -925155509,\n    g_index_hash: 746783835,\n    g_index_hash_candidates: 1662498228,\n    g_index_hash_values: 741411206,\n    g_resolved_values: -2001143991,\n    g_index_result: 689728554,\n    g_global_index: -326497994,\n    g_add: 96417,\n    g_to: 3707,\n    g_ordinal: -1206994319,\n    g_param: 106436749,\n    g_set_attribute: 1302056703,\n    g_set_reference: 363815854,\n    g_set_at: -905789136,\n    g_read_property: -520479138,\n    g_execute_property: -1651463329,\n    g_console: 951510359,\n    g_nb: 3508,\n    g_sub: 114240,\n    g_i: 105,\n    g_j: 106,\n    g_k: 107,\n    g_callee_origin: -426083577,\n    g_callee_session: -1431227691,\n    g_new_session: 1240347383,\n    g_noop: 3387234,\n    g_std: 114211,\n    g_path: 3433509,\n    g_port: 3446913,\n    g_leveldb: 69785346,\n    g_rocksdb: 1368770220,\n    g_websocket_server: -339307845,\n    g_websocket_client: -791193789,\n    g_url: 116079,\n    g_openblas: -504225978,\n    g_cublas: -1349602962,\n    g_eigen: 96505900,\n    g_hybridblas: 1573138936,\n    g_mqtt: 3359524,\n    g_mqtt_topic: 680036436,\n    g_mqtt_topics_list: 389591614,\n    g_mqtt_custom_parser: 1265754834,\n    g_opcua_server: 2105970676,\n    g_opcua_client: 1654084732,\n    g_opcua_node_identifier_list: 661706024,\n    g_node_identifier: -1608655098,\n    g_gateway: -189118908,\n    g_remotes: 1091834093,\n    g_subscriptions: 1987365622,\n    g_cursor: -1349119146,\n    g_max: 107876,\n    g_grafana: 280038788,\n    g_use_wss: -147675553,\n    g_cert: 3050020,\n};\n//# sourceMappingURL=keys.js.map","module.exports = __webpack_public_path__ + \"static/media/greycat-head.1c3ecd4c.svg\";"],"sourceRoot":""}