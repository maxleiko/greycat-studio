{"version":3,"sources":["../../greycat-core-wasm/src/esm.js","../../greycat-core-wasm/src/__gen/greycat.js","../../greycat-core-wasm/greycat.wasm","monaco-editor-hack.ts","../../greycat-core/dist/esm/greycat.js","../../greycat-core/dist/typings/greycat-core.d.ts","../../../node_modules/typescript/lib sync","components/workspace-pane/WorkspacePane.tsx","components/icons/LanguageIcon.tsx","stores/EditorStore.ts","components/editor-pane/EditorPane.tsx","components/table/Table.tsx","components/json-tree/JsonTree.tsx","components/context-pane/ContextPane.tsx","components/console-pane/ConsolePane.tsx","Studio.tsx","../../greycat-lang-monaco/dist/esm/monaco.contribution.js","stores/ConsoleStore.ts","stores/WorkspaceStore.ts","stores/StudioStore.ts","index.tsx","../../greycat-core/dist/esm/__gen/keys.js","assets/images/greycat-head.svg"],"names":["_gen_greycat__WEBPACK_IMPORTED_MODULE_0__","__webpack_require__","_greycat_wasm__WEBPACK_IMPORTED_MODULE_1__","_greycat_wasm__WEBPACK_IMPORTED_MODULE_1___default","n","__webpack_exports__","Object","locateFile","path","substr","length","a","process","__dirname","setImmediate","Module","_scriptDir","document","currentScript","src","undefined","key","moduleOverrides","hasOwnProperty","status","toThrow","ENVIRONMENT_IS_NODE","ENVIRONMENT_IS_SHELL","ENVIRONMENT_IS_WEB","ENVIRONMENT_IS_WORKER","window","importScripts","Error","assert","nodeFS","nodePath","scriptDirectory","filename","binary","ret","toString","buffer","Uint8Array","replace","slice","ex","ExitStatus","abort","read","f","data","readbuffer","scriptArgs","arguments","quit","self","location","href","indexOf","lastIndexOf","url","xhr","XMLHttpRequest","open","send","responseText","responseType","response","onload","onerror","title","out","console","log","bind","print","err","printErr","warn","STACK_ALIGN","staticAlloc","size","staticSealed","STATICTOP","TOTAL_MEMORY","alignMemory","factor","Math","ceil","warnOnce","text","shown","_stackSave","_stackRestore","stackAlloc","asm2wasmImports","f64-rem","x","y","debugger","Array","ABORT","condition","Pointer_stringify","ptr","t","hasUtf","i","HEAPU8","curr","String","fromCharCode","apply","subarray","min","UTF8ArrayToString","UTF8ToString","UTF8Decoder","TextDecoder","u8Array","idx","endPtr","decode","u0","u1","u2","u3","u4","str","ch","stringToUTF8Array","outU8Array","outIdx","maxBytesToWrite","startIdx","endIdx","u","charCodeAt","lengthBytesUTF8","len","allocateUTF8OnStack","HEAP8","demangleAll","func","stackTrace","js","stack","e","jsStackTrace","HEAP16","HEAP32","HEAPU32","STACK_BASE","STACKTOP","STACK_MAX","DYNAMIC_BASE","DYNAMICTOP_PTR","WASM_PAGE_SIZE","ASMJS_PAGE_SIZE","MIN_TOTAL_MEMORY","alignUp","multiple","updateGlobalBuffer","buf","updateGlobalBufferViews","Int8Array","Int16Array","Int32Array","Uint16Array","Uint32Array","Float32Array","Float64Array","checkStackCookie","enlargeMemory","PAGE_MULTIPLE","LIMIT","OLD_TOTAL_MEMORY","max","Date","now","replacement","byteLength","oldHEAP8","ArrayBuffer","set","_emscripten_replace_memory","Function","prototype","call","getOwnPropertyDescriptor","get","TOTAL_STACK","WebAssembly","Memory","initial","callRuntimeCallbacks","callbacks","callback","shift","arg","__ATPRERUN__","__ATINIT__","__ATMAIN__","__ATEXIT__","__ATPOSTRUN__","runtimeInitialized","runtimeExited","ensureInitRuntime","writeAsciiToMemory","dontAddNull","abs","Math_cos","cos","Math_sin","sin","Math_log","tan","acos","asin","atan","atan2","exp","Math_sqrt","sqrt","Math_ceil","Math_floor","floor","Math_pow","pow","runDependencies","imul","fround","round","clz32","trunc","runDependencyWatcher","dependenciesFulfilled","runDependencyTracking","addRunDependency","id","setInterval","clearInterval","dep","removeRunDependency","FS","error","init","createDataFile","createPreloadedFile","createLazyFile","mkdev","registerDevice","analyzePath","loadFilesFromDB","ErrnoError","dataURIPrefix","isDataURI","startsWith","wasmTextFile","wasmBinaryFile","asmjsCodeFile","info","global","env","asm2wasm","parent","exports","getBinary","doNativeWasm","providedBuffer","receiveInstance","instance","module","memory","newBuffer","oldBuffer","oldView","mergeMemory","NaN","Infinity","trueModule","receiveInstantiatedSource","output","instantiateArrayBuffer","receiver","fetch","Promise","resolve","reject","credentials","then","catch","instantiate","reason","instantiateStreaming","asmjsReallocBuffer","finalMethod","oldSize","grow","wasmReallocBuffer","TABLE_SIZE","MAX_TABLE_SIZE","Table","maximum","element","integrateWasmJS","ASM_CONSTS","$0","GreyCat","elements","Logger","debug","_module","$1","start","$2","$3","newWebSocketClient","destroyWebSocketClient","webSocketClientSend","STATIC_BASE","push","tempDoublePtr","SYSCALLS","varargs","getStr","get64","low","high","getZero","flush_NO_FILESYSTEM","fflush","printChar","___syscall146","buffers","which","stream","iov","iovcnt","j","errno","_emscripten_set_main_loop_timing","mode","value","Browser","mainLoop","timingMode","timingValue","scheduler","timeUntilNextTick","tickStartTime","_emscripten_get_now","setTimeout","runner","method","requestAnimationFrame","setImmediates","emscriptenMainLoopMessageId","addEventListener","event","target","stopPropagation","postMessage","_emscripten_set_main_loop","fps","simulateInfiniteLoop","noSetTiming","browserIterationFunc","thisMainLoopId","currentlyRunningMainloop","queue","blocker","remainingBlockers","remaining","next","counted","name","updateStatus","currentFrameNumber","ctx","runIter","SDL","audio","queueNewAudioData","pause","resume","message","expected","expectedBlockers","isFullscreen","pointerLock","moduleContextCreatedCallbacks","workers","initted","Blob","hasBlobConstructor","BlobBuilder","MozBlobBuilder","WebKitBlobBuilder","URLObject","URL","webkitURL","noImageDecoding","imagePlugin","canHandle","test","handle","byteArray","b","type","getMimetype","bb","append","getBlob","createObjectURL","img","Image","complete","canvas","createElement","width","height","getContext","drawImage","revokeObjectURL","audioPlugin","noAudioDecoding",".ogg",".wav",".mp3","done","finish","fail","Audio","BASE","leftchar","leftbits","PAD","encode64","safeSetTimeout","requestPointerLock","exitPointerLock","pointerLockChange","ev","preventDefault","createContext","useWebGL","setInModule","webGLContextAttributes","contextHandle","contextAttributes","antialias","alpha","attribute","GL","GLctx","makeContextCurrent","forEach","destroyContext","fullscreenHandlersInstalled","lockPointer","resizeCanvas","requestFullscreen","vrDevice","fullscreenChange","canvasContainer","parentNode","exitFullscreen","setFullscreenCanvasSize","updateCanvasDimensions","insertBefore","removeChild","setWindowedCanvasSize","appendChild","Element","vrDisplay","requestFullScreen","nextRAF","fakeRequestAnimationFrame","delay","safeCallback","allowAsyncCallbacks","queuedAsyncCallbacks","pauseAsyncCallbacks","resumeAsyncCallbacks","safeRequestAnimationFrame","timeout","safeSetInterval","jpg","jpeg","png","bmp","ogg","wav","mp3","getUserMedia","navigator","getMovementX","getMovementY","getMouseWheelDelta","delta","detail","wheelDelta","mouseX","mouseY","mouseMovementX","mouseMovementY","touches","lastTouches","calculateMouseEvent","rect","getBoundingClientRect","cw","scrollX","pageXOffset","scrollY","pageYOffset","touch","adjustedX","pageX","left","adjustedY","pageY","top","coords","identifier","last","asyncLoad","noRunDep","orig","random","getUniqueRunDependency","arrayBuffer","resizeListeners","updateResizeListeners","listener","setCanvasSize","noUpdates","windowedWidth","windowedHeight","flags","screen","wNative","hNative","widthNative","heightNative","w","h","style","removeProperty","setProperty","wgetRequests","nextWgetRequestHandle","getNextWgetRequestHandle","__exit","exit","_llvm_ceil_f64","_llvm_cos_f64","_llvm_floor_f64","_llvm_log2_f32","LN2","_llvm_log_f64","_llvm_pow_f64","_llvm_sin_f64","_llvm_sqrt_f64","_llvm_stacksave","LLVM_SAVEDSTACKS","dateNow","performance","asmGlobalArg","asmLibraryArg","getTotalMemory","abortOnCannotGrowMemory","abortStackOverflow","allocSize","nullFunc_ii","nullFunc_iiii","nullFunc_iijji","nullFunc_vi","nullFunc_vii","nullFunc_viidii","nullFunc_viidiiii","nullFunc_viiidiidi","nullFunc_viiii","nullFunc_viiiii","nullFunc_viiiiii","nullFunc_vijj","nullFunc_vijji","invoke_ii","index","a1","sp","invoke_iiii","a2","a3","invoke_iijji","a4","a5","a6","invoke_vi","invoke_vii","invoke_viidii","invoke_viidiiii","a7","invoke_viiidiidi","a8","invoke_viiii","invoke_viiiii","invoke_viiiiii","invoke_vijj","invoke_vijji","___assert_fail","line","___lock","___setErrNo","___syscall140","getStreamFromFD","offset_low","result","whence","offset","llseek","position","getdents","___syscall54","___syscall6","close","___unlock","_emscripten_asm_const_ii","code","a0","_emscripten_asm_const_iii","_emscripten_asm_const_iiii","_emscripten_asm_const_iiiii","_emscripten_exit_with_live_runtime","_emscripten_memcpy_big","dest","num","_exit","_llvm_log2_f64","_llvm_stackrestore","p","splice","asm","real____errno_location","real__ctx__create","real__ctx__get","real__ctx__type","real__double_array__to_string","real__fflush","real__free","real__function__create","real__function__pipe_key_with","real__function__pipe_with","real__gctx__bind","real__gctx__declare","real__gctx__declare_double","real__gctx__declare_int","real__gctx__declare_long","real__gctx__declare_null","real__gctx__declare_raw_string","real__gctx__execute","real__gctx__execute_key","real__gctx__execute_prepared","real__gctx__get_bool","real__gctx__get_double","real__gctx__get_int","real__gctx__get_long","real__gctx__get_raw_string","real__gctx__get_ulong","real__gctx__graph","real__gctx__json","real__gctx__on_end","real__gctx__ordinal","real__gctx__path","real__gctx__prepare","real__gctx__prepare_key","real__gctx__set_double","real__gctx__set_int","real__gctx__set_long","real__gctx__set_raw_string","real__gdouble_array__get","real__gdouble_array__set","real__gdouble_array__size","real__gfunction__create","real__gfunction__parse","real__gfunction__pipe","real__gfunction__pipe_key","real__gfunction__unsafe_dec_ref","real__gfunction__unsafe_set_key","real__ggraph__create_node_volatile","real__ggraph__declare_function","real__ggraph__declare_meta","real__ggraph__declare_plugin","real__ggraph__declare_type","real__ggraph__destroy","real__ggraph__disable_debug","real__ggraph__enable_debug","real__ggraph__function","real__ggraph__is_meta","real__ggraph__meta","real__ggraph__type","real__ggraph_export_functions","real__ggraph_export_types","real__gint_array__get","real__gint_array__set","real__gint_array__size","real__glong_array__get","real__glong_array__set","real__glong_array__size","real__gnode__get_bool","real__gnode__get_double","real__gnode__get_int","real__gnode__get_long","real__gnode__get_or_create","real__gnode__get_raw_string","real__gnode__json","real__gnode__set","real__gnode__set_double","real__gnode__set_int","real__gnode__set_long","real__gnode__set_null","real__gnode__set_raw_string","real__gnode_type__declare_attribute","real__gnode_type__declare_constant","real__gnode_type__json_to","real__gnode_type__key","real__gobject__un_mark","real__graph__configure_plugin","real__graph__create","real__graph__size_buffer","real__graph__size_cache","real__graph__size_heap","real__gstring__close","real__gstring__create","real__gstring__get","real__gstring__prepare","real__gstring_array__add","real__gstring_array__create","real__gstring_array__get","real__gstring_array__set","real__gstring_array__size","real__gulong_array__get","real__gulong_array__set","real__gulong_array__size","real__gwebsocket_client__on_msg","real__int_array__to_string","real__js_free","real__js_malloc","real__llvm_bswap_i32","real__long_array__to_string","real__main","real__malloc","real__node__get","real__node__graph","real__node__type","real__node_type__declare_constant_double","real__node_type__declare_constant_int","real__node_type__declare_constant_long","real__node_type__declare_constant_raw_string","real__node_type__graph","real__params__add_bool","real__params__add_double","real__params__add_function_key","real__params__add_int","real__params__add_long","real__params__add_null","real__params__add_object","real__params__add_string","real__params__add_var_key","real__params__add_var_key_new","real__params__create","real__plugin__create","real__read_bool","real__read_double","real__read_int","real__read_long","real__read_ulong","real__sbrk","real__string__set_size","real__string_array__to_string","real__ulong_array__to_string","real_establishStackSpace","real_getTempRet0","real_setTempRet0","real_setThrew","real_stackAlloc","real_stackRestore","real_stackSave","initialStackTop","this","defineProperty","old","constructor","run","args","doRun","shouldRunNow","cb","unshift","postRun","preRun","implicit","has","checkUnflushedContent","runCaller","argc","argv","toLog","abortDecorators","what","JSON","stringify","decorator","pop","MonacoEnvironment","getWorkerUrl","moduleId","label","d","Params","Graph","_home_leiko_dev_datathings_greycat_js_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","_home_leiko_dev_datathings_greycat_js_node_modules_babel_runtime_helpers_esm_createClass__WEBPACK_IMPORTED_MODULE_1__","_greycat_core_wasm__WEBPACK_IMPORTED_MODULE_2__","_gen_keys__WEBPACK_IMPORTED_MODULE_3__","isomorphic_ws__WEBPACK_IMPORTED_MODULE_4__","isomorphic_ws__WEBPACK_IMPORTED_MODULE_4___default","NodeType","nptr","factory","graph_ptr","_node_type__graph","factories","_gnode_type__key","_gnode_type__declare_attribute","paramToKey","hash","js_str","ptr_str","_js_malloc","_node_type__declare_constant_raw_string","_js_free","_node_type__declare_constant_double","_node_type__declare_constant_int","_node_type__declare_constant_long","_gnode_type__declare_constant","g_function","anonymous_func_ptr","_function__create","_gobject__un_mark","_gstring__create","_gnode_type__json_to","_gstring__close","buffer_raw","_gstring__get","g_string","Context","userData","_gctx__execute_key","_gctx__execute","_gctx__prepare_execute_key","_gctx__prepare","_gctx__execute_prepared","_gctx__ordinal","body","_gctx__on_end","final_func_ptr","_gctx__graph","strPtr","_gctx__path","jsStr","_gctx__json","parse","_gctx__declare_raw_string","_gctx__declare_double","_gctx__declare_int","_gctx__declare_long","_gctx__declare_null","_gctx__set_raw_string","_gctx__set_double","_gctx__set_int","_gctx__set_long","prop","propKey","_ctx__type","g_double","_gctx__get_double","g_int","_gctx__get_int","g_long","_gctx__get_long","g_ulong","_gctx__get_ulong","g_bool","_gctx__get_bool","_gctx__get_raw_string","g_string_array","_ptr","_ctx__get","StringArray","g_long_array","_ptr2","LongArray","g_ulong_array","_ptr3","ULongArray","g_int_array","_ptr4","IntArray","g_double_array","_ptr5","DoubleArray","_ptr6","Node","_gctx__bind","raw_c_str","_ulong_array__to_string","ts_str","_gulong_array__get","_gulong_array__set","_gulong_array__add","_gulong_array__size","_long_array__to_string","_glong_array__get","_glong_array__set","_glong_array__add","_glong_array__size","_int_array__to_string","_gint_array__get","_gint_array__set","_gint_array__add","_gint_array__size","_double_array__to_string","_gdouble_array__get","_gdouble_array__set","_gdouble_array__add","_gdouble_array__size","_string_array__to_string","gstring_ptr","_gstring_array__get","new_str_ptr","_gstring__prepare","new_ptr_raw","_string__set_size","_gstring_array__set","new_gstring","_gstring_array__add","add","_gstring_array__size","capacity","_params__create","_params__add_int","_params__add_long","_params__add_double","_params__add_bool","_params__add_null","_params__add_var_key","_params__add_var_key_new","_params__add_function_key","_params__add_string","_params__add_object","ikey","addString","addBool","addDouble","addInt","addLong","addFunctionKey","_name","_gfunction__unsafe_set_key","sub","params","_function__pipe_key_with","_gfunction__pipe_key","_function__pipe_with","_gfunction__pipe","sub_ptr","greycatl_data","_gfunction__parse","pipe","g_sync","targetVar","g_declare_var","addAuto","g_value","addVarKeyNew","g_result","g_assign_var","addVarKey","srcVar","g_print","g_src","g_console","g_print_all","nodeType","g_new_node","g_node_type","timestamp","g_new_timepoint","g_time","property","g_set_attribute","g_prop","g_set_reference","g_read_property","nb_iteration","g_repeat","g_nb","g_sub","addTypedObject","g_foreach","g_load_global_index","g_id","g_new_global_index","g_load_master_index","g_configure_index","g_add_to_index","g_query_index","_gnode__json","_gnode__set_null","_gnode__set_raw_string","_gnode__set_double","_gnode__set_int","_gnode__set_long","_gnode__set","_node__graph","pkey","ptype","_node__type","g_null","_gnode__get_bool","_gnode__get_long","_gnode__get_double","_gnode__get_int","string_ptr","_gnode__get_raw_string","_node__get","prop_type","res_ptr","_gnode__get_or_create","_read_bool","_read_ulong","_read_long","_read_double","_read_int","g_node","cacheSize","bufferSize","_graph__create","_ggraph__enable_debug","_ggraph__disable_debug","meta_key","meta","_ggraph__is_meta","_ggraph__declare_meta","_ggraph__declare_function","_ggraph__declare_type","plugin","plug_ptr","_plugin__create","_ggraph__declare_plugin","_graph__configure_plugin","_gfunction__create","_ggraph__function","type_ptr","_ggraph__type","_ggraph__meta","_gfunction__unsafe_dec_ref","_ctx__create","new_ctx","vtype","_gstring_array__create","_ggraph__create_node_volatile","_ggraph_export_types","_ggraph_export_functions","_ggraph__destroy","_graph__size_heap","_graph__size_cache","_graph__size_buffer","WebSocketAdapter","s","socket","connected","_this","isInitiliazed","onRuntimeInitialized","url_ptr","port","use_wss","address","rejectUnauthorized","binaryType","ws","onopen","onclose","onmessage","msgBuf","bug_len","_gwebsocket_client__on_msg","client_id","data_ptr","new_buffer","param","origin","paramHash","_gfunction__graph","webpackEmptyContext","req","keys","WorkspacePane_WorkspacePane","react","[object Object]","props","super","onConnect","wsStore","parseInt","checked","configure","store","graph","hostname","secured","className","htmlFor","onChange","setString","setNumber","setBoolean","onClick","workspace_pane_WorkspacePane","__decorate","index_module","LanguageIcon","language","Icon","mdi","color","greycat_head_default","EditorStore","_files","Map","MAIN","uri","content","isOpen","isSelected","EXTENSIONS","file","select","state","files","selected","values","find","Boolean","opened","filter","EditorStore_decorate","mobx_module","_a","editor_main","_b","ICodeEditorViewState","_c","EditorPane_EditorPane","_editor","_updateModelDisposer","_interpretTimeout","onEditorDidMount","onEditorChange","onTabClicked","onTabCloseClicked","editor","createModel","editorDidMount","setModel","getModel","restoreViewState","addAction","keybindings","Shift","Enter","contextMenuGroupId","contextMenuOrder","execute","newValue","model","setContent","clearTimeout","interpretExtensions","map","classnames","react_monaco_editor_lib_default","theme","options","folding","extraEditorClassName","scrollBeyondLastLine","minimap","enabled","renderWhitespace","autoIndent","editor_pane_EditorPane","EditorPane_decorate","Table_Table","columns","rows","colMap","k","o","reduce","obj","oKey","toUpperCase","assign","headerStyle","display","cols","col","Header","accessor","maxWidth","convertData","es","showPagination","pageSize","defaultPageSize","JsonTree_JsonTree","keypath","json_inspector_default","ContextPane_ContextPane","globalTypes","globalFunctions","esm","context_pane_ContextPane","ContextPane_decorate","ConsolePane_ConsolePane","_logsBottomEl","onClear","clear","_scrollToBottom","logs","l","level","_formatTime","time","ref","el","scrollIntoView","behavior","lodash","getHours","getMinutes","getSeconds","getMilliseconds","console_pane_ConsolePane","ConsolePane_decorate","Studio_Studio","onEditorSplitterDragFinished","onExecute","layout","workspace","fontFamily","package_0","lib_default","primaryPaneWidth","primaryPaneMaxHeight","primaryPaneMaxWidth","primaryPaneMinHeight","primaryPaneMinWidth","primaryPaneHeight","onDragFinished","primaryPaneClassName","src_Studio","Studio_decorate","__assign","Emitter","monaco","DEFAULT_SETTINGS","lint","lintOptions","strict","defaults","LanguageServiceDefaultsImpl","languageId","settings","_onDidChange","_gcTypes","_gcFunctions","_languageId","setSettings","enumerable","configurable","_settings","fire","addTypes","types","dispose","addFunctions","functions","monaco_contribution","languages","greycat","register","extensions","onLanguage","wrap","all","m","setupMode","ConsoleStore_ConsoleStore","_logs","_push","ConsoleStore_decorate","WorkspaceStore_WorkspaceStore","_hostname","_port","_path","_secured","configurePlugin","g_websocket_client","g_url","g_port","g_use_wss","protocol","g_path","pathname","WorkspaceStore_decorate","WorkspaceStore_a","TS_OPTS","compilerOptions","typescript","ES2015","CommonJS","removeComments","StudioStore_StudioStore","_console","_workspace","_graph","newGraph","_data","_globalTypes","_globalFunctions","main","context","newContext","onEnd","toObject","newFunction","updateGlobalTypes","updateGlobalFunctions","outputText","extensionsLoader","declareFunction","exportTypes","exportFunctions","StudioStore_decorate","StudioStore_a","StudioStore_b","StudioStore_c","_d","gcDeclaration","typescriptDefaults","addExtraLib","root","getElementById","errorTimeout","innerHTML","onReady","react_dom","g_true","g_false","g_template","g_matrix","g_number","g_ref_array","g_node_array","g_meta_key","g_var_key","g_var_key_new","g_var_offset","g_offset","g_read_offset","g_free_var","g_master_index","g_configure","g_it","g_return","g_if_then_else","g_operator","g_then","g_else","g_all","g_name","g_result_temp","g_meta","g_session","g_sessions","g_node_generator","g_session_generator","g_ids","g_this","g_key","g_keys","g_new_object","g_new_object_at","g_object_type","g_init","g_merge","g_print_append","g_get_all","g_set","g_value2","g_values","g_blob","g_blob_ext","g_any","g_any_node","g_page","g_pages","g_seq","g_offsets","g_function_key","g_from","g_new_node_timepoint","g_load","g_load_all","g_index","g_query","g_lookup","g_lookup_all","g_default","g_reference","g_index_hash","g_index_hash_candidates","g_index_hash_values","g_resolved_values","g_index_result","g_global_index","g_add","g_to","g_ordinal","g_param","g_set_at","g_execute_property","g_i","g_j","g_k","g_callee_origin","g_callee_session","g_new_session","g_noop","g_std","g_leveldb","g_rocksdb","g_websocket_server","g_openblas","g_cublas","g_eigen","g_hybridblas","g_mqtt","g_mqtt_topic","g_mqtt_topics_list","g_mqtt_custom_parser","g_opcua_server","g_opcua_client","g_opcua_node_identifier_list","g_node_identifier","g_gateway","g_remotes","g_subscriptions","g_cursor","g_max","g_grafana","g_cert"],"mappings":"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","file":"static/js/main.1b97dd85.chunk.js","sourcesContent":["import greycat from './__gen/greycat';\nimport greycatModule from '../greycat.wasm'; // Since webpack will change the name and potentially the path of the\n// `.wasm` file, we have to provide a `locateFile()` hook to redirect\n// to the appropriate URL.\n// More details: https://kripken.github.io/emscripten-site/docs/api_reference/module.html\n\nexport default greycat({\n  locateFile: function locateFile(path) {\n    if (path.substr(path.length - '.wasm'.length, path.length) === '.wasm') {\n      return greycatModule;\n    }\n\n    return path;\n  }\n});","var Module = function () {\n  var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;\n\n  return function (Module) {\n    Module = Module || {}; // Copyright 2010 The Emscripten Authors.  All rights reserved.\n    // Emscripten is available under two separate licenses, the MIT license and the\n    // University of Illinois/NCSA Open Source License.  Both these licenses can be\n    // found in the LICENSE file.\n    // The Module object: Our interface to the outside world. We import\n    // and export values on it. There are various ways Module can be used:\n    // 1. Not defined. We create it here\n    // 2. A function parameter, function(Module) { ..generated code.. }\n    // 3. pre-run appended it, var Module = {}; ..generated code..\n    // 4. External script tag defines var Module.\n    // We need to check if Module already exists (e.g. case 3 above).\n    // Substitution will be replaced with actual code on later stage of the build,\n    // this way Closure Compiler will not mangle it (e.g. case 4. above).\n    // Note that if you want to run closure, and also to use Module\n    // after the generated code, you will need to define   var Module = {};\n    // before the code. Then that object will be used in the code, and you\n    // can continue to use Module afterwards as well.\n\n    var Module = typeof Module !== 'undefined' ? Module : {}; // --pre-jses are emitted after the Module integration code, so that they can\n    // refer to Module (if they choose; they can also define Module)\n    // {{PRE_JSES}}\n    // Sometimes an existing Module object exists with properties\n    // meant to overwrite the default module functionality. Here\n    // we collect those properties and reapply _after_ we configure\n    // the current environment's defaults to avoid having to be so\n    // defensive during initialization.\n\n    var moduleOverrides = {};\n    var key;\n\n    for (key in Module) {\n      if (Module.hasOwnProperty(key)) {\n        moduleOverrides[key] = Module[key];\n      }\n    }\n\n    Module['arguments'] = [];\n    Module['thisProgram'] = './this.program';\n\n    Module['quit'] = function (status, toThrow) {\n      throw toThrow;\n    };\n\n    Module['preRun'] = [];\n    Module['postRun'] = []; // Determine the runtime environment we are in. You can customize this by\n    // setting the ENVIRONMENT setting at compile time (see settings.js).\n\n    var ENVIRONMENT_IS_WEB = false;\n    var ENVIRONMENT_IS_WORKER = false;\n    var ENVIRONMENT_IS_NODE = false;\n    var ENVIRONMENT_IS_SHELL = false;\n    ENVIRONMENT_IS_WEB = typeof window === 'object';\n    ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';\n    ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;\n    ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;\n\n    if (Module['ENVIRONMENT']) {\n      throw new Error('Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)');\n    } // Three configurations we can be running in:\n    // 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)\n    // 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)\n    // 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)\n\n\n    assert(typeof Module['memoryInitializerPrefixURL'] === 'undefined', 'Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead');\n    assert(typeof Module['pthreadMainPrefixURL'] === 'undefined', 'Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead');\n    assert(typeof Module['cdInitializerPrefixURL'] === 'undefined', 'Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead');\n    assert(typeof Module['filePackagePrefixURL'] === 'undefined', 'Module.filePackagePrefixURL option was removed, use Module.locateFile instead'); // `/` should be present at the end if `scriptDirectory` is not empty\n\n    var scriptDirectory = '';\n\n    function locateFile(path) {\n      if (Module['locateFile']) {\n        return Module['locateFile'](path, scriptDirectory);\n      } else {\n        return scriptDirectory + path;\n      }\n    }\n\n    if (ENVIRONMENT_IS_NODE) {\n      scriptDirectory = __dirname + '/'; // Expose functionality in the same simple way that the shells work\n      // Note that we pollute the global namespace here, otherwise we break in node\n\n      var nodeFS;\n      var nodePath;\n\n      Module['read'] = function shell_read(filename, binary) {\n        var ret;\n        if (!nodeFS) nodeFS = require('fs');\n        if (!nodePath) nodePath = require('path');\n        filename = nodePath['normalize'](filename);\n        ret = nodeFS['readFileSync'](filename);\n        return binary ? ret : ret.toString();\n      };\n\n      Module['readBinary'] = function readBinary(filename) {\n        var ret = Module['read'](filename, true);\n\n        if (!ret.buffer) {\n          ret = new Uint8Array(ret);\n        }\n\n        assert(ret.buffer);\n        return ret;\n      };\n\n      if (process['argv'].length > 1) {\n        Module['thisProgram'] = process['argv'][1].replace(/\\\\/g, '/');\n      }\n\n      Module['arguments'] = process['argv'].slice(2); // MODULARIZE will export the module in the proper place outside, we don't need to export here\n\n      process['on']('uncaughtException', function (ex) {\n        // suppress ExitStatus exceptions from showing an error\n        if (!(ex instanceof ExitStatus)) {\n          throw ex;\n        }\n      }); // Currently node will swallow unhandled rejections, but this behavior is\n      // deprecated, and in the future it will exit with error status.\n\n      process['on']('unhandledRejection', abort);\n\n      Module['quit'] = function (status) {\n        process['exit'](status);\n      };\n\n      Module['inspect'] = function () {\n        return '[Emscripten Module object]';\n      };\n    } else if (ENVIRONMENT_IS_SHELL) {\n      if (typeof read != 'undefined') {\n        Module['read'] = function shell_read(f) {\n          return read(f);\n        };\n      }\n\n      Module['readBinary'] = function readBinary(f) {\n        var data;\n\n        if (typeof readbuffer === 'function') {\n          return new Uint8Array(readbuffer(f));\n        }\n\n        data = read(f, 'binary');\n        assert(typeof data === 'object');\n        return data;\n      };\n\n      if (typeof scriptArgs != 'undefined') {\n        Module['arguments'] = scriptArgs;\n      } else if (typeof arguments != 'undefined') {\n        Module['arguments'] = arguments;\n      }\n\n      if (typeof quit === 'function') {\n        Module['quit'] = function (status) {\n          quit(status);\n        };\n      }\n    } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {\n      if (ENVIRONMENT_IS_WORKER) {\n        // Check worker, not web, since window could be polyfilled\n        scriptDirectory = self.location.href;\n      } else if (document.currentScript) {\n        // web\n        scriptDirectory = document.currentScript.src;\n      } // When MODULARIZE (and not _INSTANCE), this JS may be executed later, after document.currentScript\n      // is gone, so we saved it, and we use it here instead of any other info.\n\n\n      if (_scriptDir) {\n        scriptDirectory = _scriptDir;\n      } // blob urls look like blob:http://site.com/etc/etc and we cannot infer anything from them.\n      // otherwise, slice off the final part of the url to find the script directory.\n      // if scriptDirectory does not contain a slash, lastIndexOf will return -1,\n      // and scriptDirectory will correctly be replaced with an empty string.\n\n\n      if (scriptDirectory.indexOf('blob:') !== 0) {\n        scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf('/') + 1);\n      } else {\n        scriptDirectory = '';\n      }\n\n      Module['read'] = function shell_read(url) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, false);\n        xhr.send(null);\n        return xhr.responseText;\n      };\n\n      if (ENVIRONMENT_IS_WORKER) {\n        Module['readBinary'] = function readBinary(url) {\n          var xhr = new XMLHttpRequest();\n          xhr.open('GET', url, false);\n          xhr.responseType = 'arraybuffer';\n          xhr.send(null);\n          return new Uint8Array(xhr.response);\n        };\n      }\n\n      Module['readAsync'] = function readAsync(url, onload, onerror) {\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET', url, true);\n        xhr.responseType = 'arraybuffer';\n\n        xhr.onload = function xhr_onload() {\n          if (xhr.status == 200 || xhr.status == 0 && xhr.response) {\n            // file URLs can return 0\n            onload(xhr.response);\n            return;\n          }\n\n          onerror();\n        };\n\n        xhr.onerror = onerror;\n        xhr.send(null);\n      };\n\n      Module['setWindowTitle'] = function (title) {\n        document.title = title;\n      };\n    } else {\n      throw new Error('environment detection error');\n    } // Set up the out() and err() hooks, which are how we can print to stdout or\n    // stderr, respectively.\n    // If the user provided Module.print or printErr, use that. Otherwise,\n    // console.log is checked first, as 'print' on the web will open a print dialogue\n    // printErr is preferable to console.warn (works better in shells)\n    // bind(console) is necessary to fix IE/Edge closed dev tools panel behavior.\n\n\n    var out = Module['print'] || (typeof console !== 'undefined' ? console.log.bind(console) : typeof print !== 'undefined' ? print : null);\n    var err = Module['printErr'] || (typeof printErr !== 'undefined' ? printErr : typeof console !== 'undefined' && console.warn.bind(console) || out); // Merge back in the overrides\n\n    for (key in moduleOverrides) {\n      if (moduleOverrides.hasOwnProperty(key)) {\n        Module[key] = moduleOverrides[key];\n      }\n    } // Free the object hierarchy contained in the overrides, this lets the GC\n    // reclaim data used e.g. in memoryInitializerRequest, which is a large typed array.\n\n\n    moduleOverrides = undefined; // Copyright 2017 The Emscripten Authors.  All rights reserved.\n    // Emscripten is available under two separate licenses, the MIT license and the\n    // University of Illinois/NCSA Open Source License.  Both these licenses can be\n    // found in the LICENSE file.\n    // {{PREAMBLE_ADDITIONS}}\n\n    var STACK_ALIGN = 16; // stack management, and other functionality that is provided by the compiled code,\n    // should not be used before it is ready\n\n    _stackSave = _stackRestore = stackAlloc = setTempRet0 = getTempRet0 = function getTempRet0() {\n      abort('cannot use the stack before compiled code is ready to run, and has provided stack access');\n    };\n\n    function staticAlloc(size) {\n      assert(!staticSealed);\n      var ret = STATICTOP;\n      STATICTOP = STATICTOP + size + 15 & -16;\n      assert(STATICTOP < TOTAL_MEMORY, 'not enough memory for static allocation - increase TOTAL_MEMORY');\n      return ret;\n    }\n\n    function dynamicAlloc(size) {\n      assert(DYNAMICTOP_PTR);\n      var ret = HEAP32[DYNAMICTOP_PTR >> 2];\n      var end = ret + size + 15 & -16;\n      HEAP32[DYNAMICTOP_PTR >> 2] = end;\n\n      if (end >= TOTAL_MEMORY) {\n        var success = enlargeMemory();\n\n        if (!success) {\n          HEAP32[DYNAMICTOP_PTR >> 2] = ret;\n          return 0;\n        }\n      }\n\n      return ret;\n    }\n\n    function alignMemory(size, factor) {\n      if (!factor) factor = STACK_ALIGN; // stack alignment (16-byte) by default\n\n      var ret = size = Math.ceil(size / factor) * factor;\n      return ret;\n    }\n\n    function getNativeTypeSize(type) {\n      switch (type) {\n        case 'i1':\n        case 'i8':\n          return 1;\n\n        case 'i16':\n          return 2;\n\n        case 'i32':\n          return 4;\n\n        case 'i64':\n          return 8;\n\n        case 'float':\n          return 4;\n\n        case 'double':\n          return 8;\n\n        default:\n          {\n            if (type[type.length - 1] === '*') {\n              return 4; // A pointer\n            } else if (type[0] === 'i') {\n              var bits = parseInt(type.substr(1));\n              assert(bits % 8 === 0);\n              return bits / 8;\n            } else {\n              return 0;\n            }\n          }\n      }\n    }\n\n    function warnOnce(text) {\n      if (!warnOnce.shown) warnOnce.shown = {};\n\n      if (!warnOnce.shown[text]) {\n        warnOnce.shown[text] = 1;\n        err(text);\n      }\n    }\n\n    var asm2wasmImports = {\n      // special asm2wasm imports\n      \"f64-rem\": function f64Rem(x, y) {\n        return x % y;\n      },\n      \"debugger\": function _debugger() {\n        debugger;\n      }\n    };\n    var jsCallStartIndex = 1;\n    var functionPointers = new Array(0); // 'sig' parameter is only used on LLVM wasm backend\n\n    function addFunction(func, sig) {\n      if (typeof sig === 'undefined') {\n        err('warning: addFunction(): You should provide a wasm function signature string as a second argument. This is not necessary for asm.js and asm2wasm, but is required for the LLVM wasm backend, so it is recommended for full portability.');\n      }\n\n      var base = 0;\n\n      for (var i = base; i < base + 0; i++) {\n        if (!functionPointers[i]) {\n          functionPointers[i] = func;\n          return jsCallStartIndex + i;\n        }\n      }\n\n      throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';\n    }\n\n    function removeFunction(index) {\n      functionPointers[index - jsCallStartIndex] = null;\n    }\n\n    var funcWrappers = {};\n\n    function getFuncWrapper(func, sig) {\n      if (!func) return; // on null pointer, return undefined\n\n      assert(sig);\n\n      if (!funcWrappers[sig]) {\n        funcWrappers[sig] = {};\n      }\n\n      var sigCache = funcWrappers[sig];\n\n      if (!sigCache[func]) {\n        // optimize away arguments usage in common cases\n        if (sig.length === 1) {\n          sigCache[func] = function dynCall_wrapper() {\n            return dynCall(sig, func);\n          };\n        } else if (sig.length === 2) {\n          sigCache[func] = function dynCall_wrapper(arg) {\n            return dynCall(sig, func, [arg]);\n          };\n        } else {\n          // general case\n          sigCache[func] = function dynCall_wrapper() {\n            return dynCall(sig, func, Array.prototype.slice.call(arguments));\n          };\n        }\n      }\n\n      return sigCache[func];\n    }\n\n    function makeBigInt(low, high, unsigned) {\n      return unsigned ? +(low >>> 0) + +(high >>> 0) * 4294967296.0 : +(low >>> 0) + +(high | 0) * 4294967296.0;\n    }\n\n    function dynCall(sig, ptr, args) {\n      if (args && args.length) {\n        assert(args.length == sig.length - 1);\n        assert('dynCall_' + sig in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n        return Module['dynCall_' + sig].apply(null, [ptr].concat(args));\n      } else {\n        assert(sig.length == 1);\n        assert('dynCall_' + sig in Module, 'bad function pointer type - no table for sig \\'' + sig + '\\'');\n        return Module['dynCall_' + sig].call(null, ptr);\n      }\n    }\n\n    function getCompilerSetting(name) {\n      throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for getCompilerSetting or emscripten_get_compiler_setting to work';\n    }\n\n    var Runtime = {\n      // FIXME backwards compatibility layer for ports. Support some Runtime.*\n      //       for now, fix it there, then remove it from here. That way we\n      //       can minimize any period of breakage.\n      dynCall: dynCall,\n      // for SDL2 port\n      // helpful errors\n      getTempRet0: function getTempRet0() {\n        abort('getTempRet0() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"');\n      },\n      staticAlloc: function staticAlloc() {\n        abort('staticAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"');\n      },\n      stackAlloc: function stackAlloc() {\n        abort('stackAlloc() is now a top-level function, after removing the Runtime object. Remove \"Runtime.\"');\n      }\n    }; // The address globals begin at. Very low in memory, for code size and optimization opportunities.\n    // Above 0 is static memory, starting with globals.\n    // Then the stack.\n    // Then 'dynamic' memory for sbrk.\n\n    var GLOBAL_BASE = 1024; // === Preamble library stuff ===\n    // Documentation for the public APIs defined in this file must be updated in:\n    //    site/source/docs/api_reference/preamble.js.rst\n    // A prebuilt local version of the documentation is available at:\n    //    site/build/text/docs/api_reference/preamble.js.txt\n    // You can also build docs locally as HTML or other formats in site/\n    // An online HTML version (which may be of a different version of Emscripten)\n    //    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html\n    //========================================\n    // Runtime essentials\n    //========================================\n    // whether we are quitting the application. no code should run after this.\n    // set in exit() and abort()\n\n    var ABORT = false; // set by exit() and abort().  Passed to 'onExit' handler.\n    // NOTE: This is also used as the process return code code in shell environments\n    // but only when noExitRuntime is false.\n\n    var EXITSTATUS = 0;\n    /** @type {function(*, string=)} */\n\n    function assert(condition, text) {\n      if (!condition) {\n        abort('Assertion failed: ' + text);\n      }\n    }\n\n    var globalScope = this; // Returns the C function with a specified identifier (for C++, you need to do manual name mangling)\n\n    function getCFunc(ident) {\n      var func = Module['_' + ident]; // closure exported function\n\n      assert(func, 'Cannot call unknown function ' + ident + ', make sure it is exported');\n      return func;\n    }\n\n    var JSfuncs = {\n      // Helpers for cwrap -- it can't refer to Runtime directly because it might\n      // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find\n      // out what the minified function name is.\n      'stackSave': function stackSave() {\n        _stackSave();\n      },\n      'stackRestore': function stackRestore() {\n        _stackRestore();\n      },\n      // type conversion from js to c\n      'arrayToC': function arrayToC(arr) {\n        var ret = stackAlloc(arr.length);\n        writeArrayToMemory(arr, ret);\n        return ret;\n      },\n      'stringToC': function stringToC(str) {\n        var ret = 0;\n\n        if (str !== null && str !== undefined && str !== 0) {\n          // null string\n          // at most 4 bytes per UTF-8 code point, +1 for the trailing '\\0'\n          var len = (str.length << 2) + 1;\n          ret = stackAlloc(len);\n          stringToUTF8(str, ret, len);\n        }\n\n        return ret;\n      }\n    }; // For fast lookup of conversion functions\n\n    var toC = {\n      'string': JSfuncs['stringToC'],\n      'array': JSfuncs['arrayToC']\n    }; // C calling interface.\n\n    function ccall(ident, returnType, argTypes, args, opts) {\n      function convertReturnValue(ret) {\n        if (returnType === 'string') return Pointer_stringify(ret);\n        if (returnType === 'boolean') return Boolean(ret);\n        return ret;\n      }\n\n      var func = getCFunc(ident);\n      var cArgs = [];\n      var stack = 0;\n      assert(returnType !== 'array', 'Return type should not be \"array\".');\n\n      if (args) {\n        for (var i = 0; i < args.length; i++) {\n          var converter = toC[argTypes[i]];\n\n          if (converter) {\n            if (stack === 0) stack = _stackSave();\n            cArgs[i] = converter(args[i]);\n          } else {\n            cArgs[i] = args[i];\n          }\n        }\n      }\n\n      var ret = func.apply(null, cArgs);\n      ret = convertReturnValue(ret);\n      if (stack !== 0) _stackRestore(stack);\n      return ret;\n    }\n\n    function cwrap(ident, returnType, argTypes, opts) {\n      return function () {\n        return ccall(ident, returnType, argTypes, arguments, opts);\n      };\n    }\n    /** @type {function(number, number, string, boolean=)} */\n\n\n    function setValue(ptr, value, type, noSafe) {\n      type = type || 'i8';\n      if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit\n\n      switch (type) {\n        case 'i1':\n          HEAP8[ptr >> 0] = value;\n          break;\n\n        case 'i8':\n          HEAP8[ptr >> 0] = value;\n          break;\n\n        case 'i16':\n          HEAP16[ptr >> 1] = value;\n          break;\n\n        case 'i32':\n          HEAP32[ptr >> 2] = value;\n          break;\n\n        case 'i64':\n          tempI64 = [value >>> 0, (tempDouble = value, +Math_abs(tempDouble) >= 1.0 ? tempDouble > 0.0 ? (Math_min(+Math_floor(tempDouble / 4294967296.0), 4294967295.0) | 0) >>> 0 : ~~+Math_ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296.0) >>> 0 : 0)], HEAP32[ptr >> 2] = tempI64[0], HEAP32[ptr + 4 >> 2] = tempI64[1];\n          break;\n\n        case 'float':\n          HEAPF32[ptr >> 2] = value;\n          break;\n\n        case 'double':\n          HEAPF64[ptr >> 3] = value;\n          break;\n\n        default:\n          abort('invalid type for setValue: ' + type);\n      }\n    }\n    /** @type {function(number, string, boolean=)} */\n\n\n    function getValue(ptr, type, noSafe) {\n      type = type || 'i8';\n      if (type.charAt(type.length - 1) === '*') type = 'i32'; // pointers are 32-bit\n\n      switch (type) {\n        case 'i1':\n          return HEAP8[ptr >> 0];\n\n        case 'i8':\n          return HEAP8[ptr >> 0];\n\n        case 'i16':\n          return HEAP16[ptr >> 1];\n\n        case 'i32':\n          return HEAP32[ptr >> 2];\n\n        case 'i64':\n          return HEAP32[ptr >> 2];\n\n        case 'float':\n          return HEAPF32[ptr >> 2];\n\n        case 'double':\n          return HEAPF64[ptr >> 3];\n\n        default:\n          abort('invalid type for getValue: ' + type);\n      }\n\n      return null;\n    }\n\n    var ALLOC_NORMAL = 0; // Tries to use _malloc()\n\n    var ALLOC_STACK = 1; // Lives for the duration of the current function call\n\n    var ALLOC_STATIC = 2; // Cannot be freed\n\n    var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk\n\n    var ALLOC_NONE = 4; // Do not allocate\n    // allocate(): This is for internal use. You can use it yourself as well, but the interface\n    //             is a little tricky (see docs right below). The reason is that it is optimized\n    //             for multiple syntaxes to save space in generated code. So you should\n    //             normally not use allocate(), and instead allocate memory using _malloc(),\n    //             initialize it with setValue(), and so forth.\n    // @slab: An array of data, or a number. If a number, then the size of the block to allocate,\n    //        in *bytes* (note that this is sometimes confusing: the next parameter does not\n    //        affect this!)\n    // @types: Either an array of types, one for each byte (or 0 if no type at that position),\n    //         or a single type which is used for the entire block. This only matters if there\n    //         is initial data - if @slab is a number, then this does not matter at all and is\n    //         ignored.\n    // @allocator: How to allocate memory, see ALLOC_*\n\n    /** @type {function((TypedArray|Array<number>|number), string, number, number=)} */\n\n    function allocate(slab, types, allocator, ptr) {\n      var zeroinit, size;\n\n      if (typeof slab === 'number') {\n        zeroinit = true;\n        size = slab;\n      } else {\n        zeroinit = false;\n        size = slab.length;\n      }\n\n      var singleType = typeof types === 'string' ? types : null;\n      var ret;\n\n      if (allocator == ALLOC_NONE) {\n        ret = ptr;\n      } else {\n        ret = [typeof _malloc === 'function' ? _malloc : staticAlloc, stackAlloc, staticAlloc, dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));\n      }\n\n      if (zeroinit) {\n        var stop;\n        ptr = ret;\n        assert((ret & 3) == 0);\n        stop = ret + (size & ~3);\n\n        for (; ptr < stop; ptr += 4) {\n          HEAP32[ptr >> 2] = 0;\n        }\n\n        stop = ret + size;\n\n        while (ptr < stop) {\n          HEAP8[ptr++ >> 0] = 0;\n        }\n\n        return ret;\n      }\n\n      if (singleType === 'i8') {\n        if (slab.subarray || slab.slice) {\n          HEAPU8.set(\n          /** @type {!Uint8Array} */\n          slab, ret);\n        } else {\n          HEAPU8.set(new Uint8Array(slab), ret);\n        }\n\n        return ret;\n      }\n\n      var i = 0,\n          type,\n          typeSize,\n          previousType;\n\n      while (i < size) {\n        var curr = slab[i];\n        type = singleType || types[i];\n\n        if (type === 0) {\n          i++;\n          continue;\n        }\n\n        assert(type, 'Must know what type to store in allocate!');\n        if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later\n\n        setValue(ret + i, curr, type); // no need to look up size unless type changes, so cache it\n\n        if (previousType !== type) {\n          typeSize = getNativeTypeSize(type);\n          previousType = type;\n        }\n\n        i += typeSize;\n      }\n\n      return ret;\n    } // Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready\n\n\n    function getMemory(size) {\n      if (!staticSealed) return staticAlloc(size);\n      if (!runtimeInitialized) return dynamicAlloc(size);\n      return _malloc(size);\n    }\n    /** @type {function(number, number=)} */\n\n\n    function Pointer_stringify(ptr, length) {\n      if (length === 0 || !ptr) return ''; // Find the length, and check for UTF while doing so\n\n      var hasUtf = 0;\n      var t;\n      var i = 0;\n\n      while (1) {\n        assert(ptr + i < TOTAL_MEMORY);\n        t = HEAPU8[ptr + i >> 0];\n        hasUtf |= t;\n        if (t == 0 && !length) break;\n        i++;\n        if (length && i == length) break;\n      }\n\n      if (!length) length = i;\n      var ret = '';\n\n      if (hasUtf < 128) {\n        var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack\n\n        var curr;\n\n        while (length > 0) {\n          curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));\n          ret = ret ? ret + curr : curr;\n          ptr += MAX_CHUNK;\n          length -= MAX_CHUNK;\n        }\n\n        return ret;\n      }\n\n      return UTF8ToString(ptr);\n    } // Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns\n    // a copy of that string as a Javascript String object.\n\n\n    function AsciiToString(ptr) {\n      var str = '';\n\n      while (1) {\n        var ch = HEAP8[ptr++ >> 0];\n        if (!ch) return str;\n        str += String.fromCharCode(ch);\n      }\n    } // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n    // null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.\n\n\n    function stringToAscii(str, outPtr) {\n      return writeAsciiToMemory(str, outPtr, false);\n    } // Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns\n    // a copy of that string as a Javascript String object.\n\n\n    var UTF8Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf8') : undefined;\n\n    function UTF8ArrayToString(u8Array, idx) {\n      var endPtr = idx; // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n      // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n\n      while (u8Array[endPtr]) {\n        ++endPtr;\n      }\n\n      if (endPtr - idx > 16 && u8Array.subarray && UTF8Decoder) {\n        return UTF8Decoder.decode(u8Array.subarray(idx, endPtr));\n      } else {\n        var u0, u1, u2, u3, u4, u5;\n        var str = '';\n\n        while (1) {\n          // For UTF8 byte structure, see:\n          // http://en.wikipedia.org/wiki/UTF-8#Description\n          // https://www.ietf.org/rfc/rfc2279.txt\n          // https://tools.ietf.org/html/rfc3629\n          u0 = u8Array[idx++];\n          if (!u0) return str;\n\n          if (!(u0 & 0x80)) {\n            str += String.fromCharCode(u0);\n            continue;\n          }\n\n          u1 = u8Array[idx++] & 63;\n\n          if ((u0 & 0xE0) == 0xC0) {\n            str += String.fromCharCode((u0 & 31) << 6 | u1);\n            continue;\n          }\n\n          u2 = u8Array[idx++] & 63;\n\n          if ((u0 & 0xF0) == 0xE0) {\n            u0 = (u0 & 15) << 12 | u1 << 6 | u2;\n          } else {\n            u3 = u8Array[idx++] & 63;\n\n            if ((u0 & 0xF8) == 0xF0) {\n              u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | u3;\n            } else {\n              u4 = u8Array[idx++] & 63;\n\n              if ((u0 & 0xFC) == 0xF8) {\n                u0 = (u0 & 3) << 24 | u1 << 18 | u2 << 12 | u3 << 6 | u4;\n              } else {\n                u5 = u8Array[idx++] & 63;\n                u0 = (u0 & 1) << 30 | u1 << 24 | u2 << 18 | u3 << 12 | u4 << 6 | u5;\n              }\n            }\n          }\n\n          if (u0 < 0x10000) {\n            str += String.fromCharCode(u0);\n          } else {\n            var ch = u0 - 0x10000;\n            str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);\n          }\n        }\n      }\n    } // Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns\n    // a copy of that string as a Javascript String object.\n\n\n    function UTF8ToString(ptr) {\n      return UTF8ArrayToString(HEAPU8, ptr);\n    } // Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',\n    // encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n    // Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n    // Parameters:\n    //   str: the Javascript string to copy.\n    //   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.\n    //   outIdx: The starting offset in the array to begin the copying.\n    //   maxBytesToWrite: The maximum number of bytes this function can write to the array.\n    //                    This count should include the null terminator,\n    //                    i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.\n    //                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.\n    // Returns the number of bytes written, EXCLUDING the null terminator.\n\n\n    function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {\n      if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.\n        return 0;\n      var startIdx = outIdx;\n      var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.\n\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629\n        var u = str.charCodeAt(i); // possibly a lead surrogate\n\n        if (u >= 0xD800 && u <= 0xDFFF) {\n          var u1 = str.charCodeAt(++i);\n          u = 0x10000 + ((u & 0x3FF) << 10) | u1 & 0x3FF;\n        }\n\n        if (u <= 0x7F) {\n          if (outIdx >= endIdx) break;\n          outU8Array[outIdx++] = u;\n        } else if (u <= 0x7FF) {\n          if (outIdx + 1 >= endIdx) break;\n          outU8Array[outIdx++] = 0xC0 | u >> 6;\n          outU8Array[outIdx++] = 0x80 | u & 63;\n        } else if (u <= 0xFFFF) {\n          if (outIdx + 2 >= endIdx) break;\n          outU8Array[outIdx++] = 0xE0 | u >> 12;\n          outU8Array[outIdx++] = 0x80 | u >> 6 & 63;\n          outU8Array[outIdx++] = 0x80 | u & 63;\n        } else if (u <= 0x1FFFFF) {\n          if (outIdx + 3 >= endIdx) break;\n          outU8Array[outIdx++] = 0xF0 | u >> 18;\n          outU8Array[outIdx++] = 0x80 | u >> 12 & 63;\n          outU8Array[outIdx++] = 0x80 | u >> 6 & 63;\n          outU8Array[outIdx++] = 0x80 | u & 63;\n        } else if (u <= 0x3FFFFFF) {\n          if (outIdx + 4 >= endIdx) break;\n          outU8Array[outIdx++] = 0xF8 | u >> 24;\n          outU8Array[outIdx++] = 0x80 | u >> 18 & 63;\n          outU8Array[outIdx++] = 0x80 | u >> 12 & 63;\n          outU8Array[outIdx++] = 0x80 | u >> 6 & 63;\n          outU8Array[outIdx++] = 0x80 | u & 63;\n        } else {\n          if (outIdx + 5 >= endIdx) break;\n          outU8Array[outIdx++] = 0xFC | u >> 30;\n          outU8Array[outIdx++] = 0x80 | u >> 24 & 63;\n          outU8Array[outIdx++] = 0x80 | u >> 18 & 63;\n          outU8Array[outIdx++] = 0x80 | u >> 12 & 63;\n          outU8Array[outIdx++] = 0x80 | u >> 6 & 63;\n          outU8Array[outIdx++] = 0x80 | u & 63;\n        }\n      } // Null-terminate the pointer to the buffer.\n\n\n      outU8Array[outIdx] = 0;\n      return outIdx - startIdx;\n    } // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n    // null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.\n    // Use the function lengthBytesUTF8 to compute the exact number of bytes (excluding null terminator) that this function will write.\n    // Returns the number of bytes written, EXCLUDING the null terminator.\n\n\n    function stringToUTF8(str, outPtr, maxBytesToWrite) {\n      assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');\n      return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);\n    } // Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.\n\n\n    function lengthBytesUTF8(str) {\n      var len = 0;\n\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var u = str.charCodeAt(i); // possibly a lead surrogate\n\n        if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | str.charCodeAt(++i) & 0x3FF;\n\n        if (u <= 0x7F) {\n          ++len;\n        } else if (u <= 0x7FF) {\n          len += 2;\n        } else if (u <= 0xFFFF) {\n          len += 3;\n        } else if (u <= 0x1FFFFF) {\n          len += 4;\n        } else if (u <= 0x3FFFFFF) {\n          len += 5;\n        } else {\n          len += 6;\n        }\n      }\n\n      return len;\n    } // Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns\n    // a copy of that string as a Javascript String object.\n\n\n    var UTF16Decoder = typeof TextDecoder !== 'undefined' ? new TextDecoder('utf-16le') : undefined;\n\n    function UTF16ToString(ptr) {\n      assert(ptr % 2 == 0, 'Pointer passed to UTF16ToString must be aligned to two bytes!');\n      var endPtr = ptr; // TextDecoder needs to know the byte length in advance, it doesn't stop on null terminator by itself.\n      // Also, use the length info to avoid running tiny strings through TextDecoder, since .subarray() allocates garbage.\n\n      var idx = endPtr >> 1;\n\n      while (HEAP16[idx]) {\n        ++idx;\n      }\n\n      endPtr = idx << 1;\n\n      if (endPtr - ptr > 32 && UTF16Decoder) {\n        return UTF16Decoder.decode(HEAPU8.subarray(ptr, endPtr));\n      } else {\n        var i = 0;\n        var str = '';\n\n        while (1) {\n          var codeUnit = HEAP16[ptr + i * 2 >> 1];\n          if (codeUnit == 0) return str;\n          ++i; // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.\n\n          str += String.fromCharCode(codeUnit);\n        }\n      }\n    } // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n    // null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.\n    // Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.\n    // Parameters:\n    //   str: the Javascript string to copy.\n    //   outPtr: Byte address in Emscripten HEAP where to write the string to.\n    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n    //                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.\n    //                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.\n    // Returns the number of bytes written, EXCLUDING the null terminator.\n\n\n    function stringToUTF16(str, outPtr, maxBytesToWrite) {\n      assert(outPtr % 2 == 0, 'Pointer passed to stringToUTF16 must be aligned to two bytes!');\n      assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'); // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 0x7FFFFFFF;\n      }\n\n      if (maxBytesToWrite < 2) return 0;\n      maxBytesToWrite -= 2; // Null terminator.\n\n      var startPtr = outPtr;\n      var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;\n\n      for (var i = 0; i < numCharsToWrite; ++i) {\n        // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.\n        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n\n        HEAP16[outPtr >> 1] = codeUnit;\n        outPtr += 2;\n      } // Null-terminate the pointer to the HEAP.\n\n\n      HEAP16[outPtr >> 1] = 0;\n      return outPtr - startPtr;\n    } // Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\n\n    function lengthBytesUTF16(str) {\n      return str.length * 2;\n    }\n\n    function UTF32ToString(ptr) {\n      assert(ptr % 4 == 0, 'Pointer passed to UTF32ToString must be aligned to four bytes!');\n      var i = 0;\n      var str = '';\n\n      while (1) {\n        var utf32 = HEAP32[ptr + i * 4 >> 2];\n        if (utf32 == 0) return str;\n        ++i; // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n\n        if (utf32 >= 0x10000) {\n          var ch = utf32 - 0x10000;\n          str += String.fromCharCode(0xD800 | ch >> 10, 0xDC00 | ch & 0x3FF);\n        } else {\n          str += String.fromCharCode(utf32);\n        }\n      }\n    } // Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',\n    // null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.\n    // Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.\n    // Parameters:\n    //   str: the Javascript string to copy.\n    //   outPtr: Byte address in Emscripten HEAP where to write the string to.\n    //   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null\n    //                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.\n    //                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.\n    // Returns the number of bytes written, EXCLUDING the null terminator.\n\n\n    function stringToUTF32(str, outPtr, maxBytesToWrite) {\n      assert(outPtr % 4 == 0, 'Pointer passed to stringToUTF32 must be aligned to four bytes!');\n      assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!'); // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.\n\n      if (maxBytesToWrite === undefined) {\n        maxBytesToWrite = 0x7FFFFFFF;\n      }\n\n      if (maxBytesToWrite < 4) return 0;\n      var startPtr = outPtr;\n      var endPtr = startPtr + maxBytesToWrite - 4;\n\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var codeUnit = str.charCodeAt(i); // possibly a lead surrogate\n\n        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {\n          var trailSurrogate = str.charCodeAt(++i);\n          codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | trailSurrogate & 0x3FF;\n        }\n\n        HEAP32[outPtr >> 2] = codeUnit;\n        outPtr += 4;\n        if (outPtr + 4 > endPtr) break;\n      } // Null-terminate the pointer to the HEAP.\n\n\n      HEAP32[outPtr >> 2] = 0;\n      return outPtr - startPtr;\n    } // Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.\n\n\n    function lengthBytesUTF32(str) {\n      var len = 0;\n\n      for (var i = 0; i < str.length; ++i) {\n        // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.\n        // See http://unicode.org/faq/utf_bom.html#utf16-3\n        var codeUnit = str.charCodeAt(i);\n        if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.\n\n        len += 4;\n      }\n\n      return len;\n    } // Allocate heap space for a JS string, and write it there.\n    // It is the responsibility of the caller to free() that memory.\n\n\n    function allocateUTF8(str) {\n      var size = lengthBytesUTF8(str) + 1;\n\n      var ret = _malloc(size);\n\n      if (ret) stringToUTF8Array(str, HEAP8, ret, size);\n      return ret;\n    } // Allocate stack space for a JS string, and write it there.\n\n\n    function allocateUTF8OnStack(str) {\n      var size = lengthBytesUTF8(str) + 1;\n      var ret = stackAlloc(size);\n      stringToUTF8Array(str, HEAP8, ret, size);\n      return ret;\n    }\n\n    function demangle(func) {\n      warnOnce('warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');\n      return func;\n    }\n\n    function demangleAll(text) {\n      var regex = /__Z[\\w\\d_]+/g;\n      return text.replace(regex, function (x) {\n        var y = demangle(x);\n        return x === y ? x : y + ' [' + x + ']';\n      });\n    }\n\n    function jsStackTrace() {\n      var err = new Error();\n\n      if (!err.stack) {\n        // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,\n        // so try that as a special-case.\n        try {\n          throw new Error(0);\n        } catch (e) {\n          err = e;\n        }\n\n        if (!err.stack) {\n          return '(no stack trace available)';\n        }\n      }\n\n      return err.stack.toString();\n    }\n\n    function stackTrace() {\n      var js = jsStackTrace();\n      if (Module['extraStackTrace']) js += '\\n' + Module['extraStackTrace']();\n      return demangleAll(js);\n    } // Memory management\n\n\n    var PAGE_SIZE = 16384;\n    var WASM_PAGE_SIZE = 65536;\n    var ASMJS_PAGE_SIZE = 16777216;\n    var MIN_TOTAL_MEMORY = 16777216;\n\n    function alignUp(x, multiple) {\n      if (x % multiple > 0) {\n        x += multiple - x % multiple;\n      }\n\n      return x;\n    }\n\n    var HEAP,\n    /** @type {ArrayBuffer} */\n    buffer,\n    /** @type {Int8Array} */\n    HEAP8,\n    /** @type {Uint8Array} */\n    HEAPU8,\n    /** @type {Int16Array} */\n    HEAP16,\n    /** @type {Uint16Array} */\n    HEAPU16,\n    /** @type {Int32Array} */\n    HEAP32,\n    /** @type {Uint32Array} */\n    HEAPU32,\n    /** @type {Float32Array} */\n    HEAPF32,\n    /** @type {Float64Array} */\n    HEAPF64;\n\n    function updateGlobalBuffer(buf) {\n      Module['buffer'] = buffer = buf;\n    }\n\n    function updateGlobalBufferViews() {\n      Module['HEAP8'] = HEAP8 = new Int8Array(buffer);\n      Module['HEAP16'] = HEAP16 = new Int16Array(buffer);\n      Module['HEAP32'] = HEAP32 = new Int32Array(buffer);\n      Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);\n      Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);\n      Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);\n      Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);\n      Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);\n    }\n\n    var STATIC_BASE, STATICTOP, staticSealed; // static area\n\n    var STACK_BASE, STACKTOP, STACK_MAX; // stack area\n\n    var DYNAMIC_BASE, DYNAMICTOP_PTR; // dynamic area handled by sbrk\n\n    STATIC_BASE = STATICTOP = STACK_BASE = STACKTOP = STACK_MAX = DYNAMIC_BASE = DYNAMICTOP_PTR = 0;\n    staticSealed = false; // Initializes the stack cookie. Called at the startup of main and at the startup of each thread in pthreads mode.\n\n    function writeStackCookie() {\n      assert((STACK_MAX & 3) == 0);\n      HEAPU32[(STACK_MAX >> 2) - 1] = 0x02135467;\n      HEAPU32[(STACK_MAX >> 2) - 2] = 0x89BACDFE;\n    }\n\n    function checkStackCookie() {\n      if (HEAPU32[(STACK_MAX >> 2) - 1] != 0x02135467 || HEAPU32[(STACK_MAX >> 2) - 2] != 0x89BACDFE) {\n        abort('Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x02135467, but received 0x' + HEAPU32[(STACK_MAX >> 2) - 2].toString(16) + ' ' + HEAPU32[(STACK_MAX >> 2) - 1].toString(16));\n      } // Also test the global address 0 for integrity. This check is not compatible with SAFE_SPLIT_MEMORY though, since that mode already tests all address 0 accesses on its own.\n\n\n      if (HEAP32[0] !== 0x63736d65\n      /* 'emsc' */\n      ) throw 'Runtime error: The application has corrupted its heap memory area (address zero)!';\n    }\n\n    function abortStackOverflow(allocSize) {\n      abort('Stack overflow! Attempted to allocate ' + allocSize + ' bytes on the stack, but stack has only ' + (STACK_MAX - _stackSave() + allocSize) + ' bytes available!');\n    }\n\n    function abortOnCannotGrowMemory() {\n      abort('Cannot enlarge memory arrays. Either (1) compile with  -s TOTAL_MEMORY=X  with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with  -s ALLOW_MEMORY_GROWTH=1  which allows increasing the size at runtime, or (3) if you want malloc to return NULL (0) instead of this abort, compile with  -s ABORTING_MALLOC=0 ');\n    }\n\n    if (!Module['reallocBuffer']) Module['reallocBuffer'] = function (size) {\n      var ret;\n\n      try {\n        var oldHEAP8 = HEAP8;\n        ret = new ArrayBuffer(size);\n        var temp = new Int8Array(ret);\n        temp.set(oldHEAP8);\n      } catch (e) {\n        return false;\n      }\n\n      var success = _emscripten_replace_memory(ret);\n\n      if (!success) return false;\n      return ret;\n    };\n\n    function enlargeMemory() {\n      // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.\n      assert(HEAP32[DYNAMICTOP_PTR >> 2] > TOTAL_MEMORY); // This function should only ever be called after the ceiling of the dynamic heap has already been bumped to exceed the current total size of the asm.js heap.\n\n      var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\n\n      var LIMIT = 2147483648 - PAGE_MULTIPLE; // We can do one page short of 2GB as theoretical maximum.\n\n      if (HEAP32[DYNAMICTOP_PTR >> 2] > LIMIT) {\n        err('Cannot enlarge memory, asked to go up to ' + HEAP32[DYNAMICTOP_PTR >> 2] + ' bytes, but the limit is ' + LIMIT + ' bytes!');\n        return false;\n      }\n\n      var OLD_TOTAL_MEMORY = TOTAL_MEMORY;\n      TOTAL_MEMORY = Math.max(TOTAL_MEMORY, MIN_TOTAL_MEMORY); // So the loop below will not be infinite, and minimum asm.js memory size is 16MB.\n\n      while (TOTAL_MEMORY < HEAP32[DYNAMICTOP_PTR >> 2]) {\n        // Keep incrementing the heap size as long as it's less than what is requested.\n        if (TOTAL_MEMORY <= 536870912) {\n          TOTAL_MEMORY = alignUp(2 * TOTAL_MEMORY, PAGE_MULTIPLE); // Simple heuristic: double until 1GB...\n        } else {\n          // ..., but after that, add smaller increments towards 2GB, which we cannot reach\n          TOTAL_MEMORY = Math.min(alignUp((3 * TOTAL_MEMORY + 2147483648) / 4, PAGE_MULTIPLE), LIMIT);\n\n          if (TOTAL_MEMORY === OLD_TOTAL_MEMORY) {\n            warnOnce('Cannot ask for more memory since we reached the practical limit in browsers (which is just below 2GB), so the request would have failed. Requesting only ' + TOTAL_MEMORY);\n          }\n        }\n      }\n\n      var start = Date.now();\n      var replacement = Module['reallocBuffer'](TOTAL_MEMORY);\n\n      if (!replacement || replacement.byteLength != TOTAL_MEMORY) {\n        err('Failed to grow the heap from ' + OLD_TOTAL_MEMORY + ' bytes to ' + TOTAL_MEMORY + ' bytes, not enough memory!');\n\n        if (replacement) {\n          err('Expected to get back a buffer of size ' + TOTAL_MEMORY + ' bytes, but instead got back a buffer of size ' + replacement.byteLength);\n        } // restore the state to before this call, we failed\n\n\n        TOTAL_MEMORY = OLD_TOTAL_MEMORY;\n        return false;\n      } // everything worked\n\n\n      updateGlobalBuffer(replacement);\n      updateGlobalBufferViews();\n\n      if (!Module[\"usingWasm\"]) {\n        err('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);\n      }\n\n      return true;\n    }\n\n    var byteLength;\n\n    try {\n      byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);\n      byteLength(new ArrayBuffer(4)); // can fail on older ie\n    } catch (e) {\n      // can fail on older node/v8\n      byteLength = function byteLength(buffer) {\n        return buffer.byteLength;\n      };\n    }\n\n    var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;\n    var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;\n    if (TOTAL_MEMORY < TOTAL_STACK) err('TOTAL_MEMORY should be larger than TOTAL_STACK, was ' + TOTAL_MEMORY + '! (TOTAL_STACK=' + TOTAL_STACK + ')'); // Initialize the runtime's memory\n    // check for full engine support (use string 'subarray' to avoid closure compiler confusion)\n\n    assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined, 'JS engine does not provide full typed array support'); // Use a provided buffer, if there is one, or else allocate a new one\n\n    if (Module['buffer']) {\n      buffer = Module['buffer'];\n      assert(buffer.byteLength === TOTAL_MEMORY, 'provided buffer should be ' + TOTAL_MEMORY + ' bytes, but it is ' + buffer.byteLength);\n    } else {\n      // Use a WebAssembly memory where available\n      if (typeof WebAssembly === 'object' && typeof WebAssembly.Memory === 'function') {\n        assert(TOTAL_MEMORY % WASM_PAGE_SIZE === 0);\n        Module['wasmMemory'] = new WebAssembly.Memory({\n          'initial': TOTAL_MEMORY / WASM_PAGE_SIZE\n        });\n        buffer = Module['wasmMemory'].buffer;\n      } else {\n        buffer = new ArrayBuffer(TOTAL_MEMORY);\n      }\n\n      assert(buffer.byteLength === TOTAL_MEMORY);\n      Module['buffer'] = buffer;\n    }\n\n    updateGlobalBufferViews();\n\n    function getTotalMemory() {\n      return TOTAL_MEMORY;\n    } // Endianness check (note: assumes compiler arch was little-endian)\n\n\n    HEAP32[0] = 0x63736d65;\n    /* 'emsc' */\n\n    HEAP16[1] = 0x6373;\n    if (HEAPU8[2] !== 0x73 || HEAPU8[3] !== 0x63) throw 'Runtime error: expected the system to be little-endian!';\n\n    function callRuntimeCallbacks(callbacks) {\n      while (callbacks.length > 0) {\n        var callback = callbacks.shift();\n\n        if (typeof callback == 'function') {\n          callback();\n          continue;\n        }\n\n        var func = callback.func;\n\n        if (typeof func === 'number') {\n          if (callback.arg === undefined) {\n            Module['dynCall_v'](func);\n          } else {\n            Module['dynCall_vi'](func, callback.arg);\n          }\n        } else {\n          func(callback.arg === undefined ? null : callback.arg);\n        }\n      }\n    }\n\n    var __ATPRERUN__ = []; // functions called before the runtime is initialized\n\n    var __ATINIT__ = []; // functions called during startup\n\n    var __ATMAIN__ = []; // functions called when main() is to be run\n\n    var __ATEXIT__ = []; // functions called during shutdown\n\n    var __ATPOSTRUN__ = []; // functions called after the main() is called\n\n    var runtimeInitialized = false;\n    var runtimeExited = false;\n\n    function preRun() {\n      // compatibility - merge in anything from Module['preRun'] at this time\n      if (Module['preRun']) {\n        if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];\n\n        while (Module['preRun'].length) {\n          addOnPreRun(Module['preRun'].shift());\n        }\n      }\n\n      callRuntimeCallbacks(__ATPRERUN__);\n    }\n\n    function ensureInitRuntime() {\n      checkStackCookie();\n      if (runtimeInitialized) return;\n      runtimeInitialized = true;\n      callRuntimeCallbacks(__ATINIT__);\n    }\n\n    function preMain() {\n      checkStackCookie();\n      callRuntimeCallbacks(__ATMAIN__);\n    }\n\n    function exitRuntime() {\n      checkStackCookie();\n      callRuntimeCallbacks(__ATEXIT__);\n      runtimeExited = true;\n    }\n\n    function postRun() {\n      checkStackCookie(); // compatibility - merge in anything from Module['postRun'] at this time\n\n      if (Module['postRun']) {\n        if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];\n\n        while (Module['postRun'].length) {\n          addOnPostRun(Module['postRun'].shift());\n        }\n      }\n\n      callRuntimeCallbacks(__ATPOSTRUN__);\n    }\n\n    function addOnPreRun(cb) {\n      __ATPRERUN__.unshift(cb);\n    }\n\n    function addOnInit(cb) {\n      __ATINIT__.unshift(cb);\n    }\n\n    function addOnPreMain(cb) {\n      __ATMAIN__.unshift(cb);\n    }\n\n    function addOnExit(cb) {\n      __ATEXIT__.unshift(cb);\n    }\n\n    function addOnPostRun(cb) {\n      __ATPOSTRUN__.unshift(cb);\n    } // Deprecated: This function should not be called because it is unsafe and does not provide\n    // a maximum length limit of how many bytes it is allowed to write. Prefer calling the\n    // function stringToUTF8Array() instead, which takes in a maximum length that can be used\n    // to be secure from out of bounds writes.\n\n    /** @deprecated */\n\n\n    function writeStringToMemory(string, buffer, dontAddNull) {\n      warnOnce('writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!');\n      var\n      /** @type {number} */\n      lastChar,\n      /** @type {number} */\n      end;\n\n      if (dontAddNull) {\n        // stringToUTF8Array always appends null. If we don't want to do that, remember the\n        // character that existed at the location where the null will be placed, and restore\n        // that after the write (below).\n        end = buffer + lengthBytesUTF8(string);\n        lastChar = HEAP8[end];\n      }\n\n      stringToUTF8(string, buffer, Infinity);\n      if (dontAddNull) HEAP8[end] = lastChar; // Restore the value under the null character.\n    }\n\n    function writeArrayToMemory(array, buffer) {\n      assert(array.length >= 0, 'writeArrayToMemory array must have a length (should be an array or typed array)');\n      HEAP8.set(array, buffer);\n    }\n\n    function writeAsciiToMemory(str, buffer, dontAddNull) {\n      for (var i = 0; i < str.length; ++i) {\n        assert(str.charCodeAt(i) === str.charCodeAt(i) & 0xff);\n        HEAP8[buffer++ >> 0] = str.charCodeAt(i);\n      } // Null-terminate the pointer to the HEAP.\n\n\n      if (!dontAddNull) HEAP8[buffer >> 0] = 0;\n    }\n\n    function unSign(value, bits, ignore) {\n      if (value >= 0) {\n        return value;\n      }\n\n      return bits <= 32 ? 2 * Math.abs(1 << bits - 1) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts\n      : Math.pow(2, bits) + value;\n    }\n\n    function reSign(value, bits, ignore) {\n      if (value <= 0) {\n        return value;\n      }\n\n      var half = bits <= 32 ? Math.abs(1 << bits - 1) // abs is needed if bits == 32\n      : Math.pow(2, bits - 1);\n\n      if (value >= half && (bits <= 32 || value > half)) {\n        // for huge values, we can hit the precision limit and always get true here. so don't do that\n        // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors\n        // TODO: In i64 mode 1, resign the two parts separately and safely\n        value = -2 * half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts\n      }\n\n      return value;\n    }\n\n    assert(Math['imul'] && Math['fround'] && Math['clz32'] && Math['trunc'], 'this is a legacy browser, build with LEGACY_VM_SUPPORT');\n    var Math_abs = Math.abs;\n    var Math_cos = Math.cos;\n    var Math_sin = Math.sin;\n    var Math_tan = Math.tan;\n    var Math_acos = Math.acos;\n    var Math_asin = Math.asin;\n    var Math_atan = Math.atan;\n    var Math_atan2 = Math.atan2;\n    var Math_exp = Math.exp;\n    var Math_log = Math.log;\n    var Math_sqrt = Math.sqrt;\n    var Math_ceil = Math.ceil;\n    var Math_floor = Math.floor;\n    var Math_pow = Math.pow;\n    var Math_imul = Math.imul;\n    var Math_fround = Math.fround;\n    var Math_round = Math.round;\n    var Math_min = Math.min;\n    var Math_max = Math.max;\n    var Math_clz32 = Math.clz32;\n    var Math_trunc = Math.trunc; // A counter of dependencies for calling run(). If we need to\n    // do asynchronous work before running, increment this and\n    // decrement it. Incrementing must happen in a place like\n    // Module.preRun (used by emcc to add file preloading).\n    // Note that you can add dependencies in preRun, even though\n    // it happens right before run - run will be postponed until\n    // the dependencies are met.\n\n    var runDependencies = 0;\n    var runDependencyWatcher = null;\n    var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled\n\n    var runDependencyTracking = {};\n\n    function getUniqueRunDependency(id) {\n      var orig = id;\n\n      while (1) {\n        if (!runDependencyTracking[id]) return id;\n        id = orig + Math.random();\n      }\n\n      return id;\n    }\n\n    function addRunDependency(id) {\n      runDependencies++;\n\n      if (Module['monitorRunDependencies']) {\n        Module['monitorRunDependencies'](runDependencies);\n      }\n\n      if (id) {\n        assert(!runDependencyTracking[id]);\n        runDependencyTracking[id] = 1;\n\n        if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {\n          // Check for missing dependencies every few seconds\n          runDependencyWatcher = setInterval(function () {\n            if (ABORT) {\n              clearInterval(runDependencyWatcher);\n              runDependencyWatcher = null;\n              return;\n            }\n\n            var shown = false;\n\n            for (var dep in runDependencyTracking) {\n              if (!shown) {\n                shown = true;\n                err('still waiting on run dependencies:');\n              }\n\n              err('dependency: ' + dep);\n            }\n\n            if (shown) {\n              err('(end of list)');\n            }\n          }, 10000);\n        }\n      } else {\n        err('warning: run dependency added without ID');\n      }\n    }\n\n    function removeRunDependency(id) {\n      runDependencies--;\n\n      if (Module['monitorRunDependencies']) {\n        Module['monitorRunDependencies'](runDependencies);\n      }\n\n      if (id) {\n        assert(runDependencyTracking[id]);\n        delete runDependencyTracking[id];\n      } else {\n        err('warning: run dependency removed without ID');\n      }\n\n      if (runDependencies == 0) {\n        if (runDependencyWatcher !== null) {\n          clearInterval(runDependencyWatcher);\n          runDependencyWatcher = null;\n        }\n\n        if (dependenciesFulfilled) {\n          var callback = dependenciesFulfilled;\n          dependenciesFulfilled = null;\n          callback(); // can add another dependenciesFulfilled\n        }\n      }\n    }\n\n    Module[\"preloadedImages\"] = {}; // maps url to image data\n\n    Module[\"preloadedAudios\"] = {}; // maps url to audio data\n\n    var memoryInitializer = null;\n    var\n    /* show errors on likely calls to FS when it was not included */\n    FS = {\n      error: function error() {\n        abort('Filesystem support (FS) was not included. The problem is that you are using files from JS, but files were not used from C/C++, so filesystem support was not auto-included. You can force-include filesystem support with  -s FORCE_FILESYSTEM=1');\n      },\n      init: function init() {\n        FS.error();\n      },\n      createDataFile: function createDataFile() {\n        FS.error();\n      },\n      createPreloadedFile: function createPreloadedFile() {\n        FS.error();\n      },\n      createLazyFile: function createLazyFile() {\n        FS.error();\n      },\n      open: function open() {\n        FS.error();\n      },\n      mkdev: function mkdev() {\n        FS.error();\n      },\n      registerDevice: function registerDevice() {\n        FS.error();\n      },\n      analyzePath: function analyzePath() {\n        FS.error();\n      },\n      loadFilesFromDB: function loadFilesFromDB() {\n        FS.error();\n      },\n      ErrnoError: function ErrnoError() {\n        FS.error();\n      }\n    };\n    Module['FS_createDataFile'] = FS.createDataFile;\n    Module['FS_createPreloadedFile'] = FS.createPreloadedFile; // Copyright 2017 The Emscripten Authors.  All rights reserved.\n    // Emscripten is available under two separate licenses, the MIT license and the\n    // University of Illinois/NCSA Open Source License.  Both these licenses can be\n    // found in the LICENSE file.\n    // Prefix of data URIs emitted by SINGLE_FILE and related options.\n\n    var dataURIPrefix = 'data:application/octet-stream;base64,'; // Indicates whether filename is a base64 data URI.\n\n    function isDataURI(filename) {\n      return String.prototype.startsWith ? filename.startsWith(dataURIPrefix) : filename.indexOf(dataURIPrefix) === 0;\n    }\n\n    function integrateWasmJS() {\n      // wasm.js has several methods for creating the compiled code module here:\n      //  * 'native-wasm' : use native WebAssembly support in the browser\n      //  * 'interpret-s-expr': load s-expression code from a .wast and interpret\n      //  * 'interpret-binary': load binary wasm and interpret\n      //  * 'interpret-asm2wasm': load asm.js code, translate to wasm, and interpret\n      //  * 'asmjs': no wasm, just load the asm.js code and use that (good for testing)\n      // The method is set at compile time (BINARYEN_METHOD)\n      // The method can be a comma-separated list, in which case, we will try the\n      // options one by one. Some of them can fail gracefully, and then we can try\n      // the next.\n      // inputs\n      var method = 'native-wasm';\n      var wasmTextFile = 'greycat.wast';\n      var wasmBinaryFile = 'greycat.wasm';\n      var asmjsCodeFile = 'greycat.temp.asm.js';\n\n      if (!isDataURI(wasmTextFile)) {\n        wasmTextFile = locateFile(wasmTextFile);\n      }\n\n      if (!isDataURI(wasmBinaryFile)) {\n        wasmBinaryFile = locateFile(wasmBinaryFile);\n      }\n\n      if (!isDataURI(asmjsCodeFile)) {\n        asmjsCodeFile = locateFile(asmjsCodeFile);\n      } // utilities\n\n\n      var wasmPageSize = 64 * 1024;\n      var info = {\n        'global': null,\n        'env': null,\n        'asm2wasm': asm2wasmImports,\n        'parent': Module // Module inside wasm-js.cpp refers to wasm-js.cpp; this allows access to the outside program.\n\n      };\n      var exports = null;\n\n      function mergeMemory(newBuffer) {\n        // The wasm instance creates its memory. But static init code might have written to\n        // buffer already, including the mem init file, and we must copy it over in a proper merge.\n        // TODO: avoid this copy, by avoiding such static init writes\n        // TODO: in shorter term, just copy up to the last static init write\n        var oldBuffer = Module['buffer'];\n\n        if (newBuffer.byteLength < oldBuffer.byteLength) {\n          err('the new buffer in mergeMemory is smaller than the previous one. in native wasm, we should grow memory here');\n        }\n\n        var oldView = new Int8Array(oldBuffer);\n        var newView = new Int8Array(newBuffer);\n        newView.set(oldView);\n        updateGlobalBuffer(newBuffer);\n        updateGlobalBufferViews();\n      }\n\n      function fixImports(imports) {\n        return imports;\n      }\n\n      function getBinary() {\n        try {\n          if (Module['wasmBinary']) {\n            return new Uint8Array(Module['wasmBinary']);\n          }\n\n          if (Module['readBinary']) {\n            return Module['readBinary'](wasmBinaryFile);\n          } else {\n            throw \"both async and sync fetching of the wasm failed\";\n          }\n        } catch (err) {\n          abort(err);\n        }\n      }\n\n      function getBinaryPromise() {\n        // if we don't have the binary yet, and have the Fetch api, use that\n        // in some environments, like Electron's render process, Fetch api may be present, but have a different context than expected, let's only use it on the Web\n        if (!Module['wasmBinary'] && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) && typeof fetch === 'function') {\n          return fetch(wasmBinaryFile, {\n            credentials: 'same-origin'\n          }).then(function (response) {\n            if (!response['ok']) {\n              throw \"failed to load wasm binary file at '\" + wasmBinaryFile + \"'\";\n            }\n\n            return response['arrayBuffer']();\n          }).catch(function () {\n            return getBinary();\n          });\n        } // Otherwise, getBinary should be able to get it synchronously\n\n\n        return new Promise(function (resolve, reject) {\n          resolve(getBinary());\n        });\n      } // do-method functions\n\n\n      function doNativeWasm(global, env, providedBuffer) {\n        if (typeof WebAssembly !== 'object') {\n          // when the method is just native-wasm, our error message can be very specific\n          abort('No WebAssembly support found. Build with -s WASM=0 to target JavaScript instead.');\n          err('no native wasm support detected');\n          return false;\n        } // prepare memory import\n\n\n        if (!(Module['wasmMemory'] instanceof WebAssembly.Memory)) {\n          err('no native wasm Memory in use');\n          return false;\n        }\n\n        env['memory'] = Module['wasmMemory']; // Load the wasm module and create an instance of using native support in the JS engine.\n\n        info['global'] = {\n          'NaN': NaN,\n          'Infinity': Infinity\n        };\n        info['global.Math'] = Math;\n        info['env'] = env; // handle a generated wasm instance, receiving its exports and\n        // performing other necessary setup\n\n        function receiveInstance(instance, module) {\n          exports = instance.exports;\n          if (exports.memory) mergeMemory(exports.memory);\n          Module['asm'] = exports;\n          Module[\"usingWasm\"] = true;\n          removeRunDependency('wasm-instantiate');\n        }\n\n        addRunDependency('wasm-instantiate'); // User shell pages can write their own Module.instantiateWasm = function(imports, successCallback) callback\n        // to manually instantiate the Wasm module themselves. This allows pages to run the instantiation parallel\n        // to any other async startup actions they are performing.\n\n        if (Module['instantiateWasm']) {\n          try {\n            return Module['instantiateWasm'](info, receiveInstance);\n          } catch (e) {\n            err('Module.instantiateWasm callback failed with error: ' + e);\n            return false;\n          }\n        } // Async compilation can be confusing when an error on the page overwrites Module\n        // (for example, if the order of elements is wrong, and the one defining Module is\n        // later), so we save Module and check it later.\n\n\n        var trueModule = Module;\n\n        function receiveInstantiatedSource(output) {\n          // 'output' is a WebAssemblyInstantiatedSource object which has both the module and instance.\n          // receiveInstance() will swap in the exports (to Module.asm) so they can be called\n          assert(Module === trueModule, 'the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?');\n          trueModule = null;\n          receiveInstance(output['instance'], output['module']);\n        }\n\n        function instantiateArrayBuffer(receiver) {\n          getBinaryPromise().then(function (binary) {\n            return WebAssembly.instantiate(binary, info);\n          }).then(receiver, function (reason) {\n            err('failed to asynchronously prepare wasm: ' + reason);\n            abort(reason);\n          });\n        } // Prefer streaming instantiation if available.\n\n\n        if (!Module['wasmBinary'] && typeof WebAssembly.instantiateStreaming === 'function' && !isDataURI(wasmBinaryFile) && typeof fetch === 'function') {\n          WebAssembly.instantiateStreaming(fetch(wasmBinaryFile, {\n            credentials: 'same-origin'\n          }), info).then(receiveInstantiatedSource, function (reason) {\n            // We expect the most common failure cause to be a bad MIME type for the binary,\n            // in which case falling back to ArrayBuffer instantiation should work.\n            err('wasm streaming compile failed: ' + reason);\n            err('falling back to ArrayBuffer instantiation');\n            instantiateArrayBuffer(receiveInstantiatedSource);\n          });\n        } else {\n          instantiateArrayBuffer(receiveInstantiatedSource);\n        }\n\n        return {}; // no exports yet; we'll fill them in later\n      } // We may have a preloaded value in Module.asm, save it\n\n\n      Module['asmPreload'] = Module['asm']; // Memory growth integration code\n\n      var asmjsReallocBuffer = Module['reallocBuffer'];\n\n      var wasmReallocBuffer = function wasmReallocBuffer(size) {\n        var PAGE_MULTIPLE = Module[\"usingWasm\"] ? WASM_PAGE_SIZE : ASMJS_PAGE_SIZE; // In wasm, heap size must be a multiple of 64KB. In asm.js, they need to be multiples of 16MB.\n\n        size = alignUp(size, PAGE_MULTIPLE); // round up to wasm page size\n\n        var old = Module['buffer'];\n        var oldSize = old.byteLength;\n\n        if (Module[\"usingWasm\"]) {\n          // native wasm support\n          try {\n            var result = Module['wasmMemory'].grow((size - oldSize) / wasmPageSize); // .grow() takes a delta compared to the previous size\n\n            if (result !== (-1 | 0)) {\n              // success in native wasm memory growth, get the buffer from the memory\n              return Module['buffer'] = Module['wasmMemory'].buffer;\n            } else {\n              return null;\n            }\n          } catch (e) {\n            console.error('Module.reallocBuffer: Attempted to grow from ' + oldSize + ' bytes to ' + size + ' bytes, but got error: ' + e);\n            return null;\n          }\n        }\n      };\n\n      Module['reallocBuffer'] = function (size) {\n        if (finalMethod === 'asmjs') {\n          return asmjsReallocBuffer(size);\n        } else {\n          return wasmReallocBuffer(size);\n        }\n      }; // we may try more than one; this is the final one, that worked and we are using\n\n\n      var finalMethod = ''; // Provide an \"asm.js function\" for the application, called to \"link\" the asm.js module. We instantiate\n      // the wasm module at that time, and it receives imports and provides exports and so forth, the app\n      // doesn't need to care that it is wasm or olyfilled wasm or asm.js.\n\n      Module['asm'] = function (global, env, providedBuffer) {\n        env = fixImports(env); // import table\n\n        if (!env['table']) {\n          var TABLE_SIZE = Module['wasmTableSize'];\n          if (TABLE_SIZE === undefined) TABLE_SIZE = 1024; // works in binaryen interpreter at least\n\n          var MAX_TABLE_SIZE = Module['wasmMaxTableSize'];\n\n          if (typeof WebAssembly === 'object' && typeof WebAssembly.Table === 'function') {\n            if (MAX_TABLE_SIZE !== undefined) {\n              env['table'] = new WebAssembly.Table({\n                'initial': TABLE_SIZE,\n                'maximum': MAX_TABLE_SIZE,\n                'element': 'anyfunc'\n              });\n            } else {\n              env['table'] = new WebAssembly.Table({\n                'initial': TABLE_SIZE,\n                element: 'anyfunc'\n              });\n            }\n          } else {\n            env['table'] = new Array(TABLE_SIZE); // works in binaryen interpreter at least\n          }\n\n          Module['wasmTable'] = env['table'];\n        }\n\n        if (!env['memoryBase']) {\n          env['memoryBase'] = Module['STATIC_BASE']; // tell the memory segments where to place themselves\n        }\n\n        if (!env['tableBase']) {\n          env['tableBase'] = 0; // table starts at 0 by default, in dynamic linking this will change\n        } // try the methods. each should return the exports if it succeeded\n\n\n        var exports;\n        exports = doNativeWasm(global, env, providedBuffer);\n        assert(exports, 'no binaryen method succeeded. consider enabling more options, like interpreting, if you want that: http://kripken.github.io/emscripten-site/docs/compiling/WebAssembly.html#binaryen-methods');\n        return exports;\n      };\n\n      var methodHandler = Module['asm']; // note our method handler, as we may modify Module['asm'] later\n    }\n\n    integrateWasmJS(); // === Body ===\n\n    var ASM_CONSTS = [function ($0) {\n      delete GreyCat.elements[$0];\n    }, function ($0) {\n      GreyCat.Logger.debug(GreyCat._module.Pointer_stringify($0));\n    }, function ($0) {\n      GreyCat.Logger.info(GreyCat._module.Pointer_stringify($0));\n    }, function ($0) {\n      GreyCat.Logger.error(GreyCat._module.Pointer_stringify($0));\n    }, function ($0) {\n      GreyCat.Logger.warn(GreyCat._module.Pointer_stringify($0));\n    }, function ($0) {\n      GreyCat.Logger.log(GreyCat._module.Pointer_stringify($0));\n    }, function ($0, $1) {\n      GreyCat.elements[$0](GreyCat.elements[$1]);\n    }, function ($0, $1) {\n      GreyCat.elements[$0].start(GreyCat.elements[$1]);\n    }, function ($0, $1, $2, $3) {\n      GreyCat.newWebSocketClient($0, $1, $2, $3);\n    }, function ($0) {\n      GreyCat.destroyWebSocketClient($0);\n    }, function ($0, $1, $2) {\n      GreyCat.webSocketClientSend($0, $1, $2);\n    }];\n\n    function _emscripten_asm_const_ii(code, a0) {\n      return ASM_CONSTS[code](a0);\n    }\n\n    function _emscripten_asm_const_iiiii(code, a0, a1, a2, a3) {\n      return ASM_CONSTS[code](a0, a1, a2, a3);\n    }\n\n    function _emscripten_asm_const_iii(code, a0, a1) {\n      return ASM_CONSTS[code](a0, a1);\n    }\n\n    function _emscripten_asm_const_iiii(code, a0, a1, a2) {\n      return ASM_CONSTS[code](a0, a1, a2);\n    }\n\n    STATIC_BASE = GLOBAL_BASE;\n    STATICTOP = STATIC_BASE + 13760;\n    /* global initializers */\n\n    __ATINIT__.push();\n\n    var STATIC_BUMP = 13760;\n    Module[\"STATIC_BASE\"] = STATIC_BASE;\n    Module[\"STATIC_BUMP\"] = STATIC_BUMP;\n    /* no memory initializer */\n\n    var tempDoublePtr = STATICTOP;\n    STATICTOP += 16;\n    assert(tempDoublePtr % 8 == 0);\n\n    function copyTempFloat(ptr) {\n      // functions, because inlining this code increases code size too much\n      HEAP8[tempDoublePtr] = HEAP8[ptr];\n      HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];\n      HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];\n      HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];\n    }\n\n    function copyTempDouble(ptr) {\n      HEAP8[tempDoublePtr] = HEAP8[ptr];\n      HEAP8[tempDoublePtr + 1] = HEAP8[ptr + 1];\n      HEAP8[tempDoublePtr + 2] = HEAP8[ptr + 2];\n      HEAP8[tempDoublePtr + 3] = HEAP8[ptr + 3];\n      HEAP8[tempDoublePtr + 4] = HEAP8[ptr + 4];\n      HEAP8[tempDoublePtr + 5] = HEAP8[ptr + 5];\n      HEAP8[tempDoublePtr + 6] = HEAP8[ptr + 6];\n      HEAP8[tempDoublePtr + 7] = HEAP8[ptr + 7];\n    } // {{PRE_LIBRARY}}\n\n\n    function ___assert_fail(condition, filename, line, func) {\n      abort('Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function']);\n    }\n\n    function ___lock() {}\n\n    var SYSCALLS = {\n      varargs: 0,\n      get: function get(varargs) {\n        SYSCALLS.varargs += 4;\n        var ret = HEAP32[SYSCALLS.varargs - 4 >> 2];\n        return ret;\n      },\n      getStr: function getStr() {\n        var ret = Pointer_stringify(SYSCALLS.get());\n        return ret;\n      },\n      get64: function get64() {\n        var low = SYSCALLS.get(),\n            high = SYSCALLS.get();\n        if (low >= 0) assert(high === 0);else assert(high === -1);\n        return low;\n      },\n      getZero: function getZero() {\n        assert(SYSCALLS.get() === 0);\n      }\n    };\n\n    function ___syscall140(which, varargs) {\n      SYSCALLS.varargs = varargs;\n\n      try {\n        // llseek\n        var stream = SYSCALLS.getStreamFromFD(),\n            offset_high = SYSCALLS.get(),\n            offset_low = SYSCALLS.get(),\n            result = SYSCALLS.get(),\n            whence = SYSCALLS.get(); // NOTE: offset_high is unused - Emscripten's off_t is 32-bit\n\n        var offset = offset_low;\n        FS.llseek(stream, offset, whence);\n        HEAP32[result >> 2] = stream.position;\n        if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state\n\n        return 0;\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n        return -e.errno;\n      }\n    }\n\n    function flush_NO_FILESYSTEM() {\n      // flush anything remaining in the buffers during shutdown\n      var fflush = Module[\"_fflush\"];\n      if (fflush) fflush(0);\n      var printChar = ___syscall146.printChar;\n      if (!printChar) return;\n      var buffers = ___syscall146.buffers;\n      if (buffers[1].length) printChar(1, 10);\n      if (buffers[2].length) printChar(2, 10);\n    }\n\n    function ___syscall146(which, varargs) {\n      SYSCALLS.varargs = varargs;\n\n      try {\n        // writev\n        // hack to support printf in FILESYSTEM=0\n        var stream = SYSCALLS.get(),\n            iov = SYSCALLS.get(),\n            iovcnt = SYSCALLS.get();\n        var ret = 0;\n\n        if (!___syscall146.buffers) {\n          ___syscall146.buffers = [null, [], []]; // 1 => stdout, 2 => stderr\n\n          ___syscall146.printChar = function (stream, curr) {\n            var buffer = ___syscall146.buffers[stream];\n            assert(buffer);\n\n            if (curr === 0 || curr === 10) {\n              (stream === 1 ? out : err)(UTF8ArrayToString(buffer, 0));\n              buffer.length = 0;\n            } else {\n              buffer.push(curr);\n            }\n          };\n        }\n\n        for (var i = 0; i < iovcnt; i++) {\n          var ptr = HEAP32[iov + i * 8 >> 2];\n          var len = HEAP32[iov + (i * 8 + 4) >> 2];\n\n          for (var j = 0; j < len; j++) {\n            ___syscall146.printChar(stream, HEAPU8[ptr + j]);\n          }\n\n          ret += len;\n        }\n\n        return ret;\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n        return -e.errno;\n      }\n    }\n\n    function ___syscall54(which, varargs) {\n      SYSCALLS.varargs = varargs;\n\n      try {\n        // ioctl\n        return 0;\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n        return -e.errno;\n      }\n    }\n\n    function ___syscall6(which, varargs) {\n      SYSCALLS.varargs = varargs;\n\n      try {\n        // close\n        var stream = SYSCALLS.getStreamFromFD();\n        FS.close(stream);\n        return 0;\n      } catch (e) {\n        if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);\n        return -e.errno;\n      }\n    }\n\n    function ___unlock() {}\n\n    var _emscripten_asm_const_int = true;\n\n    function _emscripten_set_main_loop_timing(mode, value) {\n      Browser.mainLoop.timingMode = mode;\n      Browser.mainLoop.timingValue = value;\n\n      if (!Browser.mainLoop.func) {\n        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');\n        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.\n      }\n\n      if (mode == 0\n      /*EM_TIMING_SETTIMEOUT*/\n      ) {\n          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {\n            var timeUntilNextTick = Math.max(0, Browser.mainLoop.tickStartTime + value - _emscripten_get_now()) | 0;\n            setTimeout(Browser.mainLoop.runner, timeUntilNextTick); // doing this each time means that on exception, we stop\n          };\n\n          Browser.mainLoop.method = 'timeout';\n        } else if (mode == 1\n      /*EM_TIMING_RAF*/\n      ) {\n          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {\n            Browser.requestAnimationFrame(Browser.mainLoop.runner);\n          };\n\n          Browser.mainLoop.method = 'rAF';\n        } else if (mode == 2\n      /*EM_TIMING_SETIMMEDIATE*/\n      ) {\n          if (typeof setImmediate === 'undefined') {\n            var Browser_setImmediate_messageHandler = function Browser_setImmediate_messageHandler(event) {\n              // When called in current thread or Worker, the main loop ID is structured slightly different to accommodate for --proxy-to-worker runtime listening to Worker events,\n              // so check for both cases.\n              if (event.data === emscriptenMainLoopMessageId || event.data.target === emscriptenMainLoopMessageId) {\n                event.stopPropagation();\n                setImmediates.shift()();\n              }\n            };\n\n            // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)\n            var setImmediates = [];\n            var emscriptenMainLoopMessageId = 'setimmediate';\n            addEventListener(\"message\", Browser_setImmediate_messageHandler, true);\n\n            setImmediate = function Browser_emulated_setImmediate(func) {\n              setImmediates.push(func);\n\n              if (ENVIRONMENT_IS_WORKER) {\n                if (Module['setImmediates'] === undefined) Module['setImmediates'] = [];\n                Module['setImmediates'].push(func);\n                postMessage({\n                  target: emscriptenMainLoopMessageId\n                }); // In --proxy-to-worker, route the message via proxyClient.js\n              } else postMessage(emscriptenMainLoopMessageId, \"*\"); // On the main thread, can just send the message to itself.\n\n            };\n          }\n\n          Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {\n            setImmediate(Browser.mainLoop.runner);\n          };\n\n          Browser.mainLoop.method = 'immediate';\n        }\n\n      return 0;\n    }\n\n    function _emscripten_get_now() {\n      abort();\n    }\n\n    function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {\n      Module['noExitRuntime'] = true;\n      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');\n      Browser.mainLoop.func = func;\n      Browser.mainLoop.arg = arg;\n      var browserIterationFunc;\n\n      if (typeof arg !== 'undefined') {\n        browserIterationFunc = function browserIterationFunc() {\n          Module['dynCall_vi'](func, arg);\n        };\n      } else {\n        browserIterationFunc = function browserIterationFunc() {\n          Module['dynCall_v'](func);\n        };\n      }\n\n      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;\n\n      Browser.mainLoop.runner = function Browser_mainLoop_runner() {\n        if (ABORT) return;\n\n        if (Browser.mainLoop.queue.length > 0) {\n          var start = Date.now();\n          var blocker = Browser.mainLoop.queue.shift();\n          blocker.func(blocker.arg);\n\n          if (Browser.mainLoop.remainingBlockers) {\n            var remaining = Browser.mainLoop.remainingBlockers;\n            var next = remaining % 1 == 0 ? remaining - 1 : Math.floor(remaining);\n\n            if (blocker.counted) {\n              Browser.mainLoop.remainingBlockers = next;\n            } else {\n              // not counted, but move the progress along a tiny bit\n              next = next + 0.5; // do not steal all the next one's progress\n\n              Browser.mainLoop.remainingBlockers = (8 * remaining + next) / 9;\n            }\n          }\n\n          console.log('main loop blocker \"' + blocker.name + '\" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);\n\n          Browser.mainLoop.updateStatus(); // catches pause/resume main loop from blocker execution\n\n          if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;\n          setTimeout(Browser.mainLoop.runner, 0);\n          return;\n        } // catch pauses from non-main loop sources\n\n\n        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return; // Implement very basic swap interval control\n\n        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;\n\n        if (Browser.mainLoop.timingMode == 1\n        /*EM_TIMING_RAF*/\n        && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {\n          // Not the scheduled time to render this frame - skip.\n          Browser.mainLoop.scheduler();\n          return;\n        } else if (Browser.mainLoop.timingMode == 0\n        /*EM_TIMING_SETTIMEOUT*/\n        ) {\n            Browser.mainLoop.tickStartTime = _emscripten_get_now();\n          } // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize\n        // VBO double-buffering and reduce GPU stalls.\n\n\n        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {\n          err('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');\n          Browser.mainLoop.method = ''; // just warn once per call to set main loop\n        }\n\n        Browser.mainLoop.runIter(browserIterationFunc);\n        checkStackCookie(); // catch pauses from the main loop itself\n\n        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return; // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able\n        // to queue the newest produced audio samples.\n        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()\n        //       do not need to be hardcoded into this function, but can be more generic.\n\n        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();\n        Browser.mainLoop.scheduler();\n      };\n\n      if (!noSetTiming) {\n        if (fps && fps > 0) _emscripten_set_main_loop_timing(0\n        /*EM_TIMING_SETTIMEOUT*/\n        , 1000.0 / fps);else _emscripten_set_main_loop_timing(1\n        /*EM_TIMING_RAF*/\n        , 1); // Do rAF by rendering each frame (no decimating)\n\n        Browser.mainLoop.scheduler();\n      }\n\n      if (simulateInfiniteLoop) {\n        throw 'SimulateInfiniteLoop';\n      }\n    }\n\n    var Browser = {\n      mainLoop: {\n        scheduler: null,\n        method: \"\",\n        currentlyRunningMainloop: 0,\n        func: null,\n        arg: 0,\n        timingMode: 0,\n        timingValue: 0,\n        currentFrameNumber: 0,\n        queue: [],\n        pause: function pause() {\n          Browser.mainLoop.scheduler = null;\n          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.\n        },\n        resume: function resume() {\n          Browser.mainLoop.currentlyRunningMainloop++;\n          var timingMode = Browser.mainLoop.timingMode;\n          var timingValue = Browser.mainLoop.timingValue;\n          var func = Browser.mainLoop.func;\n          Browser.mainLoop.func = null;\n\n          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true\n          /* do not set timing and call scheduler, we will do it on the next lines */\n          );\n\n          _emscripten_set_main_loop_timing(timingMode, timingValue);\n\n          Browser.mainLoop.scheduler();\n        },\n        updateStatus: function updateStatus() {\n          if (Module['setStatus']) {\n            var message = Module['statusMessage'] || 'Please wait...';\n            var remaining = Browser.mainLoop.remainingBlockers;\n            var expected = Browser.mainLoop.expectedBlockers;\n\n            if (remaining) {\n              if (remaining < expected) {\n                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');\n              } else {\n                Module['setStatus'](message);\n              }\n            } else {\n              Module['setStatus']('');\n            }\n          }\n        },\n        runIter: function runIter(func) {\n          if (ABORT) return;\n\n          if (Module['preMainLoop']) {\n            var preRet = Module['preMainLoop']();\n\n            if (preRet === false) {\n              return; // |return false| skips a frame\n            }\n          }\n\n          try {\n            func();\n          } catch (e) {\n            if (e instanceof ExitStatus) {\n              return;\n            } else {\n              if (e && typeof e === 'object' && e.stack) err('exception thrown: ' + [e, e.stack]);\n              throw e;\n            }\n          }\n\n          if (Module['postMainLoop']) Module['postMainLoop']();\n        }\n      },\n      isFullscreen: false,\n      pointerLock: false,\n      moduleContextCreatedCallbacks: [],\n      workers: [],\n      init: function init() {\n        if (!Module[\"preloadPlugins\"]) Module[\"preloadPlugins\"] = []; // needs to exist even in workers\n\n        if (Browser.initted) return;\n        Browser.initted = true;\n\n        try {\n          new Blob();\n          Browser.hasBlobConstructor = true;\n        } catch (e) {\n          Browser.hasBlobConstructor = false;\n          console.log(\"warning: no blob constructor, cannot create blobs with mimetypes\");\n        }\n\n        Browser.BlobBuilder = typeof MozBlobBuilder != \"undefined\" ? MozBlobBuilder : typeof WebKitBlobBuilder != \"undefined\" ? WebKitBlobBuilder : !Browser.hasBlobConstructor ? console.log(\"warning: no BlobBuilder\") : null;\n        Browser.URLObject = typeof window != \"undefined\" ? window.URL ? window.URL : window.webkitURL : undefined;\n\n        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {\n          console.log(\"warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.\");\n          Module.noImageDecoding = true;\n        } // Support for plugins that can process preloaded files. You can add more of these to\n        // your app by creating and appending to Module.preloadPlugins.\n        //\n        // Each plugin is asked if it can handle a file based on the file's name. If it can,\n        // it is given the file's raw data. When it is done, it calls a callback with the file's\n        // (possibly modified) data. For example, a plugin might decompress a file, or it\n        // might create some side data structure for use later (like an Image element, etc.).\n\n\n        var imagePlugin = {};\n\n        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {\n          return !Module.noImageDecoding && /\\.(jpg|jpeg|png|bmp)$/i.test(name);\n        };\n\n        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {\n          var b = null;\n\n          if (Browser.hasBlobConstructor) {\n            try {\n              b = new Blob([byteArray], {\n                type: Browser.getMimetype(name)\n              });\n\n              if (b.size !== byteArray.length) {\n                // Safari bug #118630\n                // Safari's Blob can only take an ArrayBuffer\n                b = new Blob([new Uint8Array(byteArray).buffer], {\n                  type: Browser.getMimetype(name)\n                });\n              }\n            } catch (e) {\n              warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');\n            }\n          }\n\n          if (!b) {\n            var bb = new Browser.BlobBuilder();\n            bb.append(new Uint8Array(byteArray).buffer); // we need to pass a buffer, and must copy the array to get the right data range\n\n            b = bb.getBlob();\n          }\n\n          var url = Browser.URLObject.createObjectURL(b);\n          assert(typeof url == 'string', 'createObjectURL must return a url as a string');\n          var img = new Image();\n\n          img.onload = function img_onload() {\n            assert(img.complete, 'Image ' + name + ' could not be decoded');\n            var canvas = document.createElement('canvas');\n            canvas.width = img.width;\n            canvas.height = img.height;\n            var ctx = canvas.getContext('2d');\n            ctx.drawImage(img, 0, 0);\n            Module[\"preloadedImages\"][name] = canvas;\n            Browser.URLObject.revokeObjectURL(url);\n            if (onload) onload(byteArray);\n          };\n\n          img.onerror = function img_onerror(event) {\n            console.log('Image ' + url + ' could not be decoded');\n            if (onerror) onerror();\n          };\n\n          img.src = url;\n        };\n\n        Module['preloadPlugins'].push(imagePlugin);\n        var audioPlugin = {};\n\n        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {\n          return !Module.noAudioDecoding && name.substr(-4) in {\n            '.ogg': 1,\n            '.wav': 1,\n            '.mp3': 1\n          };\n        };\n\n        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {\n          var done = false;\n\n          function finish(audio) {\n            if (done) return;\n            done = true;\n            Module[\"preloadedAudios\"][name] = audio;\n            if (onload) onload(byteArray);\n          }\n\n          function fail() {\n            if (done) return;\n            done = true;\n            Module[\"preloadedAudios\"][name] = new Audio(); // empty shim\n\n            if (onerror) onerror();\n          }\n\n          if (Browser.hasBlobConstructor) {\n            try {\n              var b = new Blob([byteArray], {\n                type: Browser.getMimetype(name)\n              });\n            } catch (e) {\n              return fail();\n            }\n\n            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!\n\n            assert(typeof url == 'string', 'createObjectURL must return a url as a string');\n            var audio = new Audio();\n            audio.addEventListener('canplaythrough', function () {\n              finish(audio);\n            }, false); // use addEventListener due to chromium bug 124926\n\n            audio.onerror = function audio_onerror(event) {\n              if (done) return;\n              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');\n\n              function encode64(data) {\n                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n                var PAD = '=';\n                var ret = '';\n                var leftchar = 0;\n                var leftbits = 0;\n\n                for (var i = 0; i < data.length; i++) {\n                  leftchar = leftchar << 8 | data[i];\n                  leftbits += 8;\n\n                  while (leftbits >= 6) {\n                    var curr = leftchar >> leftbits - 6 & 0x3f;\n                    leftbits -= 6;\n                    ret += BASE[curr];\n                  }\n                }\n\n                if (leftbits == 2) {\n                  ret += BASE[(leftchar & 3) << 4];\n                  ret += PAD + PAD;\n                } else if (leftbits == 4) {\n                  ret += BASE[(leftchar & 0xf) << 2];\n                  ret += PAD;\n                }\n\n                return ret;\n              }\n\n              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);\n              finish(audio); // we don't wait for confirmation this worked - but it's worth trying\n            };\n\n            audio.src = url; // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror\n\n            Browser.safeSetTimeout(function () {\n              finish(audio); // try to use it even though it is not necessarily ready to play\n            }, 10000);\n          } else {\n            return fail();\n          }\n        };\n\n        Module['preloadPlugins'].push(audioPlugin); // Canvas event setup\n\n        function pointerLockChange() {\n          Browser.pointerLock = document['pointerLockElement'] === Module['canvas'] || document['mozPointerLockElement'] === Module['canvas'] || document['webkitPointerLockElement'] === Module['canvas'] || document['msPointerLockElement'] === Module['canvas'];\n        }\n\n        var canvas = Module['canvas'];\n\n        if (canvas) {\n          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module\n          // Module['forcedAspectRatio'] = 4 / 3;\n          canvas.requestPointerLock = canvas['requestPointerLock'] || canvas['mozRequestPointerLock'] || canvas['webkitRequestPointerLock'] || canvas['msRequestPointerLock'] || function () {};\n\n          canvas.exitPointerLock = document['exitPointerLock'] || document['mozExitPointerLock'] || document['webkitExitPointerLock'] || document['msExitPointerLock'] || function () {}; // no-op if function does not exist\n\n\n          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);\n          document.addEventListener('pointerlockchange', pointerLockChange, false);\n          document.addEventListener('mozpointerlockchange', pointerLockChange, false);\n          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);\n          document.addEventListener('mspointerlockchange', pointerLockChange, false);\n\n          if (Module['elementPointerLock']) {\n            canvas.addEventListener(\"click\", function (ev) {\n              if (!Browser.pointerLock && Module['canvas'].requestPointerLock) {\n                Module['canvas'].requestPointerLock();\n                ev.preventDefault();\n              }\n            }, false);\n          }\n        }\n      },\n      createContext: function createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {\n        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.\n\n        var ctx;\n        var contextHandle;\n\n        if (useWebGL) {\n          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.\n          var contextAttributes = {\n            antialias: false,\n            alpha: false\n          };\n\n          if (webGLContextAttributes) {\n            for (var attribute in webGLContextAttributes) {\n              contextAttributes[attribute] = webGLContextAttributes[attribute];\n            }\n          }\n\n          contextHandle = GL.createContext(canvas, contextAttributes);\n\n          if (contextHandle) {\n            ctx = GL.getContext(contextHandle).GLctx;\n          }\n        } else {\n          ctx = canvas.getContext('2d');\n        }\n\n        if (!ctx) return null;\n\n        if (setInModule) {\n          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');\n          Module.ctx = ctx;\n          if (useWebGL) GL.makeContextCurrent(contextHandle);\n          Module.useWebGL = useWebGL;\n          Browser.moduleContextCreatedCallbacks.forEach(function (callback) {\n            callback();\n          });\n          Browser.init();\n        }\n\n        return ctx;\n      },\n      destroyContext: function destroyContext(canvas, useWebGL, setInModule) {},\n      fullscreenHandlersInstalled: false,\n      lockPointer: undefined,\n      resizeCanvas: undefined,\n      requestFullscreen: function requestFullscreen(lockPointer, resizeCanvas, vrDevice) {\n        Browser.lockPointer = lockPointer;\n        Browser.resizeCanvas = resizeCanvas;\n        Browser.vrDevice = vrDevice;\n        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;\n        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;\n        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;\n        var canvas = Module['canvas'];\n\n        function fullscreenChange() {\n          Browser.isFullscreen = false;\n          var canvasContainer = canvas.parentNode;\n\n          if ((document['fullscreenElement'] || document['mozFullScreenElement'] || document['msFullscreenElement'] || document['webkitFullscreenElement'] || document['webkitCurrentFullScreenElement']) === canvasContainer) {\n            canvas.exitFullscreen = document['exitFullscreen'] || document['cancelFullScreen'] || document['mozCancelFullScreen'] || document['msExitFullscreen'] || document['webkitCancelFullScreen'] || function () {};\n\n            canvas.exitFullscreen = canvas.exitFullscreen.bind(document);\n            if (Browser.lockPointer) canvas.requestPointerLock();\n            Browser.isFullscreen = true;\n\n            if (Browser.resizeCanvas) {\n              Browser.setFullscreenCanvasSize();\n            } else {\n              Browser.updateCanvasDimensions(canvas);\n            }\n          } else {\n            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen\n            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);\n            canvasContainer.parentNode.removeChild(canvasContainer);\n\n            if (Browser.resizeCanvas) {\n              Browser.setWindowedCanvasSize();\n            } else {\n              Browser.updateCanvasDimensions(canvas);\n            }\n          }\n\n          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullscreen);\n          if (Module['onFullscreen']) Module['onFullscreen'](Browser.isFullscreen);\n        }\n\n        if (!Browser.fullscreenHandlersInstalled) {\n          Browser.fullscreenHandlersInstalled = true;\n          document.addEventListener('fullscreenchange', fullscreenChange, false);\n          document.addEventListener('mozfullscreenchange', fullscreenChange, false);\n          document.addEventListener('webkitfullscreenchange', fullscreenChange, false);\n          document.addEventListener('MSFullscreenChange', fullscreenChange, false);\n        } // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root\n\n\n        var canvasContainer = document.createElement(\"div\");\n        canvas.parentNode.insertBefore(canvasContainer, canvas);\n        canvasContainer.appendChild(canvas); // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)\n\n        canvasContainer.requestFullscreen = canvasContainer['requestFullscreen'] || canvasContainer['mozRequestFullScreen'] || canvasContainer['msRequestFullscreen'] || (canvasContainer['webkitRequestFullscreen'] ? function () {\n          canvasContainer['webkitRequestFullscreen'](Element['ALLOW_KEYBOARD_INPUT']);\n        } : null) || (canvasContainer['webkitRequestFullScreen'] ? function () {\n          canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']);\n        } : null);\n\n        if (vrDevice) {\n          canvasContainer.requestFullscreen({\n            vrDisplay: vrDevice\n          });\n        } else {\n          canvasContainer.requestFullscreen();\n        }\n      },\n      requestFullScreen: function requestFullScreen(lockPointer, resizeCanvas, vrDevice) {\n        err('Browser.requestFullScreen() is deprecated. Please call Browser.requestFullscreen instead.');\n\n        Browser.requestFullScreen = function (lockPointer, resizeCanvas, vrDevice) {\n          return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);\n        };\n\n        return Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);\n      },\n      nextRAF: 0,\n      fakeRequestAnimationFrame: function fakeRequestAnimationFrame(func) {\n        // try to keep 60fps between calls to here\n        var now = Date.now();\n\n        if (Browser.nextRAF === 0) {\n          Browser.nextRAF = now + 1000 / 60;\n        } else {\n          while (now + 2 >= Browser.nextRAF) {\n            // fudge a little, to avoid timer jitter causing us to do lots of delay:0\n            Browser.nextRAF += 1000 / 60;\n          }\n        }\n\n        var delay = Math.max(Browser.nextRAF - now, 0);\n        setTimeout(func, delay);\n      },\n      requestAnimationFrame: function requestAnimationFrame(func) {\n        if (typeof window === 'undefined') {\n          // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)\n          Browser.fakeRequestAnimationFrame(func);\n        } else {\n          if (!window.requestAnimationFrame) {\n            window.requestAnimationFrame = window['requestAnimationFrame'] || window['mozRequestAnimationFrame'] || window['webkitRequestAnimationFrame'] || window['msRequestAnimationFrame'] || window['oRequestAnimationFrame'] || Browser.fakeRequestAnimationFrame;\n          }\n\n          window.requestAnimationFrame(func);\n        }\n      },\n      safeCallback: function safeCallback(func) {\n        return function () {\n          if (!ABORT) return func.apply(null, arguments);\n        };\n      },\n      allowAsyncCallbacks: true,\n      queuedAsyncCallbacks: [],\n      pauseAsyncCallbacks: function pauseAsyncCallbacks() {\n        Browser.allowAsyncCallbacks = false;\n      },\n      resumeAsyncCallbacks: function resumeAsyncCallbacks() {\n        // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now\n        Browser.allowAsyncCallbacks = true;\n\n        if (Browser.queuedAsyncCallbacks.length > 0) {\n          var callbacks = Browser.queuedAsyncCallbacks;\n          Browser.queuedAsyncCallbacks = [];\n          callbacks.forEach(function (func) {\n            func();\n          });\n        }\n      },\n      safeRequestAnimationFrame: function safeRequestAnimationFrame(func) {\n        return Browser.requestAnimationFrame(function () {\n          if (ABORT) return;\n\n          if (Browser.allowAsyncCallbacks) {\n            func();\n          } else {\n            Browser.queuedAsyncCallbacks.push(func);\n          }\n        });\n      },\n      safeSetTimeout: function safeSetTimeout(func, timeout) {\n        Module['noExitRuntime'] = true;\n        return setTimeout(function () {\n          if (ABORT) return;\n\n          if (Browser.allowAsyncCallbacks) {\n            func();\n          } else {\n            Browser.queuedAsyncCallbacks.push(func);\n          }\n        }, timeout);\n      },\n      safeSetInterval: function safeSetInterval(func, timeout) {\n        Module['noExitRuntime'] = true;\n        return setInterval(function () {\n          if (ABORT) return;\n\n          if (Browser.allowAsyncCallbacks) {\n            func();\n          } // drop it on the floor otherwise, next interval will kick in\n\n        }, timeout);\n      },\n      getMimetype: function getMimetype(name) {\n        return {\n          'jpg': 'image/jpeg',\n          'jpeg': 'image/jpeg',\n          'png': 'image/png',\n          'bmp': 'image/bmp',\n          'ogg': 'audio/ogg',\n          'wav': 'audio/wav',\n          'mp3': 'audio/mpeg'\n        }[name.substr(name.lastIndexOf('.') + 1)];\n      },\n      getUserMedia: function getUserMedia(func) {\n        if (!window.getUserMedia) {\n          window.getUserMedia = navigator['getUserMedia'] || navigator['mozGetUserMedia'];\n        }\n\n        window.getUserMedia(func);\n      },\n      getMovementX: function getMovementX(event) {\n        return event['movementX'] || event['mozMovementX'] || event['webkitMovementX'] || 0;\n      },\n      getMovementY: function getMovementY(event) {\n        return event['movementY'] || event['mozMovementY'] || event['webkitMovementY'] || 0;\n      },\n      getMouseWheelDelta: function getMouseWheelDelta(event) {\n        var delta = 0;\n\n        switch (event.type) {\n          case 'DOMMouseScroll':\n            delta = event.detail;\n            break;\n\n          case 'mousewheel':\n            delta = event.wheelDelta;\n            break;\n\n          case 'wheel':\n            delta = event['deltaY'];\n            break;\n\n          default:\n            throw 'unrecognized mouse wheel event: ' + event.type;\n        }\n\n        return delta;\n      },\n      mouseX: 0,\n      mouseY: 0,\n      mouseMovementX: 0,\n      mouseMovementY: 0,\n      touches: {},\n      lastTouches: {},\n      calculateMouseEvent: function calculateMouseEvent(event) {\n        // event should be mousemove, mousedown or mouseup\n        if (Browser.pointerLock) {\n          // When the pointer is locked, calculate the coordinates\n          // based on the movement of the mouse.\n          // Workaround for Firefox bug 764498\n          if (event.type != 'mousemove' && 'mozMovementX' in event) {\n            Browser.mouseMovementX = Browser.mouseMovementY = 0;\n          } else {\n            Browser.mouseMovementX = Browser.getMovementX(event);\n            Browser.mouseMovementY = Browser.getMovementY(event);\n          } // check if SDL is available\n\n\n          if (typeof SDL != \"undefined\") {\n            Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;\n            Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;\n          } else {\n            // just add the mouse delta to the current absolut mouse position\n            // FIXME: ideally this should be clamped against the canvas size and zero\n            Browser.mouseX += Browser.mouseMovementX;\n            Browser.mouseY += Browser.mouseMovementY;\n          }\n        } else {\n          // Otherwise, calculate the movement based on the changes\n          // in the coordinates.\n          var rect = Module[\"canvas\"].getBoundingClientRect();\n          var cw = Module[\"canvas\"].width;\n          var ch = Module[\"canvas\"].height; // Neither .scrollX or .pageXOffset are defined in a spec, but\n          // we prefer .scrollX because it is currently in a spec draft.\n          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)\n\n          var scrollX = typeof window.scrollX !== 'undefined' ? window.scrollX : window.pageXOffset;\n          var scrollY = typeof window.scrollY !== 'undefined' ? window.scrollY : window.pageYOffset; // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset\n          // and we have no viable fallback.\n\n          assert(typeof scrollX !== 'undefined' && typeof scrollY !== 'undefined', 'Unable to retrieve scroll position, mouse positions likely broken.');\n\n          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {\n            var touch = event.touch;\n\n            if (touch === undefined) {\n              return; // the \"touch\" property is only defined in SDL\n            }\n\n            var adjustedX = touch.pageX - (scrollX + rect.left);\n            var adjustedY = touch.pageY - (scrollY + rect.top);\n            adjustedX = adjustedX * (cw / rect.width);\n            adjustedY = adjustedY * (ch / rect.height);\n            var coords = {\n              x: adjustedX,\n              y: adjustedY\n            };\n\n            if (event.type === 'touchstart') {\n              Browser.lastTouches[touch.identifier] = coords;\n              Browser.touches[touch.identifier] = coords;\n            } else if (event.type === 'touchend' || event.type === 'touchmove') {\n              var last = Browser.touches[touch.identifier];\n              if (!last) last = coords;\n              Browser.lastTouches[touch.identifier] = last;\n              Browser.touches[touch.identifier] = coords;\n            }\n\n            return;\n          }\n\n          var x = event.pageX - (scrollX + rect.left);\n          var y = event.pageY - (scrollY + rect.top); // the canvas might be CSS-scaled compared to its backbuffer;\n          // SDL-using content will want mouse coordinates in terms\n          // of backbuffer units.\n\n          x = x * (cw / rect.width);\n          y = y * (ch / rect.height);\n          Browser.mouseMovementX = x - Browser.mouseX;\n          Browser.mouseMovementY = y - Browser.mouseY;\n          Browser.mouseX = x;\n          Browser.mouseY = y;\n        }\n      },\n      asyncLoad: function asyncLoad(url, onload, onerror, noRunDep) {\n        var dep = !noRunDep ? getUniqueRunDependency('al ' + url) : '';\n        Module['readAsync'](url, function (arrayBuffer) {\n          assert(arrayBuffer, 'Loading data file \"' + url + '\" failed (no arrayBuffer).');\n          onload(new Uint8Array(arrayBuffer));\n          if (dep) removeRunDependency(dep);\n        }, function (event) {\n          if (onerror) {\n            onerror();\n          } else {\n            throw 'Loading data file \"' + url + '\" failed.';\n          }\n        });\n        if (dep) addRunDependency(dep);\n      },\n      resizeListeners: [],\n      updateResizeListeners: function updateResizeListeners() {\n        var canvas = Module['canvas'];\n        Browser.resizeListeners.forEach(function (listener) {\n          listener(canvas.width, canvas.height);\n        });\n      },\n      setCanvasSize: function setCanvasSize(width, height, noUpdates) {\n        var canvas = Module['canvas'];\n        Browser.updateCanvasDimensions(canvas, width, height);\n        if (!noUpdates) Browser.updateResizeListeners();\n      },\n      windowedWidth: 0,\n      windowedHeight: 0,\n      setFullscreenCanvasSize: function setFullscreenCanvasSize() {\n        // check if SDL is available\n        if (typeof SDL != \"undefined\") {\n          var flags = HEAPU32[SDL.screen >> 2];\n          flags = flags | 0x00800000; // set SDL_FULLSCREEN flag\n\n          HEAP32[SDL.screen >> 2] = flags;\n        }\n\n        Browser.updateCanvasDimensions(Module['canvas']);\n        Browser.updateResizeListeners();\n      },\n      setWindowedCanvasSize: function setWindowedCanvasSize() {\n        // check if SDL is available\n        if (typeof SDL != \"undefined\") {\n          var flags = HEAPU32[SDL.screen >> 2];\n          flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag\n\n          HEAP32[SDL.screen >> 2] = flags;\n        }\n\n        Browser.updateCanvasDimensions(Module['canvas']);\n        Browser.updateResizeListeners();\n      },\n      updateCanvasDimensions: function updateCanvasDimensions(canvas, wNative, hNative) {\n        if (wNative && hNative) {\n          canvas.widthNative = wNative;\n          canvas.heightNative = hNative;\n        } else {\n          wNative = canvas.widthNative;\n          hNative = canvas.heightNative;\n        }\n\n        var w = wNative;\n        var h = hNative;\n\n        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {\n          if (w / h < Module['forcedAspectRatio']) {\n            w = Math.round(h * Module['forcedAspectRatio']);\n          } else {\n            h = Math.round(w / Module['forcedAspectRatio']);\n          }\n        }\n\n        if ((document['fullscreenElement'] || document['mozFullScreenElement'] || document['msFullscreenElement'] || document['webkitFullscreenElement'] || document['webkitCurrentFullScreenElement']) === canvas.parentNode && typeof screen != 'undefined') {\n          var factor = Math.min(screen.width / w, screen.height / h);\n          w = Math.round(w * factor);\n          h = Math.round(h * factor);\n        }\n\n        if (Browser.resizeCanvas) {\n          if (canvas.width != w) canvas.width = w;\n          if (canvas.height != h) canvas.height = h;\n\n          if (typeof canvas.style != 'undefined') {\n            canvas.style.removeProperty(\"width\");\n            canvas.style.removeProperty(\"height\");\n          }\n        } else {\n          if (canvas.width != wNative) canvas.width = wNative;\n          if (canvas.height != hNative) canvas.height = hNative;\n\n          if (typeof canvas.style != 'undefined') {\n            if (w != wNative || h != hNative) {\n              canvas.style.setProperty(\"width\", w + \"px\", \"important\");\n              canvas.style.setProperty(\"height\", h + \"px\", \"important\");\n            } else {\n              canvas.style.removeProperty(\"width\");\n              canvas.style.removeProperty(\"height\");\n            }\n          }\n        }\n      },\n      wgetRequests: {},\n      nextWgetRequestHandle: 0,\n      getNextWgetRequestHandle: function getNextWgetRequestHandle() {\n        var handle = Browser.nextWgetRequestHandle;\n        Browser.nextWgetRequestHandle++;\n        return handle;\n      }\n    };\n\n    function _emscripten_exit_with_live_runtime() {\n      Module['noExitRuntime'] = true;\n      throw 'SimulateInfiniteLoop';\n    }\n\n    function __exit(status) {\n      // void _exit(int status);\n      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html\n      exit(status);\n    }\n\n    function _exit(status) {\n      __exit(status);\n    }\n\n    var _llvm_ceil_f64 = Math_ceil;\n    var _llvm_cos_f64 = Math_cos;\n    var _llvm_floor_f64 = Math_floor;\n\n    function _llvm_log2_f32(x) {\n      return Math.log(x) / Math.LN2; // TODO: Math.log2, when browser support is there\n    }\n\n    function _llvm_log2_f64() {\n      return _llvm_log2_f32.apply(null, arguments);\n    }\n\n    var _llvm_log_f64 = Math_log;\n    var _llvm_pow_f64 = Math_pow;\n    var _llvm_sin_f64 = Math_sin;\n    var _llvm_sqrt_f64 = Math_sqrt;\n\n    function _llvm_stackrestore(p) {\n      var self = _llvm_stacksave;\n      var ret = self.LLVM_SAVEDSTACKS[p];\n      self.LLVM_SAVEDSTACKS.splice(p, 1);\n\n      _stackRestore(ret);\n    }\n\n    function _llvm_stacksave() {\n      var self = _llvm_stacksave;\n\n      if (!self.LLVM_SAVEDSTACKS) {\n        self.LLVM_SAVEDSTACKS = [];\n      }\n\n      self.LLVM_SAVEDSTACKS.push(_stackSave());\n      return self.LLVM_SAVEDSTACKS.length - 1;\n    }\n\n    function _emscripten_memcpy_big(dest, src, num) {\n      HEAPU8.set(HEAPU8.subarray(src, src + num), dest);\n      return dest;\n    }\n\n    function ___setErrNo(value) {\n      if (Module['___errno_location']) HEAP32[Module['___errno_location']() >> 2] = value;else err('failed to set errno from JS');\n      return value;\n    }\n\n    Module[\"requestFullScreen\"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) {\n      err(\"Module.requestFullScreen is deprecated. Please call Module.requestFullscreen instead.\");\n      Module[\"requestFullScreen\"] = Module[\"requestFullscreen\"];\n      Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice);\n    };\n\n    Module[\"requestFullscreen\"] = function Module_requestFullscreen(lockPointer, resizeCanvas, vrDevice) {\n      Browser.requestFullscreen(lockPointer, resizeCanvas, vrDevice);\n    };\n\n    Module[\"requestAnimationFrame\"] = function Module_requestAnimationFrame(func) {\n      Browser.requestAnimationFrame(func);\n    };\n\n    Module[\"setCanvasSize\"] = function Module_setCanvasSize(width, height, noUpdates) {\n      Browser.setCanvasSize(width, height, noUpdates);\n    };\n\n    Module[\"pauseMainLoop\"] = function Module_pauseMainLoop() {\n      Browser.mainLoop.pause();\n    };\n\n    Module[\"resumeMainLoop\"] = function Module_resumeMainLoop() {\n      Browser.mainLoop.resume();\n    };\n\n    Module[\"getUserMedia\"] = function Module_getUserMedia() {\n      Browser.getUserMedia();\n    };\n\n    Module[\"createContext\"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) {\n      return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes);\n    };\n\n    if (ENVIRONMENT_IS_NODE) {\n      _emscripten_get_now = function _emscripten_get_now_actual() {\n        var t = process['hrtime']();\n        return t[0] * 1e3 + t[1] / 1e6;\n      };\n    } else if (typeof dateNow !== 'undefined') {\n      _emscripten_get_now = dateNow;\n    } else if (typeof self === 'object' && self['performance'] && typeof self['performance']['now'] === 'function') {\n      _emscripten_get_now = function _emscripten_get_now() {\n        return self['performance']['now']();\n      };\n    } else if (typeof performance === 'object' && typeof performance['now'] === 'function') {\n      _emscripten_get_now = function _emscripten_get_now() {\n        return performance['now']();\n      };\n    } else {\n      _emscripten_get_now = Date.now;\n    }\n\n    ;\n    DYNAMICTOP_PTR = staticAlloc(4);\n    STACK_BASE = STACKTOP = alignMemory(STATICTOP);\n    STACK_MAX = STACK_BASE + TOTAL_STACK;\n    DYNAMIC_BASE = alignMemory(STACK_MAX);\n    HEAP32[DYNAMICTOP_PTR >> 2] = DYNAMIC_BASE;\n    staticSealed = true; // seal the static portion of memory\n\n    assert(DYNAMIC_BASE < TOTAL_MEMORY, \"TOTAL_MEMORY not big enough for stack\");\n    var ASSERTIONS = true; // Copyright 2017 The Emscripten Authors.  All rights reserved.\n    // Emscripten is available under two separate licenses, the MIT license and the\n    // University of Illinois/NCSA Open Source License.  Both these licenses can be\n    // found in the LICENSE file.\n\n    /** @type {function(string, boolean=, number=)} */\n\n    function intArrayFromString(stringy, dontAddNull, length) {\n      var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;\n      var u8array = new Array(len);\n      var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);\n      if (dontAddNull) u8array.length = numBytesWritten;\n      return u8array;\n    }\n\n    function intArrayToString(array) {\n      var ret = [];\n\n      for (var i = 0; i < array.length; i++) {\n        var chr = array[i];\n\n        if (chr > 0xFF) {\n          if (ASSERTIONS) {\n            assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');\n          }\n\n          chr &= 0xFF;\n        }\n\n        ret.push(String.fromCharCode(chr));\n      }\n\n      return ret.join('');\n    }\n\n    function nullFunc_ii(x) {\n      err(\"Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_iiii(x) {\n      err(\"Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_iijji(x) {\n      err(\"Invalid function pointer called with signature 'iijji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_vi(x) {\n      err(\"Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_vii(x) {\n      err(\"Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_viidii(x) {\n      err(\"Invalid function pointer called with signature 'viidii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_viidiiii(x) {\n      err(\"Invalid function pointer called with signature 'viidiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_viiidiidi(x) {\n      err(\"Invalid function pointer called with signature 'viiidiidi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_viiii(x) {\n      err(\"Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_viiiii(x) {\n      err(\"Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_viiiiii(x) {\n      err(\"Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_vijj(x) {\n      err(\"Invalid function pointer called with signature 'vijj'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    function nullFunc_vijji(x) {\n      err(\"Invalid function pointer called with signature 'vijji'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)\");\n      err(\"Build with ASSERTIONS=2 for more info.\");\n      abort(x);\n    }\n\n    Module['wasmTableSize'] = 738;\n    Module['wasmMaxTableSize'] = 738;\n\n    function invoke_ii(index, a1) {\n      var sp = _stackSave();\n\n      try {\n        return Module[\"dynCall_ii\"](index, a1);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_iiii(index, a1, a2, a3) {\n      var sp = _stackSave();\n\n      try {\n        return Module[\"dynCall_iiii\"](index, a1, a2, a3);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_iijji(index, a1, a2, a3, a4, a5, a6) {\n      var sp = _stackSave();\n\n      try {\n        return Module[\"dynCall_iijji\"](index, a1, a2, a3, a4, a5, a6);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_vi(index, a1) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_vi\"](index, a1);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_vii(index, a1, a2) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_vii\"](index, a1, a2);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_viidii(index, a1, a2, a3, a4, a5) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_viidii\"](index, a1, a2, a3, a4, a5);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_viidiiii(index, a1, a2, a3, a4, a5, a6, a7) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_viidiiii\"](index, a1, a2, a3, a4, a5, a6, a7);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_viiidiidi(index, a1, a2, a3, a4, a5, a6, a7, a8) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_viiidiidi\"](index, a1, a2, a3, a4, a5, a6, a7, a8);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_viiii(index, a1, a2, a3, a4) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_viiii\"](index, a1, a2, a3, a4);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_viiiii(index, a1, a2, a3, a4, a5) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_viiiii\"](index, a1, a2, a3, a4, a5);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_viiiiii(index, a1, a2, a3, a4, a5, a6) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_viiiiii\"](index, a1, a2, a3, a4, a5, a6);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_vijj(index, a1, a2, a3, a4, a5) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_vijj\"](index, a1, a2, a3, a4, a5);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    function invoke_vijji(index, a1, a2, a3, a4, a5, a6) {\n      var sp = _stackSave();\n\n      try {\n        Module[\"dynCall_vijji\"](index, a1, a2, a3, a4, a5, a6);\n      } catch (e) {\n        _stackRestore(sp);\n\n        if (typeof e !== 'number' && e !== 'longjmp') throw e;\n        Module[\"setThrew\"](1, 0);\n      }\n    }\n\n    Module.asmGlobalArg = {};\n    Module.asmLibraryArg = {\n      \"abort\": abort,\n      \"assert\": assert,\n      \"enlargeMemory\": enlargeMemory,\n      \"getTotalMemory\": getTotalMemory,\n      \"abortOnCannotGrowMemory\": abortOnCannotGrowMemory,\n      \"abortStackOverflow\": abortStackOverflow,\n      \"nullFunc_ii\": nullFunc_ii,\n      \"nullFunc_iiii\": nullFunc_iiii,\n      \"nullFunc_iijji\": nullFunc_iijji,\n      \"nullFunc_vi\": nullFunc_vi,\n      \"nullFunc_vii\": nullFunc_vii,\n      \"nullFunc_viidii\": nullFunc_viidii,\n      \"nullFunc_viidiiii\": nullFunc_viidiiii,\n      \"nullFunc_viiidiidi\": nullFunc_viiidiidi,\n      \"nullFunc_viiii\": nullFunc_viiii,\n      \"nullFunc_viiiii\": nullFunc_viiiii,\n      \"nullFunc_viiiiii\": nullFunc_viiiiii,\n      \"nullFunc_vijj\": nullFunc_vijj,\n      \"nullFunc_vijji\": nullFunc_vijji,\n      \"invoke_ii\": invoke_ii,\n      \"invoke_iiii\": invoke_iiii,\n      \"invoke_iijji\": invoke_iijji,\n      \"invoke_vi\": invoke_vi,\n      \"invoke_vii\": invoke_vii,\n      \"invoke_viidii\": invoke_viidii,\n      \"invoke_viidiiii\": invoke_viidiiii,\n      \"invoke_viiidiidi\": invoke_viiidiidi,\n      \"invoke_viiii\": invoke_viiii,\n      \"invoke_viiiii\": invoke_viiiii,\n      \"invoke_viiiiii\": invoke_viiiiii,\n      \"invoke_vijj\": invoke_vijj,\n      \"invoke_vijji\": invoke_vijji,\n      \"___assert_fail\": ___assert_fail,\n      \"___lock\": ___lock,\n      \"___setErrNo\": ___setErrNo,\n      \"___syscall140\": ___syscall140,\n      \"___syscall146\": ___syscall146,\n      \"___syscall54\": ___syscall54,\n      \"___syscall6\": ___syscall6,\n      \"___unlock\": ___unlock,\n      \"__exit\": __exit,\n      \"_emscripten_asm_const_ii\": _emscripten_asm_const_ii,\n      \"_emscripten_asm_const_iii\": _emscripten_asm_const_iii,\n      \"_emscripten_asm_const_iiii\": _emscripten_asm_const_iiii,\n      \"_emscripten_asm_const_iiiii\": _emscripten_asm_const_iiiii,\n      \"_emscripten_exit_with_live_runtime\": _emscripten_exit_with_live_runtime,\n      \"_emscripten_get_now\": _emscripten_get_now,\n      \"_emscripten_memcpy_big\": _emscripten_memcpy_big,\n      \"_emscripten_set_main_loop\": _emscripten_set_main_loop,\n      \"_emscripten_set_main_loop_timing\": _emscripten_set_main_loop_timing,\n      \"_exit\": _exit,\n      \"_llvm_ceil_f64\": _llvm_ceil_f64,\n      \"_llvm_cos_f64\": _llvm_cos_f64,\n      \"_llvm_floor_f64\": _llvm_floor_f64,\n      \"_llvm_log2_f32\": _llvm_log2_f32,\n      \"_llvm_log2_f64\": _llvm_log2_f64,\n      \"_llvm_log_f64\": _llvm_log_f64,\n      \"_llvm_pow_f64\": _llvm_pow_f64,\n      \"_llvm_sin_f64\": _llvm_sin_f64,\n      \"_llvm_sqrt_f64\": _llvm_sqrt_f64,\n      \"_llvm_stackrestore\": _llvm_stackrestore,\n      \"_llvm_stacksave\": _llvm_stacksave,\n      \"flush_NO_FILESYSTEM\": flush_NO_FILESYSTEM,\n      \"DYNAMICTOP_PTR\": DYNAMICTOP_PTR,\n      \"tempDoublePtr\": tempDoublePtr,\n      \"STACKTOP\": STACKTOP,\n      \"STACK_MAX\": STACK_MAX\n    }; // EMSCRIPTEN_START_ASM\n\n    var asm = Module[\"asm\"] // EMSCRIPTEN_END_ASM\n    (Module.asmGlobalArg, Module.asmLibraryArg, buffer);\n    var real____errno_location = asm[\"___errno_location\"];\n\n    asm[\"___errno_location\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real____errno_location.apply(null, arguments);\n    };\n\n    var real__ctx__create = asm[\"_ctx__create\"];\n\n    asm[\"_ctx__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ctx__create.apply(null, arguments);\n    };\n\n    var real__ctx__get = asm[\"_ctx__get\"];\n\n    asm[\"_ctx__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ctx__get.apply(null, arguments);\n    };\n\n    var real__ctx__type = asm[\"_ctx__type\"];\n\n    asm[\"_ctx__type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ctx__type.apply(null, arguments);\n    };\n\n    var real__double_array__to_string = asm[\"_double_array__to_string\"];\n\n    asm[\"_double_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__double_array__to_string.apply(null, arguments);\n    };\n\n    var real__fflush = asm[\"_fflush\"];\n\n    asm[\"_fflush\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__fflush.apply(null, arguments);\n    };\n\n    var real__free = asm[\"_free\"];\n\n    asm[\"_free\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__free.apply(null, arguments);\n    };\n\n    var real__function__create = asm[\"_function__create\"];\n\n    asm[\"_function__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__function__create.apply(null, arguments);\n    };\n\n    var real__function__pipe_key_with = asm[\"_function__pipe_key_with\"];\n\n    asm[\"_function__pipe_key_with\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__function__pipe_key_with.apply(null, arguments);\n    };\n\n    var real__function__pipe_with = asm[\"_function__pipe_with\"];\n\n    asm[\"_function__pipe_with\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__function__pipe_with.apply(null, arguments);\n    };\n\n    var real__gctx__bind = asm[\"_gctx__bind\"];\n\n    asm[\"_gctx__bind\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__bind.apply(null, arguments);\n    };\n\n    var real__gctx__declare = asm[\"_gctx__declare\"];\n\n    asm[\"_gctx__declare\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__declare.apply(null, arguments);\n    };\n\n    var real__gctx__declare_double = asm[\"_gctx__declare_double\"];\n\n    asm[\"_gctx__declare_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__declare_double.apply(null, arguments);\n    };\n\n    var real__gctx__declare_int = asm[\"_gctx__declare_int\"];\n\n    asm[\"_gctx__declare_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__declare_int.apply(null, arguments);\n    };\n\n    var real__gctx__declare_long = asm[\"_gctx__declare_long\"];\n\n    asm[\"_gctx__declare_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__declare_long.apply(null, arguments);\n    };\n\n    var real__gctx__declare_null = asm[\"_gctx__declare_null\"];\n\n    asm[\"_gctx__declare_null\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__declare_null.apply(null, arguments);\n    };\n\n    var real__gctx__declare_raw_string = asm[\"_gctx__declare_raw_string\"];\n\n    asm[\"_gctx__declare_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__declare_raw_string.apply(null, arguments);\n    };\n\n    var real__gctx__execute = asm[\"_gctx__execute\"];\n\n    asm[\"_gctx__execute\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__execute.apply(null, arguments);\n    };\n\n    var real__gctx__execute_key = asm[\"_gctx__execute_key\"];\n\n    asm[\"_gctx__execute_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__execute_key.apply(null, arguments);\n    };\n\n    var real__gctx__execute_prepared = asm[\"_gctx__execute_prepared\"];\n\n    asm[\"_gctx__execute_prepared\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__execute_prepared.apply(null, arguments);\n    };\n\n    var real__gctx__get_bool = asm[\"_gctx__get_bool\"];\n\n    asm[\"_gctx__get_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__get_bool.apply(null, arguments);\n    };\n\n    var real__gctx__get_double = asm[\"_gctx__get_double\"];\n\n    asm[\"_gctx__get_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__get_double.apply(null, arguments);\n    };\n\n    var real__gctx__get_int = asm[\"_gctx__get_int\"];\n\n    asm[\"_gctx__get_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__get_int.apply(null, arguments);\n    };\n\n    var real__gctx__get_long = asm[\"_gctx__get_long\"];\n\n    asm[\"_gctx__get_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__get_long.apply(null, arguments);\n    };\n\n    var real__gctx__get_raw_string = asm[\"_gctx__get_raw_string\"];\n\n    asm[\"_gctx__get_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__get_raw_string.apply(null, arguments);\n    };\n\n    var real__gctx__get_ulong = asm[\"_gctx__get_ulong\"];\n\n    asm[\"_gctx__get_ulong\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__get_ulong.apply(null, arguments);\n    };\n\n    var real__gctx__graph = asm[\"_gctx__graph\"];\n\n    asm[\"_gctx__graph\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__graph.apply(null, arguments);\n    };\n\n    var real__gctx__json = asm[\"_gctx__json\"];\n\n    asm[\"_gctx__json\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__json.apply(null, arguments);\n    };\n\n    var real__gctx__on_end = asm[\"_gctx__on_end\"];\n\n    asm[\"_gctx__on_end\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__on_end.apply(null, arguments);\n    };\n\n    var real__gctx__ordinal = asm[\"_gctx__ordinal\"];\n\n    asm[\"_gctx__ordinal\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__ordinal.apply(null, arguments);\n    };\n\n    var real__gctx__path = asm[\"_gctx__path\"];\n\n    asm[\"_gctx__path\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__path.apply(null, arguments);\n    };\n\n    var real__gctx__prepare = asm[\"_gctx__prepare\"];\n\n    asm[\"_gctx__prepare\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__prepare.apply(null, arguments);\n    };\n\n    var real__gctx__prepare_key = asm[\"_gctx__prepare_key\"];\n\n    asm[\"_gctx__prepare_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__prepare_key.apply(null, arguments);\n    };\n\n    var real__gctx__set_double = asm[\"_gctx__set_double\"];\n\n    asm[\"_gctx__set_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__set_double.apply(null, arguments);\n    };\n\n    var real__gctx__set_int = asm[\"_gctx__set_int\"];\n\n    asm[\"_gctx__set_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__set_int.apply(null, arguments);\n    };\n\n    var real__gctx__set_long = asm[\"_gctx__set_long\"];\n\n    asm[\"_gctx__set_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__set_long.apply(null, arguments);\n    };\n\n    var real__gctx__set_raw_string = asm[\"_gctx__set_raw_string\"];\n\n    asm[\"_gctx__set_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gctx__set_raw_string.apply(null, arguments);\n    };\n\n    var real__gdouble_array__get = asm[\"_gdouble_array__get\"];\n\n    asm[\"_gdouble_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gdouble_array__get.apply(null, arguments);\n    };\n\n    var real__gdouble_array__set = asm[\"_gdouble_array__set\"];\n\n    asm[\"_gdouble_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gdouble_array__set.apply(null, arguments);\n    };\n\n    var real__gdouble_array__size = asm[\"_gdouble_array__size\"];\n\n    asm[\"_gdouble_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gdouble_array__size.apply(null, arguments);\n    };\n\n    var real__gfunction__create = asm[\"_gfunction__create\"];\n\n    asm[\"_gfunction__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gfunction__create.apply(null, arguments);\n    };\n\n    var real__gfunction__parse = asm[\"_gfunction__parse\"];\n\n    asm[\"_gfunction__parse\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gfunction__parse.apply(null, arguments);\n    };\n\n    var real__gfunction__pipe = asm[\"_gfunction__pipe\"];\n\n    asm[\"_gfunction__pipe\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gfunction__pipe.apply(null, arguments);\n    };\n\n    var real__gfunction__pipe_key = asm[\"_gfunction__pipe_key\"];\n\n    asm[\"_gfunction__pipe_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gfunction__pipe_key.apply(null, arguments);\n    };\n\n    var real__gfunction__unsafe_dec_ref = asm[\"_gfunction__unsafe_dec_ref\"];\n\n    asm[\"_gfunction__unsafe_dec_ref\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gfunction__unsafe_dec_ref.apply(null, arguments);\n    };\n\n    var real__gfunction__unsafe_set_key = asm[\"_gfunction__unsafe_set_key\"];\n\n    asm[\"_gfunction__unsafe_set_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gfunction__unsafe_set_key.apply(null, arguments);\n    };\n\n    var real__ggraph__create_node_volatile = asm[\"_ggraph__create_node_volatile\"];\n\n    asm[\"_ggraph__create_node_volatile\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__create_node_volatile.apply(null, arguments);\n    };\n\n    var real__ggraph__declare_function = asm[\"_ggraph__declare_function\"];\n\n    asm[\"_ggraph__declare_function\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__declare_function.apply(null, arguments);\n    };\n\n    var real__ggraph__declare_meta = asm[\"_ggraph__declare_meta\"];\n\n    asm[\"_ggraph__declare_meta\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__declare_meta.apply(null, arguments);\n    };\n\n    var real__ggraph__declare_plugin = asm[\"_ggraph__declare_plugin\"];\n\n    asm[\"_ggraph__declare_plugin\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__declare_plugin.apply(null, arguments);\n    };\n\n    var real__ggraph__declare_type = asm[\"_ggraph__declare_type\"];\n\n    asm[\"_ggraph__declare_type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__declare_type.apply(null, arguments);\n    };\n\n    var real__ggraph__destroy = asm[\"_ggraph__destroy\"];\n\n    asm[\"_ggraph__destroy\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__destroy.apply(null, arguments);\n    };\n\n    var real__ggraph__disable_debug = asm[\"_ggraph__disable_debug\"];\n\n    asm[\"_ggraph__disable_debug\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__disable_debug.apply(null, arguments);\n    };\n\n    var real__ggraph__enable_debug = asm[\"_ggraph__enable_debug\"];\n\n    asm[\"_ggraph__enable_debug\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__enable_debug.apply(null, arguments);\n    };\n\n    var real__ggraph__function = asm[\"_ggraph__function\"];\n\n    asm[\"_ggraph__function\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__function.apply(null, arguments);\n    };\n\n    var real__ggraph__is_meta = asm[\"_ggraph__is_meta\"];\n\n    asm[\"_ggraph__is_meta\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__is_meta.apply(null, arguments);\n    };\n\n    var real__ggraph__meta = asm[\"_ggraph__meta\"];\n\n    asm[\"_ggraph__meta\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__meta.apply(null, arguments);\n    };\n\n    var real__ggraph__type = asm[\"_ggraph__type\"];\n\n    asm[\"_ggraph__type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph__type.apply(null, arguments);\n    };\n\n    var real__ggraph_export_functions = asm[\"_ggraph_export_functions\"];\n\n    asm[\"_ggraph_export_functions\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph_export_functions.apply(null, arguments);\n    };\n\n    var real__ggraph_export_types = asm[\"_ggraph_export_types\"];\n\n    asm[\"_ggraph_export_types\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ggraph_export_types.apply(null, arguments);\n    };\n\n    var real__gint_array__get = asm[\"_gint_array__get\"];\n\n    asm[\"_gint_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gint_array__get.apply(null, arguments);\n    };\n\n    var real__gint_array__set = asm[\"_gint_array__set\"];\n\n    asm[\"_gint_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gint_array__set.apply(null, arguments);\n    };\n\n    var real__gint_array__size = asm[\"_gint_array__size\"];\n\n    asm[\"_gint_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gint_array__size.apply(null, arguments);\n    };\n\n    var real__glong_array__get = asm[\"_glong_array__get\"];\n\n    asm[\"_glong_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__glong_array__get.apply(null, arguments);\n    };\n\n    var real__glong_array__set = asm[\"_glong_array__set\"];\n\n    asm[\"_glong_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__glong_array__set.apply(null, arguments);\n    };\n\n    var real__glong_array__size = asm[\"_glong_array__size\"];\n\n    asm[\"_glong_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__glong_array__size.apply(null, arguments);\n    };\n\n    var real__gnode__get_bool = asm[\"_gnode__get_bool\"];\n\n    asm[\"_gnode__get_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__get_bool.apply(null, arguments);\n    };\n\n    var real__gnode__get_double = asm[\"_gnode__get_double\"];\n\n    asm[\"_gnode__get_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__get_double.apply(null, arguments);\n    };\n\n    var real__gnode__get_int = asm[\"_gnode__get_int\"];\n\n    asm[\"_gnode__get_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__get_int.apply(null, arguments);\n    };\n\n    var real__gnode__get_long = asm[\"_gnode__get_long\"];\n\n    asm[\"_gnode__get_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__get_long.apply(null, arguments);\n    };\n\n    var real__gnode__get_or_create = asm[\"_gnode__get_or_create\"];\n\n    asm[\"_gnode__get_or_create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__get_or_create.apply(null, arguments);\n    };\n\n    var real__gnode__get_raw_string = asm[\"_gnode__get_raw_string\"];\n\n    asm[\"_gnode__get_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__get_raw_string.apply(null, arguments);\n    };\n\n    var real__gnode__json = asm[\"_gnode__json\"];\n\n    asm[\"_gnode__json\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__json.apply(null, arguments);\n    };\n\n    var real__gnode__set = asm[\"_gnode__set\"];\n\n    asm[\"_gnode__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__set.apply(null, arguments);\n    };\n\n    var real__gnode__set_double = asm[\"_gnode__set_double\"];\n\n    asm[\"_gnode__set_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__set_double.apply(null, arguments);\n    };\n\n    var real__gnode__set_int = asm[\"_gnode__set_int\"];\n\n    asm[\"_gnode__set_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__set_int.apply(null, arguments);\n    };\n\n    var real__gnode__set_long = asm[\"_gnode__set_long\"];\n\n    asm[\"_gnode__set_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__set_long.apply(null, arguments);\n    };\n\n    var real__gnode__set_null = asm[\"_gnode__set_null\"];\n\n    asm[\"_gnode__set_null\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__set_null.apply(null, arguments);\n    };\n\n    var real__gnode__set_raw_string = asm[\"_gnode__set_raw_string\"];\n\n    asm[\"_gnode__set_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode__set_raw_string.apply(null, arguments);\n    };\n\n    var real__gnode_type__declare_attribute = asm[\"_gnode_type__declare_attribute\"];\n\n    asm[\"_gnode_type__declare_attribute\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode_type__declare_attribute.apply(null, arguments);\n    };\n\n    var real__gnode_type__declare_constant = asm[\"_gnode_type__declare_constant\"];\n\n    asm[\"_gnode_type__declare_constant\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode_type__declare_constant.apply(null, arguments);\n    };\n\n    var real__gnode_type__json_to = asm[\"_gnode_type__json_to\"];\n\n    asm[\"_gnode_type__json_to\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode_type__json_to.apply(null, arguments);\n    };\n\n    var real__gnode_type__key = asm[\"_gnode_type__key\"];\n\n    asm[\"_gnode_type__key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gnode_type__key.apply(null, arguments);\n    };\n\n    var real__gobject__un_mark = asm[\"_gobject__un_mark\"];\n\n    asm[\"_gobject__un_mark\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gobject__un_mark.apply(null, arguments);\n    };\n\n    var real__graph__configure_plugin = asm[\"_graph__configure_plugin\"];\n\n    asm[\"_graph__configure_plugin\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__graph__configure_plugin.apply(null, arguments);\n    };\n\n    var real__graph__create = asm[\"_graph__create\"];\n\n    asm[\"_graph__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__graph__create.apply(null, arguments);\n    };\n\n    var real__graph__size_buffer = asm[\"_graph__size_buffer\"];\n\n    asm[\"_graph__size_buffer\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__graph__size_buffer.apply(null, arguments);\n    };\n\n    var real__graph__size_cache = asm[\"_graph__size_cache\"];\n\n    asm[\"_graph__size_cache\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__graph__size_cache.apply(null, arguments);\n    };\n\n    var real__graph__size_heap = asm[\"_graph__size_heap\"];\n\n    asm[\"_graph__size_heap\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__graph__size_heap.apply(null, arguments);\n    };\n\n    var real__gstring__close = asm[\"_gstring__close\"];\n\n    asm[\"_gstring__close\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring__close.apply(null, arguments);\n    };\n\n    var real__gstring__create = asm[\"_gstring__create\"];\n\n    asm[\"_gstring__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring__create.apply(null, arguments);\n    };\n\n    var real__gstring__get = asm[\"_gstring__get\"];\n\n    asm[\"_gstring__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring__get.apply(null, arguments);\n    };\n\n    var real__gstring__prepare = asm[\"_gstring__prepare\"];\n\n    asm[\"_gstring__prepare\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring__prepare.apply(null, arguments);\n    };\n\n    var real__gstring_array__add = asm[\"_gstring_array__add\"];\n\n    asm[\"_gstring_array__add\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring_array__add.apply(null, arguments);\n    };\n\n    var real__gstring_array__create = asm[\"_gstring_array__create\"];\n\n    asm[\"_gstring_array__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring_array__create.apply(null, arguments);\n    };\n\n    var real__gstring_array__get = asm[\"_gstring_array__get\"];\n\n    asm[\"_gstring_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring_array__get.apply(null, arguments);\n    };\n\n    var real__gstring_array__set = asm[\"_gstring_array__set\"];\n\n    asm[\"_gstring_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring_array__set.apply(null, arguments);\n    };\n\n    var real__gstring_array__size = asm[\"_gstring_array__size\"];\n\n    asm[\"_gstring_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gstring_array__size.apply(null, arguments);\n    };\n\n    var real__gulong_array__get = asm[\"_gulong_array__get\"];\n\n    asm[\"_gulong_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gulong_array__get.apply(null, arguments);\n    };\n\n    var real__gulong_array__set = asm[\"_gulong_array__set\"];\n\n    asm[\"_gulong_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gulong_array__set.apply(null, arguments);\n    };\n\n    var real__gulong_array__size = asm[\"_gulong_array__size\"];\n\n    asm[\"_gulong_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gulong_array__size.apply(null, arguments);\n    };\n\n    var real__gwebsocket_client__on_msg = asm[\"_gwebsocket_client__on_msg\"];\n\n    asm[\"_gwebsocket_client__on_msg\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__gwebsocket_client__on_msg.apply(null, arguments);\n    };\n\n    var real__int_array__to_string = asm[\"_int_array__to_string\"];\n\n    asm[\"_int_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__int_array__to_string.apply(null, arguments);\n    };\n\n    var real__js_free = asm[\"_js_free\"];\n\n    asm[\"_js_free\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__js_free.apply(null, arguments);\n    };\n\n    var real__js_malloc = asm[\"_js_malloc\"];\n\n    asm[\"_js_malloc\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__js_malloc.apply(null, arguments);\n    };\n\n    var real__llvm_bswap_i32 = asm[\"_llvm_bswap_i32\"];\n\n    asm[\"_llvm_bswap_i32\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__llvm_bswap_i32.apply(null, arguments);\n    };\n\n    var real__long_array__to_string = asm[\"_long_array__to_string\"];\n\n    asm[\"_long_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__long_array__to_string.apply(null, arguments);\n    };\n\n    var real__main = asm[\"_main\"];\n\n    asm[\"_main\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__main.apply(null, arguments);\n    };\n\n    var real__malloc = asm[\"_malloc\"];\n\n    asm[\"_malloc\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__malloc.apply(null, arguments);\n    };\n\n    var real__node__get = asm[\"_node__get\"];\n\n    asm[\"_node__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node__get.apply(null, arguments);\n    };\n\n    var real__node__graph = asm[\"_node__graph\"];\n\n    asm[\"_node__graph\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node__graph.apply(null, arguments);\n    };\n\n    var real__node__type = asm[\"_node__type\"];\n\n    asm[\"_node__type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node__type.apply(null, arguments);\n    };\n\n    var real__node_type__declare_constant_double = asm[\"_node_type__declare_constant_double\"];\n\n    asm[\"_node_type__declare_constant_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node_type__declare_constant_double.apply(null, arguments);\n    };\n\n    var real__node_type__declare_constant_int = asm[\"_node_type__declare_constant_int\"];\n\n    asm[\"_node_type__declare_constant_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node_type__declare_constant_int.apply(null, arguments);\n    };\n\n    var real__node_type__declare_constant_long = asm[\"_node_type__declare_constant_long\"];\n\n    asm[\"_node_type__declare_constant_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node_type__declare_constant_long.apply(null, arguments);\n    };\n\n    var real__node_type__declare_constant_raw_string = asm[\"_node_type__declare_constant_raw_string\"];\n\n    asm[\"_node_type__declare_constant_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node_type__declare_constant_raw_string.apply(null, arguments);\n    };\n\n    var real__node_type__graph = asm[\"_node_type__graph\"];\n\n    asm[\"_node_type__graph\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__node_type__graph.apply(null, arguments);\n    };\n\n    var real__params__add_bool = asm[\"_params__add_bool\"];\n\n    asm[\"_params__add_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_bool.apply(null, arguments);\n    };\n\n    var real__params__add_double = asm[\"_params__add_double\"];\n\n    asm[\"_params__add_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_double.apply(null, arguments);\n    };\n\n    var real__params__add_function_key = asm[\"_params__add_function_key\"];\n\n    asm[\"_params__add_function_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_function_key.apply(null, arguments);\n    };\n\n    var real__params__add_int = asm[\"_params__add_int\"];\n\n    asm[\"_params__add_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_int.apply(null, arguments);\n    };\n\n    var real__params__add_long = asm[\"_params__add_long\"];\n\n    asm[\"_params__add_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_long.apply(null, arguments);\n    };\n\n    var real__params__add_null = asm[\"_params__add_null\"];\n\n    asm[\"_params__add_null\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_null.apply(null, arguments);\n    };\n\n    var real__params__add_object = asm[\"_params__add_object\"];\n\n    asm[\"_params__add_object\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_object.apply(null, arguments);\n    };\n\n    var real__params__add_string = asm[\"_params__add_string\"];\n\n    asm[\"_params__add_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_string.apply(null, arguments);\n    };\n\n    var real__params__add_var_key = asm[\"_params__add_var_key\"];\n\n    asm[\"_params__add_var_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_var_key.apply(null, arguments);\n    };\n\n    var real__params__add_var_key_new = asm[\"_params__add_var_key_new\"];\n\n    asm[\"_params__add_var_key_new\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__add_var_key_new.apply(null, arguments);\n    };\n\n    var real__params__create = asm[\"_params__create\"];\n\n    asm[\"_params__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__params__create.apply(null, arguments);\n    };\n\n    var real__plugin__create = asm[\"_plugin__create\"];\n\n    asm[\"_plugin__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__plugin__create.apply(null, arguments);\n    };\n\n    var real__read_bool = asm[\"_read_bool\"];\n\n    asm[\"_read_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__read_bool.apply(null, arguments);\n    };\n\n    var real__read_double = asm[\"_read_double\"];\n\n    asm[\"_read_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__read_double.apply(null, arguments);\n    };\n\n    var real__read_int = asm[\"_read_int\"];\n\n    asm[\"_read_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__read_int.apply(null, arguments);\n    };\n\n    var real__read_long = asm[\"_read_long\"];\n\n    asm[\"_read_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__read_long.apply(null, arguments);\n    };\n\n    var real__read_ulong = asm[\"_read_ulong\"];\n\n    asm[\"_read_ulong\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__read_ulong.apply(null, arguments);\n    };\n\n    var real__sbrk = asm[\"_sbrk\"];\n\n    asm[\"_sbrk\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__sbrk.apply(null, arguments);\n    };\n\n    var real__string__set_size = asm[\"_string__set_size\"];\n\n    asm[\"_string__set_size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__string__set_size.apply(null, arguments);\n    };\n\n    var real__string_array__to_string = asm[\"_string_array__to_string\"];\n\n    asm[\"_string_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__string_array__to_string.apply(null, arguments);\n    };\n\n    var real__ulong_array__to_string = asm[\"_ulong_array__to_string\"];\n\n    asm[\"_ulong_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real__ulong_array__to_string.apply(null, arguments);\n    };\n\n    var real_establishStackSpace = asm[\"establishStackSpace\"];\n\n    asm[\"establishStackSpace\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_establishStackSpace.apply(null, arguments);\n    };\n\n    var real_getTempRet0 = asm[\"getTempRet0\"];\n\n    asm[\"getTempRet0\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_getTempRet0.apply(null, arguments);\n    };\n\n    var real_setTempRet0 = asm[\"setTempRet0\"];\n\n    asm[\"setTempRet0\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_setTempRet0.apply(null, arguments);\n    };\n\n    var real_setThrew = asm[\"setThrew\"];\n\n    asm[\"setThrew\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_setThrew.apply(null, arguments);\n    };\n\n    var real_stackAlloc = asm[\"stackAlloc\"];\n\n    asm[\"stackAlloc\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_stackAlloc.apply(null, arguments);\n    };\n\n    var real_stackRestore = asm[\"stackRestore\"];\n\n    asm[\"stackRestore\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_stackRestore.apply(null, arguments);\n    };\n\n    var real_stackSave = asm[\"stackSave\"];\n\n    asm[\"stackSave\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return real_stackSave.apply(null, arguments);\n    };\n\n    Module[\"asm\"] = asm;\n\n    var ___errno_location = Module[\"___errno_location\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"___errno_location\"].apply(null, arguments);\n    };\n\n    var _ctx__create = Module[\"_ctx__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ctx__create\"].apply(null, arguments);\n    };\n\n    var _ctx__get = Module[\"_ctx__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ctx__get\"].apply(null, arguments);\n    };\n\n    var _ctx__type = Module[\"_ctx__type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ctx__type\"].apply(null, arguments);\n    };\n\n    var _double_array__to_string = Module[\"_double_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_double_array__to_string\"].apply(null, arguments);\n    };\n\n    var _emscripten_replace_memory = Module[\"_emscripten_replace_memory\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_emscripten_replace_memory\"].apply(null, arguments);\n    };\n\n    var _fflush = Module[\"_fflush\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_fflush\"].apply(null, arguments);\n    };\n\n    var _free = Module[\"_free\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_free\"].apply(null, arguments);\n    };\n\n    var _function__create = Module[\"_function__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_function__create\"].apply(null, arguments);\n    };\n\n    var _function__pipe_key_with = Module[\"_function__pipe_key_with\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_function__pipe_key_with\"].apply(null, arguments);\n    };\n\n    var _function__pipe_with = Module[\"_function__pipe_with\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_function__pipe_with\"].apply(null, arguments);\n    };\n\n    var _gctx__bind = Module[\"_gctx__bind\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__bind\"].apply(null, arguments);\n    };\n\n    var _gctx__declare = Module[\"_gctx__declare\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__declare\"].apply(null, arguments);\n    };\n\n    var _gctx__declare_double = Module[\"_gctx__declare_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__declare_double\"].apply(null, arguments);\n    };\n\n    var _gctx__declare_int = Module[\"_gctx__declare_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__declare_int\"].apply(null, arguments);\n    };\n\n    var _gctx__declare_long = Module[\"_gctx__declare_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__declare_long\"].apply(null, arguments);\n    };\n\n    var _gctx__declare_null = Module[\"_gctx__declare_null\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__declare_null\"].apply(null, arguments);\n    };\n\n    var _gctx__declare_raw_string = Module[\"_gctx__declare_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__declare_raw_string\"].apply(null, arguments);\n    };\n\n    var _gctx__execute = Module[\"_gctx__execute\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__execute\"].apply(null, arguments);\n    };\n\n    var _gctx__execute_key = Module[\"_gctx__execute_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__execute_key\"].apply(null, arguments);\n    };\n\n    var _gctx__execute_prepared = Module[\"_gctx__execute_prepared\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__execute_prepared\"].apply(null, arguments);\n    };\n\n    var _gctx__get_bool = Module[\"_gctx__get_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__get_bool\"].apply(null, arguments);\n    };\n\n    var _gctx__get_double = Module[\"_gctx__get_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__get_double\"].apply(null, arguments);\n    };\n\n    var _gctx__get_int = Module[\"_gctx__get_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__get_int\"].apply(null, arguments);\n    };\n\n    var _gctx__get_long = Module[\"_gctx__get_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__get_long\"].apply(null, arguments);\n    };\n\n    var _gctx__get_raw_string = Module[\"_gctx__get_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__get_raw_string\"].apply(null, arguments);\n    };\n\n    var _gctx__get_ulong = Module[\"_gctx__get_ulong\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__get_ulong\"].apply(null, arguments);\n    };\n\n    var _gctx__graph = Module[\"_gctx__graph\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__graph\"].apply(null, arguments);\n    };\n\n    var _gctx__json = Module[\"_gctx__json\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__json\"].apply(null, arguments);\n    };\n\n    var _gctx__on_end = Module[\"_gctx__on_end\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__on_end\"].apply(null, arguments);\n    };\n\n    var _gctx__ordinal = Module[\"_gctx__ordinal\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__ordinal\"].apply(null, arguments);\n    };\n\n    var _gctx__path = Module[\"_gctx__path\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__path\"].apply(null, arguments);\n    };\n\n    var _gctx__prepare = Module[\"_gctx__prepare\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__prepare\"].apply(null, arguments);\n    };\n\n    var _gctx__prepare_key = Module[\"_gctx__prepare_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__prepare_key\"].apply(null, arguments);\n    };\n\n    var _gctx__set_double = Module[\"_gctx__set_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__set_double\"].apply(null, arguments);\n    };\n\n    var _gctx__set_int = Module[\"_gctx__set_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__set_int\"].apply(null, arguments);\n    };\n\n    var _gctx__set_long = Module[\"_gctx__set_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__set_long\"].apply(null, arguments);\n    };\n\n    var _gctx__set_raw_string = Module[\"_gctx__set_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gctx__set_raw_string\"].apply(null, arguments);\n    };\n\n    var _gdouble_array__get = Module[\"_gdouble_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gdouble_array__get\"].apply(null, arguments);\n    };\n\n    var _gdouble_array__set = Module[\"_gdouble_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gdouble_array__set\"].apply(null, arguments);\n    };\n\n    var _gdouble_array__size = Module[\"_gdouble_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gdouble_array__size\"].apply(null, arguments);\n    };\n\n    var _gfunction__create = Module[\"_gfunction__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gfunction__create\"].apply(null, arguments);\n    };\n\n    var _gfunction__parse = Module[\"_gfunction__parse\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gfunction__parse\"].apply(null, arguments);\n    };\n\n    var _gfunction__pipe = Module[\"_gfunction__pipe\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gfunction__pipe\"].apply(null, arguments);\n    };\n\n    var _gfunction__pipe_key = Module[\"_gfunction__pipe_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gfunction__pipe_key\"].apply(null, arguments);\n    };\n\n    var _gfunction__unsafe_dec_ref = Module[\"_gfunction__unsafe_dec_ref\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gfunction__unsafe_dec_ref\"].apply(null, arguments);\n    };\n\n    var _gfunction__unsafe_set_key = Module[\"_gfunction__unsafe_set_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gfunction__unsafe_set_key\"].apply(null, arguments);\n    };\n\n    var _ggraph__create_node_volatile = Module[\"_ggraph__create_node_volatile\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__create_node_volatile\"].apply(null, arguments);\n    };\n\n    var _ggraph__declare_function = Module[\"_ggraph__declare_function\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__declare_function\"].apply(null, arguments);\n    };\n\n    var _ggraph__declare_meta = Module[\"_ggraph__declare_meta\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__declare_meta\"].apply(null, arguments);\n    };\n\n    var _ggraph__declare_plugin = Module[\"_ggraph__declare_plugin\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__declare_plugin\"].apply(null, arguments);\n    };\n\n    var _ggraph__declare_type = Module[\"_ggraph__declare_type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__declare_type\"].apply(null, arguments);\n    };\n\n    var _ggraph__destroy = Module[\"_ggraph__destroy\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__destroy\"].apply(null, arguments);\n    };\n\n    var _ggraph__disable_debug = Module[\"_ggraph__disable_debug\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__disable_debug\"].apply(null, arguments);\n    };\n\n    var _ggraph__enable_debug = Module[\"_ggraph__enable_debug\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__enable_debug\"].apply(null, arguments);\n    };\n\n    var _ggraph__function = Module[\"_ggraph__function\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__function\"].apply(null, arguments);\n    };\n\n    var _ggraph__is_meta = Module[\"_ggraph__is_meta\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__is_meta\"].apply(null, arguments);\n    };\n\n    var _ggraph__meta = Module[\"_ggraph__meta\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__meta\"].apply(null, arguments);\n    };\n\n    var _ggraph__type = Module[\"_ggraph__type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph__type\"].apply(null, arguments);\n    };\n\n    var _ggraph_export_functions = Module[\"_ggraph_export_functions\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph_export_functions\"].apply(null, arguments);\n    };\n\n    var _ggraph_export_types = Module[\"_ggraph_export_types\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ggraph_export_types\"].apply(null, arguments);\n    };\n\n    var _gint_array__get = Module[\"_gint_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gint_array__get\"].apply(null, arguments);\n    };\n\n    var _gint_array__set = Module[\"_gint_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gint_array__set\"].apply(null, arguments);\n    };\n\n    var _gint_array__size = Module[\"_gint_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gint_array__size\"].apply(null, arguments);\n    };\n\n    var _glong_array__get = Module[\"_glong_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_glong_array__get\"].apply(null, arguments);\n    };\n\n    var _glong_array__set = Module[\"_glong_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_glong_array__set\"].apply(null, arguments);\n    };\n\n    var _glong_array__size = Module[\"_glong_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_glong_array__size\"].apply(null, arguments);\n    };\n\n    var _gnode__get_bool = Module[\"_gnode__get_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__get_bool\"].apply(null, arguments);\n    };\n\n    var _gnode__get_double = Module[\"_gnode__get_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__get_double\"].apply(null, arguments);\n    };\n\n    var _gnode__get_int = Module[\"_gnode__get_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__get_int\"].apply(null, arguments);\n    };\n\n    var _gnode__get_long = Module[\"_gnode__get_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__get_long\"].apply(null, arguments);\n    };\n\n    var _gnode__get_or_create = Module[\"_gnode__get_or_create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__get_or_create\"].apply(null, arguments);\n    };\n\n    var _gnode__get_raw_string = Module[\"_gnode__get_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__get_raw_string\"].apply(null, arguments);\n    };\n\n    var _gnode__json = Module[\"_gnode__json\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__json\"].apply(null, arguments);\n    };\n\n    var _gnode__set = Module[\"_gnode__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__set\"].apply(null, arguments);\n    };\n\n    var _gnode__set_double = Module[\"_gnode__set_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__set_double\"].apply(null, arguments);\n    };\n\n    var _gnode__set_int = Module[\"_gnode__set_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__set_int\"].apply(null, arguments);\n    };\n\n    var _gnode__set_long = Module[\"_gnode__set_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__set_long\"].apply(null, arguments);\n    };\n\n    var _gnode__set_null = Module[\"_gnode__set_null\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__set_null\"].apply(null, arguments);\n    };\n\n    var _gnode__set_raw_string = Module[\"_gnode__set_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode__set_raw_string\"].apply(null, arguments);\n    };\n\n    var _gnode_type__declare_attribute = Module[\"_gnode_type__declare_attribute\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode_type__declare_attribute\"].apply(null, arguments);\n    };\n\n    var _gnode_type__declare_constant = Module[\"_gnode_type__declare_constant\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode_type__declare_constant\"].apply(null, arguments);\n    };\n\n    var _gnode_type__json_to = Module[\"_gnode_type__json_to\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode_type__json_to\"].apply(null, arguments);\n    };\n\n    var _gnode_type__key = Module[\"_gnode_type__key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gnode_type__key\"].apply(null, arguments);\n    };\n\n    var _gobject__un_mark = Module[\"_gobject__un_mark\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gobject__un_mark\"].apply(null, arguments);\n    };\n\n    var _graph__configure_plugin = Module[\"_graph__configure_plugin\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_graph__configure_plugin\"].apply(null, arguments);\n    };\n\n    var _graph__create = Module[\"_graph__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_graph__create\"].apply(null, arguments);\n    };\n\n    var _graph__size_buffer = Module[\"_graph__size_buffer\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_graph__size_buffer\"].apply(null, arguments);\n    };\n\n    var _graph__size_cache = Module[\"_graph__size_cache\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_graph__size_cache\"].apply(null, arguments);\n    };\n\n    var _graph__size_heap = Module[\"_graph__size_heap\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_graph__size_heap\"].apply(null, arguments);\n    };\n\n    var _gstring__close = Module[\"_gstring__close\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring__close\"].apply(null, arguments);\n    };\n\n    var _gstring__create = Module[\"_gstring__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring__create\"].apply(null, arguments);\n    };\n\n    var _gstring__get = Module[\"_gstring__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring__get\"].apply(null, arguments);\n    };\n\n    var _gstring__prepare = Module[\"_gstring__prepare\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring__prepare\"].apply(null, arguments);\n    };\n\n    var _gstring_array__add = Module[\"_gstring_array__add\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring_array__add\"].apply(null, arguments);\n    };\n\n    var _gstring_array__create = Module[\"_gstring_array__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring_array__create\"].apply(null, arguments);\n    };\n\n    var _gstring_array__get = Module[\"_gstring_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring_array__get\"].apply(null, arguments);\n    };\n\n    var _gstring_array__set = Module[\"_gstring_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring_array__set\"].apply(null, arguments);\n    };\n\n    var _gstring_array__size = Module[\"_gstring_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gstring_array__size\"].apply(null, arguments);\n    };\n\n    var _gulong_array__get = Module[\"_gulong_array__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gulong_array__get\"].apply(null, arguments);\n    };\n\n    var _gulong_array__set = Module[\"_gulong_array__set\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gulong_array__set\"].apply(null, arguments);\n    };\n\n    var _gulong_array__size = Module[\"_gulong_array__size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gulong_array__size\"].apply(null, arguments);\n    };\n\n    var _gwebsocket_client__on_msg = Module[\"_gwebsocket_client__on_msg\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_gwebsocket_client__on_msg\"].apply(null, arguments);\n    };\n\n    var _int_array__to_string = Module[\"_int_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_int_array__to_string\"].apply(null, arguments);\n    };\n\n    var _js_free = Module[\"_js_free\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_js_free\"].apply(null, arguments);\n    };\n\n    var _js_malloc = Module[\"_js_malloc\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_js_malloc\"].apply(null, arguments);\n    };\n\n    var _llvm_bswap_i32 = Module[\"_llvm_bswap_i32\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_llvm_bswap_i32\"].apply(null, arguments);\n    };\n\n    var _long_array__to_string = Module[\"_long_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_long_array__to_string\"].apply(null, arguments);\n    };\n\n    var _main = Module[\"_main\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_main\"].apply(null, arguments);\n    };\n\n    var _malloc = Module[\"_malloc\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_malloc\"].apply(null, arguments);\n    };\n\n    var _memcpy = Module[\"_memcpy\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_memcpy\"].apply(null, arguments);\n    };\n\n    var _memset = Module[\"_memset\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_memset\"].apply(null, arguments);\n    };\n\n    var _node__get = Module[\"_node__get\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node__get\"].apply(null, arguments);\n    };\n\n    var _node__graph = Module[\"_node__graph\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node__graph\"].apply(null, arguments);\n    };\n\n    var _node__type = Module[\"_node__type\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node__type\"].apply(null, arguments);\n    };\n\n    var _node_type__declare_constant_double = Module[\"_node_type__declare_constant_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node_type__declare_constant_double\"].apply(null, arguments);\n    };\n\n    var _node_type__declare_constant_int = Module[\"_node_type__declare_constant_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node_type__declare_constant_int\"].apply(null, arguments);\n    };\n\n    var _node_type__declare_constant_long = Module[\"_node_type__declare_constant_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node_type__declare_constant_long\"].apply(null, arguments);\n    };\n\n    var _node_type__declare_constant_raw_string = Module[\"_node_type__declare_constant_raw_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node_type__declare_constant_raw_string\"].apply(null, arguments);\n    };\n\n    var _node_type__graph = Module[\"_node_type__graph\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_node_type__graph\"].apply(null, arguments);\n    };\n\n    var _params__add_bool = Module[\"_params__add_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_bool\"].apply(null, arguments);\n    };\n\n    var _params__add_double = Module[\"_params__add_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_double\"].apply(null, arguments);\n    };\n\n    var _params__add_function_key = Module[\"_params__add_function_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_function_key\"].apply(null, arguments);\n    };\n\n    var _params__add_int = Module[\"_params__add_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_int\"].apply(null, arguments);\n    };\n\n    var _params__add_long = Module[\"_params__add_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_long\"].apply(null, arguments);\n    };\n\n    var _params__add_null = Module[\"_params__add_null\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_null\"].apply(null, arguments);\n    };\n\n    var _params__add_object = Module[\"_params__add_object\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_object\"].apply(null, arguments);\n    };\n\n    var _params__add_string = Module[\"_params__add_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_string\"].apply(null, arguments);\n    };\n\n    var _params__add_var_key = Module[\"_params__add_var_key\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_var_key\"].apply(null, arguments);\n    };\n\n    var _params__add_var_key_new = Module[\"_params__add_var_key_new\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__add_var_key_new\"].apply(null, arguments);\n    };\n\n    var _params__create = Module[\"_params__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_params__create\"].apply(null, arguments);\n    };\n\n    var _plugin__create = Module[\"_plugin__create\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_plugin__create\"].apply(null, arguments);\n    };\n\n    var _read_bool = Module[\"_read_bool\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_read_bool\"].apply(null, arguments);\n    };\n\n    var _read_double = Module[\"_read_double\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_read_double\"].apply(null, arguments);\n    };\n\n    var _read_int = Module[\"_read_int\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_read_int\"].apply(null, arguments);\n    };\n\n    var _read_long = Module[\"_read_long\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_read_long\"].apply(null, arguments);\n    };\n\n    var _read_ulong = Module[\"_read_ulong\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_read_ulong\"].apply(null, arguments);\n    };\n\n    var _sbrk = Module[\"_sbrk\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_sbrk\"].apply(null, arguments);\n    };\n\n    var _string__set_size = Module[\"_string__set_size\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_string__set_size\"].apply(null, arguments);\n    };\n\n    var _string_array__to_string = Module[\"_string_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_string_array__to_string\"].apply(null, arguments);\n    };\n\n    var _ulong_array__to_string = Module[\"_ulong_array__to_string\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"_ulong_array__to_string\"].apply(null, arguments);\n    };\n\n    var establishStackSpace = Module[\"establishStackSpace\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"establishStackSpace\"].apply(null, arguments);\n    };\n\n    var getTempRet0 = Module[\"getTempRet0\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"getTempRet0\"].apply(null, arguments);\n    };\n\n    var runPostSets = Module[\"runPostSets\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"runPostSets\"].apply(null, arguments);\n    };\n\n    var setTempRet0 = Module[\"setTempRet0\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"setTempRet0\"].apply(null, arguments);\n    };\n\n    var setThrew = Module[\"setThrew\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"setThrew\"].apply(null, arguments);\n    };\n\n    var stackAlloc = Module[\"stackAlloc\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"stackAlloc\"].apply(null, arguments);\n    };\n\n    var _stackRestore = Module[\"stackRestore\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"stackRestore\"].apply(null, arguments);\n    };\n\n    var _stackSave = Module[\"stackSave\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"stackSave\"].apply(null, arguments);\n    };\n\n    var dynCall_ii = Module[\"dynCall_ii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_ii\"].apply(null, arguments);\n    };\n\n    var dynCall_iiii = Module[\"dynCall_iiii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_iiii\"].apply(null, arguments);\n    };\n\n    var dynCall_iijji = Module[\"dynCall_iijji\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_iijji\"].apply(null, arguments);\n    };\n\n    var dynCall_vi = Module[\"dynCall_vi\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_vi\"].apply(null, arguments);\n    };\n\n    var dynCall_vii = Module[\"dynCall_vii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_vii\"].apply(null, arguments);\n    };\n\n    var dynCall_viidii = Module[\"dynCall_viidii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_viidii\"].apply(null, arguments);\n    };\n\n    var dynCall_viidiiii = Module[\"dynCall_viidiiii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_viidiiii\"].apply(null, arguments);\n    };\n\n    var dynCall_viiidiidi = Module[\"dynCall_viiidiidi\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_viiidiidi\"].apply(null, arguments);\n    };\n\n    var dynCall_viiii = Module[\"dynCall_viiii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_viiii\"].apply(null, arguments);\n    };\n\n    var dynCall_viiiii = Module[\"dynCall_viiiii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_viiiii\"].apply(null, arguments);\n    };\n\n    var dynCall_viiiiii = Module[\"dynCall_viiiiii\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_viiiiii\"].apply(null, arguments);\n    };\n\n    var dynCall_vijj = Module[\"dynCall_vijj\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_vijj\"].apply(null, arguments);\n    };\n\n    var dynCall_vijji = Module[\"dynCall_vijji\"] = function () {\n      assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');\n      assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');\n      return Module[\"asm\"][\"dynCall_vijji\"].apply(null, arguments);\n    };\n\n    ; // === Auto-generated postamble setup entry stuff ===\n\n    Module['asm'] = asm;\n    if (!Module[\"intArrayFromString\"]) Module[\"intArrayFromString\"] = function () {\n      abort(\"'intArrayFromString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"intArrayToString\"]) Module[\"intArrayToString\"] = function () {\n      abort(\"'intArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"ccall\"]) Module[\"ccall\"] = function () {\n      abort(\"'ccall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"cwrap\"]) Module[\"cwrap\"] = function () {\n      abort(\"'cwrap' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"setValue\"]) Module[\"setValue\"] = function () {\n      abort(\"'setValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"getValue\"]) Module[\"getValue\"] = function () {\n      abort(\"'getValue' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"allocate\"]) Module[\"allocate\"] = function () {\n      abort(\"'allocate' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"getMemory\"]) Module[\"getMemory\"] = function () {\n      abort(\"'getMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    Module[\"Pointer_stringify\"] = Pointer_stringify;\n    if (!Module[\"AsciiToString\"]) Module[\"AsciiToString\"] = function () {\n      abort(\"'AsciiToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stringToAscii\"]) Module[\"stringToAscii\"] = function () {\n      abort(\"'stringToAscii' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"UTF8ArrayToString\"]) Module[\"UTF8ArrayToString\"] = function () {\n      abort(\"'UTF8ArrayToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"UTF8ToString\"]) Module[\"UTF8ToString\"] = function () {\n      abort(\"'UTF8ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stringToUTF8Array\"]) Module[\"stringToUTF8Array\"] = function () {\n      abort(\"'stringToUTF8Array' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stringToUTF8\"]) Module[\"stringToUTF8\"] = function () {\n      abort(\"'stringToUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"lengthBytesUTF8\"]) Module[\"lengthBytesUTF8\"] = function () {\n      abort(\"'lengthBytesUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"UTF16ToString\"]) Module[\"UTF16ToString\"] = function () {\n      abort(\"'UTF16ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stringToUTF16\"]) Module[\"stringToUTF16\"] = function () {\n      abort(\"'stringToUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"lengthBytesUTF16\"]) Module[\"lengthBytesUTF16\"] = function () {\n      abort(\"'lengthBytesUTF16' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"UTF32ToString\"]) Module[\"UTF32ToString\"] = function () {\n      abort(\"'UTF32ToString' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stringToUTF32\"]) Module[\"stringToUTF32\"] = function () {\n      abort(\"'stringToUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"lengthBytesUTF32\"]) Module[\"lengthBytesUTF32\"] = function () {\n      abort(\"'lengthBytesUTF32' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"allocateUTF8\"]) Module[\"allocateUTF8\"] = function () {\n      abort(\"'allocateUTF8' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stackTrace\"]) Module[\"stackTrace\"] = function () {\n      abort(\"'stackTrace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"addOnPreRun\"]) Module[\"addOnPreRun\"] = function () {\n      abort(\"'addOnPreRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"addOnInit\"]) Module[\"addOnInit\"] = function () {\n      abort(\"'addOnInit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"addOnPreMain\"]) Module[\"addOnPreMain\"] = function () {\n      abort(\"'addOnPreMain' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"addOnExit\"]) Module[\"addOnExit\"] = function () {\n      abort(\"'addOnExit' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"addOnPostRun\"]) Module[\"addOnPostRun\"] = function () {\n      abort(\"'addOnPostRun' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"writeStringToMemory\"]) Module[\"writeStringToMemory\"] = function () {\n      abort(\"'writeStringToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"writeArrayToMemory\"]) Module[\"writeArrayToMemory\"] = function () {\n      abort(\"'writeArrayToMemory' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    Module[\"writeAsciiToMemory\"] = writeAsciiToMemory;\n    if (!Module[\"addRunDependency\"]) Module[\"addRunDependency\"] = function () {\n      abort(\"'addRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"removeRunDependency\"]) Module[\"removeRunDependency\"] = function () {\n      abort(\"'removeRunDependency' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"ENV\"]) Module[\"ENV\"] = function () {\n      abort(\"'ENV' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"FS\"]) Module[\"FS\"] = function () {\n      abort(\"'FS' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"FS_createFolder\"]) Module[\"FS_createFolder\"] = function () {\n      abort(\"'FS_createFolder' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_createPath\"]) Module[\"FS_createPath\"] = function () {\n      abort(\"'FS_createPath' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_createDataFile\"]) Module[\"FS_createDataFile\"] = function () {\n      abort(\"'FS_createDataFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_createPreloadedFile\"]) Module[\"FS_createPreloadedFile\"] = function () {\n      abort(\"'FS_createPreloadedFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_createLazyFile\"]) Module[\"FS_createLazyFile\"] = function () {\n      abort(\"'FS_createLazyFile' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_createLink\"]) Module[\"FS_createLink\"] = function () {\n      abort(\"'FS_createLink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_createDevice\"]) Module[\"FS_createDevice\"] = function () {\n      abort(\"'FS_createDevice' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"FS_unlink\"]) Module[\"FS_unlink\"] = function () {\n      abort(\"'FS_unlink' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ). Alternatively, forcing filesystem support (-s FORCE_FILESYSTEM=1) can export this for you\");\n    };\n    if (!Module[\"GL\"]) Module[\"GL\"] = function () {\n      abort(\"'GL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"staticAlloc\"]) Module[\"staticAlloc\"] = function () {\n      abort(\"'staticAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"dynamicAlloc\"]) Module[\"dynamicAlloc\"] = function () {\n      abort(\"'dynamicAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"warnOnce\"]) Module[\"warnOnce\"] = function () {\n      abort(\"'warnOnce' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"loadDynamicLibrary\"]) Module[\"loadDynamicLibrary\"] = function () {\n      abort(\"'loadDynamicLibrary' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"loadWebAssemblyModule\"]) Module[\"loadWebAssemblyModule\"] = function () {\n      abort(\"'loadWebAssemblyModule' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"getLEB\"]) Module[\"getLEB\"] = function () {\n      abort(\"'getLEB' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"getFunctionTables\"]) Module[\"getFunctionTables\"] = function () {\n      abort(\"'getFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"alignFunctionTables\"]) Module[\"alignFunctionTables\"] = function () {\n      abort(\"'alignFunctionTables' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"registerFunctions\"]) Module[\"registerFunctions\"] = function () {\n      abort(\"'registerFunctions' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"addFunction\"]) Module[\"addFunction\"] = function () {\n      abort(\"'addFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"removeFunction\"]) Module[\"removeFunction\"] = function () {\n      abort(\"'removeFunction' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"getFuncWrapper\"]) Module[\"getFuncWrapper\"] = function () {\n      abort(\"'getFuncWrapper' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"prettyPrint\"]) Module[\"prettyPrint\"] = function () {\n      abort(\"'prettyPrint' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"makeBigInt\"]) Module[\"makeBigInt\"] = function () {\n      abort(\"'makeBigInt' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"dynCall\"]) Module[\"dynCall\"] = function () {\n      abort(\"'dynCall' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"getCompilerSetting\"]) Module[\"getCompilerSetting\"] = function () {\n      abort(\"'getCompilerSetting' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stackSave\"]) Module[\"stackSave\"] = function () {\n      abort(\"'stackSave' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stackRestore\"]) Module[\"stackRestore\"] = function () {\n      abort(\"'stackRestore' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"stackAlloc\"]) Module[\"stackAlloc\"] = function () {\n      abort(\"'stackAlloc' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"establishStackSpace\"]) Module[\"establishStackSpace\"] = function () {\n      abort(\"'establishStackSpace' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"print\"]) Module[\"print\"] = function () {\n      abort(\"'print' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"printErr\"]) Module[\"printErr\"] = function () {\n      abort(\"'printErr' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n    };\n    if (!Module[\"ALLOC_NORMAL\"]) Object.defineProperty(Module, \"ALLOC_NORMAL\", {\n      get: function get() {\n        abort(\"'ALLOC_NORMAL' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n      }\n    });\n    if (!Module[\"ALLOC_STACK\"]) Object.defineProperty(Module, \"ALLOC_STACK\", {\n      get: function get() {\n        abort(\"'ALLOC_STACK' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n      }\n    });\n    if (!Module[\"ALLOC_STATIC\"]) Object.defineProperty(Module, \"ALLOC_STATIC\", {\n      get: function get() {\n        abort(\"'ALLOC_STATIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n      }\n    });\n    if (!Module[\"ALLOC_DYNAMIC\"]) Object.defineProperty(Module, \"ALLOC_DYNAMIC\", {\n      get: function get() {\n        abort(\"'ALLOC_DYNAMIC' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n      }\n    });\n    if (!Module[\"ALLOC_NONE\"]) Object.defineProperty(Module, \"ALLOC_NONE\", {\n      get: function get() {\n        abort(\"'ALLOC_NONE' was not exported. add it to EXTRA_EXPORTED_RUNTIME_METHODS (see the FAQ)\");\n      }\n    }); // Modularize mode returns a function, which can be called to\n    // create instances. The instances provide a then() method,\n    // must like a Promise, that receives a callback. The callback\n    // is called when the module is ready to run, with the module\n    // as a parameter. (Like a Promise, it also returns the module\n    // so you can use the output of .then(..)).\n\n    Module['then'] = function (func) {\n      // We may already be ready to run code at this time. if\n      // so, just queue a call to the callback.\n      if (Module['calledRun']) {\n        func(Module);\n      } else {\n        // we are not ready to call then() yet. we must call it\n        // at the same time we would call onRuntimeInitialized.\n        var old = Module['onRuntimeInitialized'];\n\n        Module['onRuntimeInitialized'] = function () {\n          if (old) old();\n          func(Module);\n        };\n      }\n\n      return Module;\n    };\n    /**\n     * @constructor\n     * @extends {Error}\n     * @this {ExitStatus}\n     */\n\n\n    function ExitStatus(status) {\n      this.name = \"ExitStatus\";\n      this.message = \"Program terminated with exit(\" + status + \")\";\n      this.status = status;\n    }\n\n    ;\n    ExitStatus.prototype = new Error();\n    ExitStatus.prototype.constructor = ExitStatus;\n    var initialStackTop;\n    var calledMain = false;\n\n    dependenciesFulfilled = function runCaller() {\n      // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)\n      if (!Module['calledRun']) run();\n      if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled\n    };\n\n    Module['callMain'] = function callMain(args) {\n      assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');\n      assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');\n      args = args || [];\n      ensureInitRuntime();\n      var argc = args.length + 1;\n      var argv = stackAlloc((argc + 1) * 4);\n      HEAP32[argv >> 2] = allocateUTF8OnStack(Module['thisProgram']);\n\n      for (var i = 1; i < argc; i++) {\n        HEAP32[(argv >> 2) + i] = allocateUTF8OnStack(args[i - 1]);\n      }\n\n      HEAP32[(argv >> 2) + argc] = 0;\n\n      try {\n        var ret = Module['_main'](argc, argv, 0); // if we're not running an evented main loop, it's time to exit\n\n        exit(ret,\n        /* implicit = */\n        true);\n      } catch (e) {\n        if (e instanceof ExitStatus) {\n          // exit() throws this once it's done to make sure execution\n          // has been stopped completely\n          return;\n        } else if (e == 'SimulateInfiniteLoop') {\n          // running an evented main loop, don't immediately exit\n          Module['noExitRuntime'] = true;\n          return;\n        } else {\n          var toLog = e;\n\n          if (e && typeof e === 'object' && e.stack) {\n            toLog = [e, e.stack];\n          }\n\n          err('exception thrown: ' + toLog);\n          Module['quit'](1, e);\n        }\n      } finally {\n        calledMain = true;\n      }\n    };\n    /** @type {function(Array=)} */\n\n\n    function run(args) {\n      args = args || Module['arguments'];\n\n      if (runDependencies > 0) {\n        return;\n      }\n\n      writeStackCookie();\n      preRun();\n      if (runDependencies > 0) return; // a preRun added a dependency, run will be called later\n\n      if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame\n\n      function doRun() {\n        if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening\n\n        Module['calledRun'] = true;\n        if (ABORT) return;\n        ensureInitRuntime();\n        preMain();\n        if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();\n        if (Module['_main'] && shouldRunNow) Module['callMain'](args);\n        postRun();\n      }\n\n      if (Module['setStatus']) {\n        Module['setStatus']('Running...');\n        setTimeout(function () {\n          setTimeout(function () {\n            Module['setStatus']('');\n          }, 1);\n          doRun();\n        }, 1);\n      } else {\n        doRun();\n      }\n\n      checkStackCookie();\n    }\n\n    Module['run'] = run;\n\n    function checkUnflushedContent() {\n      // Compiler settings do not allow exiting the runtime, so flushing\n      // the streams is not possible. but in ASSERTIONS mode we check\n      // if there was something to flush, and if so tell the user they\n      // should request that the runtime be exitable.\n      // Normally we would not even include flush() at all, but in ASSERTIONS\n      // builds we do so just for this check, and here we see if there is any\n      // content to flush, that is, we check if there would have been\n      // something a non-ASSERTIONS build would have not seen.\n      // How we flush the streams depends on whether we are in FILESYSTEM=0\n      // mode (which has its own special function for this; otherwise, all\n      // the code is inside libc)\n      var print = out;\n      var printErr = err;\n      var has = false;\n\n      out = err = function err(x) {\n        has = true;\n      };\n\n      try {\n        // it doesn't matter if it fails\n        var flush = flush_NO_FILESYSTEM;\n        if (flush) flush(0);\n      } catch (e) {}\n\n      out = print;\n      err = printErr;\n\n      if (has) {\n        warnOnce('stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.');\n      }\n    }\n\n    function exit(status, implicit) {\n      checkUnflushedContent(); // if this is just main exit-ing implicitly, and the status is 0, then we\n      // don't need to do anything here and can just leave. if the status is\n      // non-zero, though, then we need to report it.\n      // (we may have warned about this earlier, if a situation justifies doing so)\n\n      if (implicit && Module['noExitRuntime'] && status === 0) {\n        return;\n      }\n\n      if (Module['noExitRuntime']) {\n        // if exit() was called, we may warn the user if the runtime isn't actually being shut down\n        if (!implicit) {\n          err('exit(' + status + ') called, but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)');\n        }\n      } else {\n        ABORT = true;\n        EXITSTATUS = status;\n        STACKTOP = initialStackTop;\n        exitRuntime();\n        if (Module['onExit']) Module['onExit'](status);\n      }\n\n      Module['quit'](status, new ExitStatus(status));\n    }\n\n    var abortDecorators = [];\n\n    function abort(what) {\n      if (Module['onAbort']) {\n        Module['onAbort'](what);\n      }\n\n      if (what !== undefined) {\n        out(what);\n        err(what);\n        what = JSON.stringify(what);\n      } else {\n        what = '';\n      }\n\n      ABORT = true;\n      EXITSTATUS = 1;\n      var extra = '';\n      var output = 'abort(' + what + ') at ' + stackTrace() + extra;\n\n      if (abortDecorators) {\n        abortDecorators.forEach(function (decorator) {\n          output = decorator(output, what);\n        });\n      }\n\n      throw output;\n    }\n\n    Module['abort'] = abort;\n\n    if (Module['preInit']) {\n      if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];\n\n      while (Module['preInit'].length > 0) {\n        Module['preInit'].pop()();\n      }\n    } // shouldRunNow refers to calling main(), not run().\n\n\n    var shouldRunNow = true;\n\n    if (Module['noInitialRun']) {\n      shouldRunNow = false;\n    }\n\n    Module[\"noExitRuntime\"] = true;\n    run(); // {{MODULE_ADDITIONS}}\n\n    return Module;\n  };\n}();\n\nexport default Module;","module.exports = \"/greycat-studio/0fc627bdb45fd04cad1c9cc52a734b0c.wasm\";","// tslint:disable-next-line:no-namespace\nexport namespace __hack {}\n\n// instruct monaco-editor how we named the\n// bundles that contain the web workers.\ndeclare global {\n  interface Window {\n    MonacoEnvironment: any;\n  }\n}\n\nself.MonacoEnvironment = {\n  getWorkerUrl(moduleId: string, label: string) {\n    if (label === 'typescript' || label === 'javascript') {\n      return `${process.env.PUBLIC_URL}/static/js/ts.worker.js`;\n    }\n    if (label === 'greycat') {\n      return `${process.env.PUBLIC_URL}/static/js/gc.worker.js`;\n    }\n    return `${process.env.PUBLIC_URL}/static/js/editor.worker.js`;\n  },\n};\n","import _classCallCheck from \"/home/leiko/dev/datathings/greycat/js/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/leiko/dev/datathings/greycat/js/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport greycat from '@greycat/core-wasm';\nimport Keys from './__gen/keys';\nimport WebSocket from 'isomorphic-ws';\nexport { default as Keys } from './__gen/keys';\nexport var NodeType =\n/*#__PURE__*/\nfunction () {\n  function NodeType(nptr) {\n    _classCallCheck(this, NodeType);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(NodeType, [{\n    key: \"declareFactory\",\n    value: function declareFactory(factory) {\n      var graph_ptr = greycat._node_type__graph(this.ptr);\n\n      var graph = GreyCat.elements[graph_ptr];\n      graph.factories[greycat._gnode_type__key(this.ptr)] = factory;\n    }\n  }, {\n    key: \"declareAttribute\",\n    value: function declareAttribute(key, value) {\n      if (typeof value === 'number') {\n        greycat._gnode_type__declare_attribute(this.ptr, GreyCat.paramToKey(key), value);\n      } else {\n        greycat._gnode_type__declare_attribute(this.ptr, GreyCat.paramToKey(key), GreyCat.hash(value));\n      }\n\n      return this;\n    }\n  }, {\n    key: \"declareConstant\",\n    value: function declareConstant(key, value) {\n      if (typeof value === 'string') {\n        var js_str = value;\n\n        var ptr_str = greycat._js_malloc(js_str.length + 1);\n\n        greycat.writeAsciiToMemory(js_str, ptr_str, false);\n\n        greycat._node_type__declare_constant_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n\n        greycat._js_free(ptr_str);\n      } else if (typeof value === 'number') {\n        if (value % 1 !== 0) {\n          greycat._node_type__declare_constant_double(this.ptr, GreyCat.paramToKey(key, this), value);\n        } else if (value > -9007199254740992 && value < 9007199254740992) {\n          greycat._node_type__declare_constant_int(this.ptr, GreyCat.paramToKey(key, this), value);\n        } else {\n          greycat._node_type__declare_constant_long(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n      } else if (value instanceof Function) {\n        greycat._gnode_type__declare_constant(this.ptr, GreyCat.paramToKey(key, this), value.ptr, Keys.g_function);\n      } else {\n        var graph_ptr = greycat._node_type__graph(this.ptr);\n\n        var anonymous_func_ptr = greycat._function__create(graph_ptr);\n\n        GreyCat.elements[anonymous_func_ptr] = value;\n\n        greycat._gnode_type__declare_constant(this.ptr, GreyCat.paramToKey(key, this), anonymous_func_ptr, Keys.g_function);\n\n        greycat._gobject__un_mark(anonymous_func_ptr, Keys.g_function);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"declareFunction\",\n    value: function declareFunction(key, value) {\n      return this;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var buffer = greycat._gstring__create();\n\n      greycat._gnode_type__json_to(this.ptr, buffer);\n\n      greycat._gstring__close(buffer);\n\n      var buffer_raw = greycat._gstring__get(buffer);\n\n      var result = greycat.Pointer_stringify(buffer_raw);\n\n      greycat._gobject__un_mark(buffer, Keys.g_string);\n\n      return result;\n    }\n  }]);\n\n  return NodeType;\n}();\nexport var Context =\n/*#__PURE__*/\nfunction () {\n  function Context(nptr) {\n    _classCallCheck(this, Context);\n\n    this.ptr = 0;\n    this.userData = {};\n    this.ptr = nptr;\n  }\n\n  _createClass(Context, [{\n    key: \"execute\",\n    value: function execute(f) {\n      if (typeof f === 'number') {\n        greycat._gctx__execute_key(this.ptr, f);\n      } else if (typeof f === 'string') {\n        greycat._gctx__execute_key(this.ptr, GreyCat.hash(f));\n      } else {\n        greycat._gctx__execute(this.ptr, f.ptr);\n      }\n    }\n  }, {\n    key: \"prepareExecute\",\n    value: function prepareExecute(f) {\n      if (typeof f === 'number') {\n        greycat._gctx__prepare_execute_key(this.ptr, f);\n      } else if (typeof f === 'string') {\n        greycat._gctx__prepare_execute_key(this.ptr, GreyCat.hash(f));\n      } else {\n        greycat._gctx__prepare(this.ptr, f.ptr);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"executePrepared\",\n    value: function executePrepared() {\n      greycat._gctx__execute_prepared(this.ptr);\n    }\n  }, {\n    key: \"ordinal\",\n    value: function ordinal() {\n      return greycat._gctx__ordinal(this.ptr);\n    }\n  }, {\n    key: \"onEnd\",\n    value: function onEnd(body) {\n      if (body instanceof Function) {\n        greycat._gctx__on_end(this.ptr, body.ptr);\n      } else {\n        var final_func_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n\n        GreyCat.elements[final_func_ptr] = body;\n\n        greycat._gctx__on_end(this.ptr, final_func_ptr);\n\n        greycat._gobject__un_mark(final_func_ptr, Keys.g_function);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"path\",\n    value: function path() {\n      var strPtr = greycat._gctx__path(this.ptr);\n\n      var jsStr = greycat.Pointer_stringify(strPtr);\n\n      greycat._js_free(strPtr);\n\n      return jsStr;\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var strPtr = greycat._gctx__json(this.ptr);\n\n      var jsStr = greycat.Pointer_stringify(strPtr);\n\n      greycat._js_free(strPtr);\n\n      return jsStr;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return JSON.parse(this.toString());\n    }\n  }, {\n    key: \"declare\",\n    value: function declare(key, value) {\n      if (!value) {\n        greycat._gctx__declare_null(this.ptr, GreyCat.paramToKey(key, this));\n      } else if (typeof value === 'string') {\n        var js_str = value;\n\n        var ptr_str = greycat._js_malloc(js_str.length + 1);\n\n        greycat.writeAsciiToMemory(js_str, ptr_str, false);\n\n        greycat._gctx__declare_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n\n        greycat._js_free(ptr_str);\n      } else if (value % 1 !== 0) {\n        greycat._gctx__declare_double(this.ptr, GreyCat.paramToKey(key, this), value);\n      } else if (value > -9007199254740992 && value < 9007199254740992) {\n        greycat._gctx__declare_int(this.ptr, GreyCat.paramToKey(key, this), value);\n      } else {\n        greycat._gctx__declare_long(this.ptr, GreyCat.paramToKey(key, this), value);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (typeof value === 'string') {\n        var js_str = value;\n\n        var ptr_str = greycat._js_malloc(js_str.length + 1);\n\n        greycat.writeAsciiToMemory(js_str, ptr_str, false);\n\n        greycat._gctx__set_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n\n        greycat._js_free(ptr_str);\n      } else if (typeof value === 'number') {\n        if (value % 1 !== 0) {\n          greycat._gctx__set_double(this.ptr, GreyCat.paramToKey(key, this), value);\n        } else if (value > -9007199254740992 && value < 9007199254740992) {\n          greycat._gctx__set_int(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n      } else if (typeof value === 'boolean') {\n        greycat._gctx__set_long(this.ptr, GreyCat.paramToKey(key, this), value);\n      } else if (value instanceof Function) {\n        greycat._gctx__set_long(this.ptr, GreyCat.paramToKey(key, this), value.ptr);\n      } else {}\n\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(prop) {\n      var propKey = GreyCat.paramToKey(prop);\n\n      var type = greycat._ctx__type(this.ptr, propKey);\n\n      switch (type) {\n        case Keys.g_double:\n          return greycat._gctx__get_double(this.ptr, propKey);\n\n        case Keys.g_int:\n          return greycat._gctx__get_int(this.ptr, propKey);\n\n        case Keys.g_long:\n          return greycat._gctx__get_long(this.ptr, propKey);\n\n        case Keys.g_ulong:\n          return greycat._gctx__get_ulong(this.ptr, propKey);\n\n        case Keys.g_bool:\n          return greycat._gctx__get_bool(this.ptr, propKey) === 1;\n\n        case Keys.g_string:\n          {\n            var ptr = greycat._gctx__get_raw_string(this.ptr, propKey);\n\n            return ptr !== 0 ? greycat.Pointer_stringify(ptr) : null;\n          }\n\n        case Keys.g_string_array:\n          {\n            var _ptr = greycat._ctx__get(this.ptr, propKey);\n\n            return _ptr !== 0 ? new StringArray(_ptr) : null;\n          }\n\n        case Keys.g_long_array:\n          {\n            var _ptr2 = greycat._ctx__get(this.ptr, propKey);\n\n            return _ptr2 !== 0 ? new LongArray(_ptr2) : null;\n          }\n\n        case Keys.g_ulong_array:\n          {\n            var _ptr3 = greycat._ctx__get(this.ptr, propKey);\n\n            return _ptr3 !== 0 ? new ULongArray(_ptr3) : null;\n          }\n\n        case Keys.g_int_array:\n          {\n            var _ptr4 = greycat._ctx__get(this.ptr, propKey);\n\n            return _ptr4 !== 0 ? new IntArray(_ptr4) : null;\n          }\n\n        case Keys.g_double_array:\n          {\n            var _ptr5 = greycat._ctx__get(this.ptr, propKey);\n\n            return _ptr5 !== 0 ? new DoubleArray(_ptr5) : null;\n          }\n\n        default:\n          {\n            var _ptr6 = greycat._ctx__get(this.ptr, propKey);\n\n            if (_ptr6 === 0) {\n              return null;\n            } else {\n              var graph_ptr = greycat._gctx__graph(this.ptr);\n\n              var graph = GreyCat.elements[graph_ptr];\n              var factory = graph.factories[type];\n\n              if (factory !== undefined) {\n                return factory(_ptr6);\n              } else {\n                return new Node(_ptr6);\n              }\n            }\n          }\n      }\n    }\n  }, {\n    key: \"bind\",\n    value: function bind(src, target) {\n      greycat._gctx__bind(this.ptr, GreyCat.paramToKey(src, this), GreyCat.paramToKey(target, this));\n\n      return this;\n    }\n  }]);\n\n  return Context;\n}();\nexport var ULongArray =\n/*#__PURE__*/\nfunction () {\n  function ULongArray(nptr) {\n    _classCallCheck(this, ULongArray);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(ULongArray, [{\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_ulong_array);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raw_c_str = greycat._ulong_array__to_string(this.ptr);\n\n      var ts_str = greycat.Pointer_stringify(raw_c_str);\n\n      greycat._js_free(ts_str);\n\n      return ts_str;\n    }\n  }, {\n    key: \"get\",\n    value: function get(offset) {\n      return greycat._gulong_array__get(this.ptr, offset);\n    }\n  }, {\n    key: \"set\",\n    value: function set(offset, value) {\n      greycat._gulong_array__set(this.ptr, offset, value);\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      return greycat._gulong_array__add(this.ptr, value);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return greycat._gulong_array__size(this.ptr);\n    }\n  }]);\n\n  return ULongArray;\n}();\nexport var LongArray =\n/*#__PURE__*/\nfunction () {\n  function LongArray(nptr) {\n    _classCallCheck(this, LongArray);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(LongArray, [{\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_long_array);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raw_c_str = greycat._long_array__to_string(this.ptr);\n\n      var ts_str = greycat.Pointer_stringify(raw_c_str);\n\n      greycat._js_free(ts_str);\n\n      return ts_str;\n    }\n  }, {\n    key: \"get\",\n    value: function get(offset) {\n      return greycat._glong_array__get(this.ptr, offset);\n    }\n  }, {\n    key: \"set\",\n    value: function set(offset, value) {\n      greycat._glong_array__set(this.ptr, offset, value);\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      return greycat._glong_array__add(this.ptr, value);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return greycat._glong_array__size(this.ptr);\n    }\n  }]);\n\n  return LongArray;\n}();\nexport var IntArray =\n/*#__PURE__*/\nfunction () {\n  function IntArray(nptr) {\n    _classCallCheck(this, IntArray);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(IntArray, [{\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_int_array);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raw_c_str = greycat._int_array__to_string(this.ptr);\n\n      var ts_str = greycat.Pointer_stringify(raw_c_str);\n\n      greycat._js_free(ts_str);\n\n      return ts_str;\n    }\n  }, {\n    key: \"get\",\n    value: function get(offset) {\n      return greycat._gint_array__get(this.ptr, offset);\n    }\n  }, {\n    key: \"set\",\n    value: function set(offset, value) {\n      greycat._gint_array__set(this.ptr, offset, value);\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      return greycat._gint_array__add(this.ptr, value);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return greycat._gint_array__size(this.ptr);\n    }\n  }]);\n\n  return IntArray;\n}();\nexport var DoubleArray =\n/*#__PURE__*/\nfunction () {\n  function DoubleArray(nptr) {\n    _classCallCheck(this, DoubleArray);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(DoubleArray, [{\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_double_array);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raw_c_str = greycat._double_array__to_string(this.ptr);\n\n      var ts_str = greycat.Pointer_stringify(raw_c_str);\n\n      greycat._js_free(ts_str);\n\n      return ts_str;\n    }\n  }, {\n    key: \"get\",\n    value: function get(offset) {\n      return greycat._gdouble_array__get(this.ptr, offset);\n    }\n  }, {\n    key: \"set\",\n    value: function set(offset, value) {\n      greycat._gdouble_array__set(this.ptr, offset, value);\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      return greycat._gdouble_array__add(this.ptr, value);\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return greycat._gdouble_array__size(this.ptr);\n    }\n  }]);\n\n  return DoubleArray;\n}();\nexport var StringArray =\n/*#__PURE__*/\nfunction () {\n  function StringArray(nptr) {\n    _classCallCheck(this, StringArray);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(StringArray, [{\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_string_array);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      var raw_c_str = greycat._string_array__to_string(this.ptr);\n\n      var ts_str = greycat.Pointer_stringify(raw_c_str);\n\n      greycat._js_free(ts_str);\n\n      return ts_str;\n    }\n  }, {\n    key: \"get\",\n    value: function get(offset) {\n      var gstring_ptr = greycat._gstring_array__get(this.ptr, offset);\n\n      return greycat.Pointer_stringify(greycat._gstring__get(gstring_ptr));\n    }\n  }, {\n    key: \"set\",\n    value: function set(offset, value) {\n      var new_str_ptr = greycat._gstring__create();\n\n      greycat._gstring__prepare(new_str_ptr, value.length + 1);\n\n      var new_ptr_raw = greycat._gstring__get(new_str_ptr);\n\n      greycat.writeAsciiToMemory(value, new_ptr_raw, false);\n\n      greycat._string__set_size(new_str_ptr, value.length);\n\n      greycat._gstring__close(new_str_ptr);\n\n      greycat._gstring_array__set(this.ptr, offset, new_str_ptr);\n\n      greycat._gobject__un_mark(new_str_ptr, Keys.g_string_array);\n\n      return this;\n    }\n  }, {\n    key: \"add\",\n    value: function add(value) {\n      var new_gstring = greycat._gstring_array__add(this.ptr);\n\n      greycat._gstring__prepare(new_gstring, value.length + 1);\n\n      var new_ptr_raw = greycat._gstring__get(new_gstring);\n\n      greycat.writeAsciiToMemory(value, new_ptr_raw, false);\n\n      greycat._string__set_size(new_gstring, value.length);\n\n      greycat._gstring__close(new_gstring);\n\n      return this;\n    }\n  }, {\n    key: \"values\",\n    value: function values() {\n      for (var i = 0; i < arguments.length; i++) {\n        this.add(i < 0 || arguments.length <= i ? undefined : arguments[i]);\n      }\n    }\n  }, {\n    key: \"size\",\n    value: function size() {\n      return greycat._gstring_array__size(this.ptr);\n    }\n  }]);\n\n  return StringArray;\n}();\nexport var Param = function Param(type_code, key, value) {\n  _classCallCheck(this, Param);\n\n  this.type_code = type_code;\n  this.key = key;\n  this.value = value;\n};\nexport var Params =\n/*#__PURE__*/\nfunction () {\n  function Params(capacity) {\n    _classCallCheck(this, Params);\n\n    this.ptr = 0;\n    this.ptr = greycat._params__create(capacity);\n  }\n\n  _createClass(Params, [{\n    key: \"addInt\",\n    value: function addInt(key, value) {\n      greycat._params__add_int(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addLong\",\n    value: function addLong(key, value) {\n      greycat._params__add_long(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addDouble\",\n    value: function addDouble(key, value) {\n      greycat._params__add_double(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addBool\",\n    value: function addBool(key, value) {\n      greycat._params__add_bool(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addNull\",\n    value: function addNull(key) {\n      greycat._params__add_null(this.ptr, GreyCat.paramToKey(key));\n\n      return this;\n    }\n  }, {\n    key: \"addVarKey\",\n    value: function addVarKey(key, value) {\n      greycat._params__add_var_key(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addVarKeyNew\",\n    value: function addVarKeyNew(key, value) {\n      greycat._params__add_var_key_new(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addFunctionKey\",\n    value: function addFunctionKey(key, value) {\n      greycat._params__add_function_key(this.ptr, GreyCat.paramToKey(key), value);\n\n      return this;\n    }\n  }, {\n    key: \"addString\",\n    value: function addString(key, value) {\n      var ptr_str = greycat._js_malloc(value.length + 1);\n\n      greycat.writeAsciiToMemory(value, ptr_str, false);\n\n      greycat._params__add_string(this.ptr, GreyCat.paramToKey(key), ptr_str);\n\n      greycat._js_free(ptr_str);\n\n      return this;\n    }\n  }, {\n    key: \"addObject\",\n    value: function addObject(key, value) {\n      if (value instanceof ULongArray) {\n        greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_ulong_array, value.ptr);\n      } else if (value instanceof LongArray) {\n        greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_long_array, value.ptr);\n      } else if (value instanceof IntArray) {\n        greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_int_array, value.ptr);\n      } else if (value instanceof DoubleArray) {\n        greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_double_array, value.ptr);\n      } else if (value instanceof Function) {\n        greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), Keys.g_function, value.ptr);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"addTypedObject\",\n    value: function addTypedObject(key, value, type) {\n      greycat._params__add_object(this.ptr, GreyCat.paramToKey(key), type, value);\n\n      return this;\n    }\n  }, {\n    key: \"addAuto\",\n    value: function addAuto(key, value) {\n      var ikey = GreyCat.paramToKey(key);\n\n      if (value instanceof ULongArray || value instanceof LongArray || value instanceof IntArray || value instanceof DoubleArray) {\n        greycat._params__add_object(this.ptr, ikey, value.ptr);\n      } else if (typeof value === 'string') {\n        this.addString(ikey, value);\n      } else if (typeof value === 'boolean') {\n        this.addBool(ikey, value);\n      } else if (typeof value === 'number') {\n        if (value % 1 !== 0) {\n          this.addDouble(ikey, value);\n        } else if (value > -9007199254740992 && value < 9007199254740992) {\n          this.addInt(ikey, value);\n        } else {\n          this.addLong(ikey, value);\n        }\n      } else if (value instanceof Function) {\n        this.addFunctionKey(key, value.ptr);\n      }\n\n      return this;\n    }\n  }]);\n\n  return Params;\n}();\nexport var Function =\n/*#__PURE__*/\nfunction () {\n  function Function(nptr) {\n    _classCallCheck(this, Function);\n\n    this.ptr = 0;\n    this.ptr = nptr;\n  }\n\n  _createClass(Function, [{\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_function);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"name\",\n    value: function name(_name) {\n      greycat._gfunction__unsafe_set_key(this.ptr, GreyCat.paramToKey(_name, this));\n\n      return this;\n    }\n  }, {\n    key: \"pipe\",\n    value: function pipe(sub, params) {\n      if (typeof sub === 'string') {\n        if (params) {\n          greycat._function__pipe_key_with(this.ptr, GreyCat.hash(sub), params.ptr);\n        } else {\n          greycat._gfunction__pipe_key(this.ptr, GreyCat.hash(sub));\n        }\n      } else if (typeof sub === 'number') {\n        if (params) {\n          greycat._function__pipe_key_with(this.ptr, sub, params.ptr);\n        } else {\n          greycat._gfunction__pipe_key(this.ptr, sub);\n        }\n      } else if (sub instanceof Function) {\n        if (params) {\n          greycat._function__pipe_with(this.ptr, sub.ptr, params.ptr);\n        } else {\n          greycat._gfunction__pipe(this.ptr, sub.ptr);\n        }\n      } else {\n        var sub_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n\n        GreyCat.elements[sub_ptr] = sub;\n\n        if (params) {\n          greycat._function__pipe_with(this.ptr, sub_ptr, params.ptr);\n        } else {\n          greycat._gfunction__pipe(this.ptr, sub_ptr);\n        }\n\n        greycat._gobject__un_mark(sub_ptr, Keys.g_function);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"parse\",\n    value: function parse(greycatl_data) {\n      var ptr_str = greycat._js_malloc(greycatl_data.length + 1);\n\n      greycat.writeAsciiToMemory(greycatl_data, ptr_str, false);\n\n      var result = greycat._gfunction__parse(this.ptr, ptr_str);\n\n      greycat._js_free(ptr_str);\n\n      if (!result) {\n        throw new Error('GreyCat parse error');\n      }\n\n      return this;\n    }\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this.pipe(Keys.g_sync);\n      return this;\n    }\n  }, {\n    key: \"declareVar\",\n    value: function declareVar(value, targetVar) {\n      this.pipe(Keys.g_declare_var, Function.params(2).addAuto(Keys.g_value, value).addVarKeyNew(Keys.g_result, GreyCat.paramToKey(targetVar)));\n      return this;\n    }\n  }, {\n    key: \"assignVar\",\n    value: function assignVar(value, targetVar) {\n      this.pipe(Keys.g_assign_var, Function.params(2).addAuto(Keys.g_value, value).addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n      return this;\n    }\n  }, {\n    key: \"print\",\n    value: function print(srcVar) {\n      this.pipe(Keys.g_print, Function.params(1).addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar)));\n      return this;\n    }\n  }, {\n    key: \"printAppend\",\n    value: function printAppend(srcVar, targetVar) {\n      this.pipe(Keys.g_print, Function.params(2).addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar)).addVarKey(Keys.g_result, targetVar ? GreyCat.paramToKey(targetVar) : Keys.g_console));\n      return this;\n    }\n  }, {\n    key: \"printAll\",\n    value: function printAll() {\n      this.pipe(Keys.g_print_all);\n      return this;\n    }\n  }, {\n    key: \"newNode\",\n    value: function newNode(nodeType, targetVar) {\n      this.pipe(Keys.g_new_node, Function.params(2).addInt(Keys.g_node_type, GreyCat.paramToKey(nodeType)).addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n      return this;\n    }\n  }, {\n    key: \"newTimepoint\",\n    value: function newTimepoint(srcVar, timestamp, targetVar) {\n      this.pipe(Keys.g_new_timepoint, Function.params(3).addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar)).addLong(Keys.g_time, timestamp).addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n      return this;\n    }\n  }, {\n    key: \"setAttribute\",\n    value: function setAttribute(value, targetVar, property) {\n      this.pipe(Keys.g_set_attribute, Function.params(3).addAuto(Keys.g_value, value).addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)).addInt(Keys.g_prop, GreyCat.paramToKey(property)));\n      return this;\n    }\n  }, {\n    key: \"setReference\",\n    value: function setReference(srcVar, targetVar, property) {\n      this.pipe(Keys.g_set_reference, Function.params(3).addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar)).addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)).addInt(Keys.g_prop, GreyCat.paramToKey(property)));\n      return this;\n    }\n  }, {\n    key: \"readProperty\",\n    value: function readProperty(srcVar, property, targetVar) {\n      this.pipe(Keys.g_read_property, Function.params(3).addVarKey(Keys.g_src, GreyCat.paramToKey(srcVar)).addInt(Keys.g_prop, GreyCat.paramToKey(property)).addVarKey(Keys.g_result, GreyCat.paramToKey(targetVar)));\n      return this;\n    }\n  }, {\n    key: \"repeat\",\n    value: function repeat(nb_iteration, sub) {\n      if (typeof sub === 'number') {\n        this.pipe(Keys.g_repeat, Function.params(2).addInt(Keys.g_nb, nb_iteration).addFunctionKey(Keys.g_sub, sub));\n      } else if (sub instanceof Function) {\n        this.pipe(Keys.g_repeat, Function.params(2).addInt(Keys.g_nb, nb_iteration).addTypedObject(Keys.g_sub, sub.ptr, Keys.g_function));\n      } else {\n        var sub_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n\n        GreyCat.elements[sub_ptr] = sub;\n        this.pipe(Keys.g_repeat, Function.params(2).addInt(Keys.g_nb, nb_iteration).addTypedObject(Keys.g_sub, sub_ptr, Keys.g_function));\n\n        greycat._gobject__un_mark(sub_ptr, Keys.g_function);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"foreach\",\n    value: function foreach(src, target, sub) {\n      if (typeof sub === 'number') {\n        this.pipe(Keys.g_foreach, Function.params(2).addVarKey(Keys.g_src, GreyCat.paramToKey(src)).addFunctionKey(Keys.g_sub, sub));\n      } else if (sub instanceof Function) {\n        this.pipe(Keys.g_foreach, Function.params(2).addVarKey(Keys.g_src, GreyCat.paramToKey(src)).addTypedObject(Keys.g_sub, sub.ptr, Keys.g_function));\n      } else {\n        var sub_ptr = greycat._function__create(greycat._gctx__graph(this.ptr));\n\n        GreyCat.elements[sub_ptr] = sub;\n        this.pipe(Keys.g_foreach, Function.params(2).addVarKey(Keys.g_src, GreyCat.paramToKey(src)).addTypedObject(Keys.g_sub, sub_ptr, Keys.g_function));\n\n        greycat._gobject__un_mark(sub_ptr, Keys.g_function);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"loadGlobalIndex\",\n    value: function loadGlobalIndex(index, target) {\n      this.pipe(Keys.g_load_global_index, Function.params(2).addString(Keys.g_id, index).addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n      return this;\n    }\n  }, {\n    key: \"newGlobalIndex\",\n    value: function newGlobalIndex(index, target) {\n      this.pipe(Keys.g_new_global_index, Function.params(2).addString(Keys.g_id, index).addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n      return this;\n    }\n  }, {\n    key: \"loadMasterIndex\",\n    value: function loadMasterIndex(target) {\n      this.pipe(Keys.g_load_master_index, Function.params(1).addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n      return this;\n    }\n  }, {\n    key: \"configureIndex\",\n    value: function configureIndex(target, property) {\n      this.pipe(Keys.g_configure_index, Function.params(2).addVarKey(Keys.g_result, GreyCat.paramToKey(target)).addInt(Keys.g_prop, GreyCat.paramToKey(property)));\n      return this;\n    }\n  }, {\n    key: \"addToIndex\",\n    value: function addToIndex(src, target) {\n      this.pipe(Keys.g_add_to_index, Function.params(2).addVarKey(Keys.g_src, GreyCat.paramToKey(src)).addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n      return this;\n    }\n  }, {\n    key: \"queryIndex\",\n    value: function queryIndex(src, value, target) {\n      this.pipe(Keys.g_query_index, Function.params(3).addVarKey(Keys.g_src, GreyCat.paramToKey(src)).addAuto(Keys.g_value, value).addVarKey(Keys.g_result, GreyCat.paramToKey(target)));\n      return this;\n    }\n  }], [{\n    key: \"params\",\n    value: function params(capacity) {\n      return new Params(capacity);\n    }\n  }]);\n\n  return Function;\n}();\nexport var Plugin =\n/*#__PURE__*/\nfunction () {\n  function Plugin() {\n    _classCallCheck(this, Plugin);\n  }\n\n  _createClass(Plugin, [{\n    key: \"start\",\n    value: function start(graph) {}\n  }, {\n    key: \"stop\",\n    value: function stop(graph) {}\n  }]);\n\n  return Plugin;\n}();\nexport var Node =\n/*#__PURE__*/\nfunction () {\n  function Node(nptr) {\n    _classCallCheck(this, Node);\n\n    this.ptr = nptr;\n  }\n\n  _createClass(Node, [{\n    key: \"toString\",\n    value: function toString() {\n      var strPtr = greycat._gnode__json(this.ptr);\n\n      var jsStr = greycat.Pointer_stringify(strPtr);\n\n      greycat._js_free(strPtr);\n\n      return jsStr;\n    }\n  }, {\n    key: \"toObject\",\n    value: function toObject() {\n      return JSON.parse(this.toString());\n    }\n  }, {\n    key: \"set\",\n    value: function set(key, value) {\n      if (value === null) {\n        greycat._gnode__set_null(this.ptr, GreyCat.paramToKey(key, this));\n      } else if (typeof value === 'string') {\n        var js_str = value;\n\n        var ptr_str = greycat._js_malloc(js_str.length + 1);\n\n        greycat.writeAsciiToMemory(js_str, ptr_str, false);\n\n        greycat._gnode__set_raw_string(this.ptr, GreyCat.paramToKey(key, this), ptr_str);\n\n        greycat._js_free(ptr_str);\n      } else if (typeof value === 'number') {\n        if (value % 1 !== 0) {\n          greycat._gnode__set_double(this.ptr, GreyCat.paramToKey(key, this), value);\n        } else if (value > -9007199254740992 && value < 9007199254740992) {\n          greycat._gnode__set_int(this.ptr, GreyCat.paramToKey(key, this), value);\n        } else {\n          greycat._gnode__set_long(this.ptr, GreyCat.paramToKey(key, this), value);\n        }\n      } else if (value instanceof Function) {\n        greycat._gnode__set(this.ptr, GreyCat.paramToKey(key, this), value.ptr, Keys.g_function);\n      } else {\n        var graph_ptr = greycat._node__graph(this.ptr);\n\n        var anonymous_func_ptr = greycat._function__create(graph_ptr);\n\n        GreyCat.elements[anonymous_func_ptr] = value;\n\n        greycat._gnode__set(this.ptr, GreyCat.paramToKey(key, this), anonymous_func_ptr, Keys.g_function);\n\n        greycat._gobject__un_mark(anonymous_func_ptr, Keys.g_function);\n      }\n\n      return this;\n    }\n  }, {\n    key: \"get\",\n    value: function get(key) {\n      var pkey = GreyCat.paramToKey(key);\n\n      var ptype = greycat._node__type(this.ptr, pkey);\n\n      switch (ptype) {\n        case Keys.g_null:\n          return null;\n\n        case Keys.g_bool:\n          return greycat._gnode__get_bool(this.ptr, pkey) === 1;\n\n        case Keys.g_long:\n        case Keys.g_ulong:\n          return greycat._gnode__get_long(this.ptr, pkey);\n\n        case Keys.g_double:\n          return greycat._gnode__get_double(this.ptr, pkey);\n\n        case Keys.g_int:\n          return greycat._gnode__get_int(this.ptr, pkey);\n\n        case Keys.g_string:\n          {\n            var string_ptr = greycat._gnode__get_raw_string(this.ptr, pkey);\n\n            if (string_ptr !== 0) {\n              return greycat.Pointer_stringify(string_ptr);\n            } else {\n              return null;\n            }\n          }\n\n        case Keys.g_ulong_array:\n          {\n            return new ULongArray(greycat._node__get(this.ptr, pkey));\n          }\n\n        case Keys.g_long_array:\n          {\n            return new LongArray(greycat._node__get(this.ptr, pkey));\n          }\n\n        case Keys.g_int_array:\n          {\n            return new IntArray(greycat._node__get(this.ptr, pkey));\n          }\n\n        case Keys.g_double_array:\n          {\n            return new DoubleArray(greycat._node__get(this.ptr, pkey));\n          }\n\n        default:\n          {\n            var ptr = greycat._node__get(this.ptr, pkey);\n\n            var graph_ptr = greycat._node__graph(this.ptr);\n\n            var graph = GreyCat.elements[graph_ptr];\n            var factory = graph.factories[ptype];\n\n            if (factory !== undefined) {\n              return factory(ptr);\n            } else {\n              return new Node(ptr);\n            }\n          }\n      }\n    }\n  }, {\n    key: \"getOrCreate\",\n    value: function getOrCreate(key, prop_type) {\n      var pkey = GreyCat.paramToKey(key, this);\n      var ptype = GreyCat.paramToKey(prop_type);\n\n      var res_ptr = greycat._gnode__get_or_create(this.ptr, pkey, ptype);\n\n      switch (ptype) {\n        case Keys.g_null:\n          return null;\n\n        case Keys.g_bool:\n          return greycat._read_bool(res_ptr) === 1;\n\n        case Keys.g_long:\n          return greycat._read_ulong(res_ptr);\n\n        case Keys.g_ulong:\n          return greycat._read_long(res_ptr);\n\n        case Keys.g_double:\n          return greycat._read_double(res_ptr);\n\n        case Keys.g_int:\n          return greycat._read_int(res_ptr);\n\n        case Keys.g_string:\n          {\n            var string_ptr = greycat._gnode__get_raw_string(this.ptr, pkey);\n\n            if (string_ptr !== 0) {\n              return greycat.Pointer_stringify(string_ptr);\n            } else {\n              return null;\n            }\n          }\n\n        case Keys.g_ulong_array:\n          {\n            return new ULongArray(res_ptr);\n          }\n\n        case Keys.g_long_array:\n          {\n            return new LongArray(res_ptr);\n          }\n\n        case Keys.g_int_array:\n          {\n            return new IntArray(res_ptr);\n          }\n\n        case Keys.g_double_array:\n          {\n            return new DoubleArray(res_ptr);\n          }\n\n        default:\n          {\n            var graph_ptr = greycat._node__graph(this.ptr);\n\n            var graph = GreyCat.elements[graph_ptr];\n            var factory = graph.factories[ptype];\n\n            if (factory !== undefined) {\n              return factory(res_ptr);\n            } else {\n              return new Node(res_ptr);\n            }\n          }\n      }\n    }\n  }, {\n    key: \"deleteRef\",\n    value: function deleteRef() {\n      if (this.ptr !== 0) {\n        greycat._gobject__un_mark(this.ptr, Keys.g_node);\n\n        this.ptr = 0;\n      }\n    }\n  }]);\n\n  return Node;\n}();\nexport var Graph =\n/*#__PURE__*/\nfunction () {\n  function Graph(cacheSize, bufferSize) {\n    _classCallCheck(this, Graph);\n\n    this.ptr = 0;\n    this.factories = {};\n\n    if (cacheSize === undefined) {\n      cacheSize = 1000;\n    }\n\n    if (bufferSize === undefined) {\n      bufferSize = 10;\n    }\n\n    this.ptr = greycat._graph__create(cacheSize, bufferSize);\n    GreyCat.elements[this.ptr] = this;\n  }\n\n  _createClass(Graph, [{\n    key: \"enableDebug\",\n    value: function enableDebug() {\n      greycat._ggraph__enable_debug(this.ptr);\n    }\n  }, {\n    key: \"disableDebug\",\n    value: function disableDebug() {\n      greycat._ggraph__disable_debug(this.ptr);\n    }\n  }, {\n    key: \"declareMeta\",\n    value: function declareMeta(meta_key, meta) {\n      if (greycat._ggraph__is_meta(this.ptr, meta_key) === 0) {\n        var buffer = greycat._js_malloc(meta.length + 1);\n\n        greycat.writeAsciiToMemory(meta, buffer, false);\n\n        greycat._ggraph__declare_meta(this.ptr, meta_key, buffer);\n\n        greycat._js_free(buffer);\n      }\n    }\n  }, {\n    key: \"declareFunction\",\n    value: function declareFunction(id, func) {\n      if (func instanceof Function) {\n        greycat._ggraph__declare_function(this.ptr, GreyCat.paramToKey(id, this), func.ptr);\n      } else {\n        var ptr = greycat._function__create(this.ptr);\n\n        GreyCat.elements[ptr] = func;\n\n        greycat._ggraph__declare_function(this.ptr, GreyCat.paramToKey(id, this), ptr);\n\n        greycat._gobject__un_mark(ptr, Keys.g_function);\n      }\n    }\n  }, {\n    key: \"declareType\",\n    value: function declareType(id) {\n      return new NodeType(greycat._ggraph__declare_type(this.ptr, GreyCat.paramToKey(id, this)));\n    }\n  }, {\n    key: \"declarePlugin\",\n    value: function declarePlugin(plugin) {\n      var plug_ptr = greycat._plugin__create();\n\n      GreyCat.elements[plug_ptr] = plugin;\n\n      greycat._ggraph__declare_plugin(this.ptr, plug_ptr);\n\n      return this;\n    }\n  }, {\n    key: \"configurePlugin\",\n    value: function configurePlugin(plugin, params) {\n      greycat._graph__configure_plugin(this.ptr, GreyCat.paramToKey(plugin), params.ptr);\n\n      return this;\n    }\n  }, {\n    key: \"newFunction\",\n    value: function newFunction(body) {\n      if (body !== undefined) {\n        var ptr = greycat._function__create(this.ptr);\n\n        GreyCat.elements[ptr] = body;\n        return new Function(ptr);\n      } else {\n        return new Function(greycat._gfunction__create(this.ptr));\n      }\n    }\n  }, {\n    key: \"getFunction\",\n    value: function getFunction(id) {\n      var ptr = greycat._ggraph__function(this.ptr, GreyCat.paramToKey(id, this));\n\n      if (ptr === 0) {\n        return null;\n      } else {\n        return new Function(ptr);\n      }\n    }\n  }, {\n    key: \"getType\",\n    value: function getType(id) {\n      var type_ptr = greycat._ggraph__type(this.ptr, GreyCat.paramToKey(id, this));\n\n      if (type_ptr === 0) {\n        return null;\n      } else {\n        return new NodeType(type_ptr);\n      }\n    }\n  }, {\n    key: \"getMeta\",\n    value: function getMeta(id) {\n      var gstring_ptr = greycat._ggraph__meta(this.ptr, GreyCat.paramToKey(id, this));\n\n      if (gstring_ptr === 0) {\n        return null;\n      }\n\n      return greycat.Pointer_stringify(gstring_ptr);\n    }\n  }, {\n    key: \"newAnonymousFunction\",\n    value: function newAnonymousFunction(body) {\n      var ptr;\n\n      if (body !== undefined) {\n        ptr = greycat._function__create(this.ptr);\n        GreyCat.elements[ptr] = body;\n      } else {\n        ptr = greycat._gfunction__create(this.ptr);\n      }\n\n      greycat._gfunction__unsafe_dec_ref(ptr);\n\n      return new Function(ptr);\n    }\n  }, {\n    key: \"newContext\",\n    value: function newContext() {\n      var ptr = greycat._ctx__create(this.ptr);\n\n      var new_ctx = new Context(ptr);\n      GreyCat.elements[ptr] = new_ctx;\n      return new_ctx;\n    }\n  }, {\n    key: \"newVolatile\",\n    value: function newVolatile(type) {\n      var vtype = GreyCat.paramToKey(type);\n\n      switch (vtype) {\n        case Keys.g_string_array:\n          return new StringArray(greycat._gstring_array__create(this.ptr));\n\n        default:\n          var ptr = greycat._ggraph__create_node_volatile(this.ptr, vtype);\n\n          if (ptr === 0) {\n            return null;\n          } else {\n            var factory = this.factories[vtype];\n\n            if (factory !== undefined) {\n              return factory(ptr);\n            } else {\n              return new Node(ptr);\n            }\n          }\n\n      }\n    }\n  }, {\n    key: \"exportTypes\",\n    value: function exportTypes() {\n      var buffer = greycat._gstring__create();\n\n      greycat._ggraph_export_types(this.ptr, buffer);\n\n      greycat._gstring__close(buffer);\n\n      var buffer_raw = greycat._gstring__get(buffer);\n\n      var result = greycat.Pointer_stringify(buffer_raw);\n\n      greycat._gobject__un_mark(buffer, Keys.g_string);\n\n      return result;\n    }\n  }, {\n    key: \"exportFunctions\",\n    value: function exportFunctions() {\n      var buffer = greycat._gstring__create();\n\n      greycat._ggraph_export_functions(this.ptr, buffer);\n\n      greycat._gstring__close(buffer);\n\n      var buffer_raw = greycat._gstring__get(buffer);\n\n      var result = greycat.Pointer_stringify(buffer_raw);\n\n      greycat._gobject__un_mark(buffer, Keys.g_string);\n\n      return result;\n    }\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      if (this.ptr !== 0) {\n        delete GreyCat.elements[this.ptr];\n\n        greycat._ggraph__destroy(this.ptr);\n\n        this.ptr = 0;\n      }\n    }\n  }, {\n    key: \"heapSize\",\n    value: function heapSize() {\n      return greycat._graph__size_heap(this.ptr);\n    }\n  }, {\n    key: \"cacheSize\",\n    value: function cacheSize() {\n      return greycat._graph__size_cache(this.ptr);\n    }\n  }, {\n    key: \"bufferSize\",\n    value: function bufferSize() {\n      return greycat._graph__size_buffer(this.ptr);\n    }\n  }]);\n\n  return Graph;\n}();\nexport var WebSocketAdapter = function WebSocketAdapter(s) {\n  _classCallCheck(this, WebSocketAdapter);\n\n  this.buffer = [];\n  this.socket = s;\n  this.connected = false;\n};\nexport var GreyCat =\n/*#__PURE__*/\nfunction () {\n  function GreyCat() {\n    _classCallCheck(this, GreyCat);\n  }\n\n  _createClass(GreyCat, null, [{\n    key: \"onReady\",\n    value: function onReady(callback) {\n      var _this = this;\n\n      if (this.isInitiliazed) {\n        callback();\n      } else {\n        greycat.onRuntimeInitialized = function () {\n          _this.isInitiliazed = true;\n          callback();\n        };\n      }\n    }\n  }, {\n    key: \"newGraph\",\n    value: function newGraph(cacheSize, bufferSize) {\n      return new Graph(cacheSize, bufferSize);\n    }\n  }, {\n    key: \"newWebSocketClient\",\n    value: function newWebSocketClient(nptr, url_ptr, port, use_wss) {\n      var address = greycat.Pointer_stringify(url_ptr);\n      var socket = new WebSocket((use_wss === 1 ? 'wss://' : 'ws://') + address + ':' + port, 'default', {\n        rejectUnauthorized: false\n      });\n      socket.binaryType = 'arraybuffer';\n      var ws = new WebSocketAdapter(socket);\n\n      socket.onopen = function (e) {\n        ws.connected = true;\n\n        for (var i = 0; i < ws.buffer.length; i++) {\n          socket.send(ws.buffer[i].buffer);\n        }\n\n        ws.buffer = [];\n      };\n\n      socket.onclose = function (e) {\n        ws.connected = false;\n      };\n\n      socket.onerror = function (e) {\n        console.error(e);\n      };\n\n      socket.onmessage = function (e) {\n        var msgBuf = new Uint8Array(e.data);\n        var bug_len = msgBuf.length;\n\n        var buf = greycat._js_malloc(bug_len);\n\n        greycat.HEAPU8.set(msgBuf, buf);\n\n        greycat._gwebsocket_client__on_msg(nptr, buf, bug_len);\n\n        greycat._js_free(buf);\n      };\n\n      GreyCat.elements[nptr] = ws;\n    }\n  }, {\n    key: \"destroyWebSocketClient\",\n    value: function destroyWebSocketClient(nptr) {\n      var ws = GreyCat.elements[nptr];\n      ws.socket.close();\n      delete GreyCat.elements[nptr];\n    }\n  }, {\n    key: \"webSocketClientSend\",\n    value: function webSocketClientSend(client_id, data_ptr, len) {\n      var ws = GreyCat.elements[client_id];\n      var new_buffer = new Uint8Array(greycat.buffer).slice(data_ptr, data_ptr + len);\n\n      if (!ws.connected) {\n        ws.buffer.push(new Uint8Array(new_buffer));\n      } else {\n        ws.socket.send(new_buffer.buffer);\n      }\n    }\n  }, {\n    key: \"hash\",\n    value: function hash(str) {\n      var hash = 0;\n      var char;\n\n      if (str.length === 0) {\n        return hash;\n      }\n\n      for (var i = 0; i < str.length; i++) {\n        char = str.charCodeAt(i);\n        hash = (hash << 5) - hash + char;\n        hash = hash & hash;\n      }\n\n      return hash;\n    }\n  }, {\n    key: \"paramToKey\",\n    value: function paramToKey(param, origin) {\n      if (typeof param === 'string') {\n        var paramHash = GreyCat.hash(param);\n\n        if (origin !== undefined) {\n          var graph_ptr;\n\n          if (origin instanceof Function) {\n            graph_ptr = greycat._gfunction__graph(origin.ptr);\n          } else if (origin instanceof Graph) {\n            graph_ptr = origin.ptr;\n          } else if (origin instanceof NodeType) {\n            graph_ptr = greycat._node_type__graph(origin.ptr);\n          } else if (origin instanceof Node) {\n            graph_ptr = greycat._node__graph(origin.ptr);\n          } else if (origin instanceof Context) {\n            graph_ptr = greycat._gctx__graph(origin.ptr);\n          }\n\n          if (greycat._ggraph__is_meta(graph_ptr, paramHash) === 0) {\n            var meta = param;\n\n            var buffer = greycat._js_malloc(meta.length + 1);\n\n            greycat.writeAsciiToMemory(meta, buffer, false);\n\n            greycat._ggraph__declare_meta(graph_ptr, paramHash, buffer);\n\n            greycat._js_free(buffer);\n          }\n        }\n\n        return paramHash;\n      } else {\n        return param;\n      }\n    }\n  }]);\n\n  return GreyCat;\n}();\nGreyCat._module = greycat;\nGreyCat.elements = {};\nGreyCat.isInitiliazed = false;\nGreyCat.Logger = console;\nexport function intParam(key, value) {\n  return new Param(Keys.g_int, GreyCat.paramToKey(key), value);\n}\nexport function longParam(key, value) {\n  return new Param(Keys.g_long, GreyCat.paramToKey(key), value);\n}\nexport function doubleParam(key, value) {\n  return new Param(Keys.g_double, GreyCat.paramToKey(key), value);\n}\nexport function boolParam(key, value) {\n  return new Param(Keys.g_bool, GreyCat.paramToKey(key), value);\n}\nexport function nullParam(key) {\n  return new Param(Keys.g_null, GreyCat.paramToKey(key), 0);\n}\nexport function varKeyParam(key, value) {\n  return new Param(Keys.g_var_key, GreyCat.paramToKey(key), value);\n}\nexport function functionKeyParam(key, value) {\n  return new Param(Keys.g_function_key, GreyCat.paramToKey(key), value);\n}\nexport function stringParam(key, value) {\n  return new Param(Keys.g_string, GreyCat.paramToKey(key), value);\n}\nglobal.GreyCat = GreyCat;","module.exports = \"module.exports = __webpack_public_path__ + \\\"static/media/greycat-core.d.4f12f247.ts\\\";\"","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 396;","import * as React from 'react';\nimport { observer } from 'mobx-react';\n\nimport StudioStore from '../../stores/StudioStore';\nimport WorkspaceStore from '../../stores/WorkspaceStore';\n\nimport './workspace-pane.css';\n\nexport interface WorkspacePaneProps {\n  store: StudioStore;\n  wsStore: WorkspaceStore;\n}\n\n@observer\nexport default class WorkspacePane extends React.Component<WorkspacePaneProps> {\n\n  constructor(props: WorkspacePaneProps) {\n    super(props);\n\n    this.onConnect = this.onConnect.bind(this);\n  }\n\n  setString(name: 'hostname' | 'path') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      this.props.wsStore[name] = e.target.value;\n    };\n  }\n\n  setNumber(name: 'port') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      this.props.wsStore[name] = parseInt(e.target.value, 10);\n    };\n  }\n\n  setBoolean(name: 'secured') {\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\n      this.props.wsStore[name] = e.target.checked;\n    };\n  }\n\n  onConnect(e: React.MouseEvent<HTMLButtonElement>) {\n    this.props.wsStore.configure(this.props.store.graph);\n  }\n\n  render() {\n    const { hostname, port, path, secured } = this.props.wsStore;\n\n    return (\n      <div className=\"workspace-pane\">\n        <div className=\"header\">\n          <h2 className=\"title\">Workspace</h2>\n        </div>\n        <div className=\"websocket-form\">\n          <div className=\"input-group\">\n            <label htmlFor=\"hostname\">Hostname:</label>\n            <input name=\"hostname\" type=\"text\" value={hostname} onChange={this.setString('hostname')} />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"port\">Port:</label>\n            <input name=\"port\" type=\"number\" value={port} onChange={this.setNumber('port')} />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"path\">Path:</label>\n            <input name=\"path\" type=\"text\" value={path} onChange={this.setString('path')} />\n          </div>\n\n          <div className=\"input-group\">\n            <label htmlFor=\"secured\">Secured:</label>\n            <input name=\"secured\" type=\"checkbox\" checked={secured} onChange={this.setBoolean('secured')} />\n          </div>\n          <button onClick={this.onConnect}>Connect</button>\n        </div>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport { Icon } from '@mdi/react';\nimport { mdiLanguageTypescript, mdiFileQuestion } from '@mdi/js';\nimport greycatLogo from '../../assets/images/greycat-head.svg';\n\nexport type Language = 'typescript' | 'greycat' | string;\n\nexport default ({ language, className }: { language: Language, className?: string }) => {\n  switch (language) {\n    case 'typescript':\n      return <Icon className={className} path={mdiLanguageTypescript} color=\"#0070bc\" />;\n    case 'greycat':\n      return <img src={greycatLogo} className={className} />;\n    default:\n      return <Icon className={className} path={mdiFileQuestion} />;\n  }\n};","import { observable, action, computed } from 'mobx';\nimport * as monaco from 'monaco-editor';\n\nexport interface File {\n  uri: string;\n  language: string;\n  content: string;\n  isOpen: boolean;\n  isSelected?: boolean;\n  state?: monaco.editor.ICodeEditorViewState;\n}\n\nexport default class EditorStore {\n  static MAIN: string = 'main.gcl';\n  static EXTENSIONS: string = 'extensions.ts';\n\n  @observable private _files: Map<string, File> = new Map();\n\n  constructor() {\n    this._files.set(EditorStore.MAIN, {\n      uri: EditorStore.MAIN,\n      language: 'greycat',\n      content: 'var hello = \"Hello World!\";\\n\\nsayHi();',\n      isOpen: true,\n      isSelected: true,\n    });\n    this._files.set(EditorStore.EXTENSIONS, {\n      uri: EditorStore.EXTENSIONS,\n      language: 'typescript',\n      content: \"export function sayHi(ctx: g.Context) {\\n  console.log(ctx.get('hello'));\\n}\",\n      isOpen: true,\n    });\n  }\n\n  @action\n  select(uri: string) {\n    this._files.forEach((f) => {\n      if (f.uri !== uri) {\n        f.isSelected = false;\n      } else {\n        f.isSelected = true;\n      }\n    });\n  }\n\n  @action\n  open(uri: string) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.isOpen = true;\n      this.select(uri);\n    }\n  }\n\n  @action\n  close(uri: string) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.isOpen = false;\n      file.isSelected = false;\n    }\n  }\n\n  @action\n  setState(uri: string, state: monaco.editor.ICodeEditorViewState) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.state = state;\n    }\n  }\n\n  @action\n  setContent(uri: string, content: string) {\n    const file = this._files.get(uri);\n    if (file) {\n      file.content = content;\n    }\n  }\n\n  get files(): Map<string, File> {\n    return this._files;\n  }\n\n  @computed\n  get selected(): File | undefined {\n    return [...this._files.values()].find((f) => Boolean(f.isSelected));\n  }\n\n  @computed\n  get opened(): File[] {\n    return [...this._files.values()].filter(({ isOpen }) => Boolean(isOpen));\n  }\n}","import * as React from 'react';\nimport { autorun, IReactionDisposer } from 'mobx';\nimport * as monaco from 'monaco-editor';\nimport * as cx from 'classnames';\nimport MonacoEditor from 'react-monaco-editor';\nimport { observer } from 'mobx-react';\n\nimport LanguageIcon from '../icons/LanguageIcon';\nimport EditorStore from '../../stores/EditorStore';\nimport StudioStore from '../../stores/StudioStore';\n\nimport './editor-pane.css';\n\nexport interface EditorPaneProps {\n  store: StudioStore;\n  editorDidMount: (e: monaco.editor.IStandaloneCodeEditor) => void;\n}\n\n@observer\nexport default class EditorPane extends React.Component<EditorPaneProps> {\n  private _editor: monaco.editor.IStandaloneCodeEditor | null = null;\n  private _updateModelDisposer: IReactionDisposer | null = null;\n  private _interpretTimeout: NodeJS.Timeout | null = null;\n\n  constructor(props: EditorPaneProps) {\n    super(props);\n    this.onEditorDidMount = this.onEditorDidMount.bind(this);\n    this.onEditorChange = this.onEditorChange.bind(this);\n    this.onTabClicked = this.onTabClicked.bind(this);\n    this.onTabCloseClicked = this.onTabCloseClicked.bind(this);\n  }\n\n  componentWillMount() {\n    const { editor } = this.props.store;\n    editor.files.forEach((file, uri) => {\n      monaco.editor.createModel(file.content, file.language, monaco.Uri.parse(uri));\n    });\n  }\n\n  onEditorDidMount(e: monaco.editor.IStandaloneCodeEditor) {\n    this._editor = e;\n    this.props.editorDidMount(e);\n    this._updateModelDisposer = autorun(() => {\n      // automatically run when we change model\n      const { selected } = this.props.store.editor;\n      // set new model in editor\n      e.setModel(selected ? monaco.editor.getModel(monaco.Uri.parse(selected.uri)) : null);\n      if (selected && selected.state) {\n        // restore state if any\n        e.restoreViewState(selected.state);\n      }\n    });\n\n    this._editor.addAction({\n      id: 'execute-greycat-main',\n      label: 'Execute main.gcl',\n      keybindings: [\n        monaco.KeyMod.Shift | monaco.KeyCode.Enter,\n      ],\n      contextMenuGroupId: 'navigation',\n      contextMenuOrder: 0,\n      run: () => {\n        this.props.store.execute();\n      },\n    });\n  }\n\n  onEditorChange(newValue: string) {\n    if (this._editor) {\n      const model = this._editor.getModel();\n      const { store } = this.props;\n      store.editor.setContent(model.uri.path, newValue);\n\n      if (model.uri.path === EditorStore.EXTENSIONS) {\n        if (this._interpretTimeout) {\n          clearTimeout(this._interpretTimeout);\n        }\n        this._interpretTimeout = setTimeout(() => {\n          store.interpretExtensions();\n        }, 500);\n      }\n    }\n  }\n\n  onTabClicked(uri: string) {\n    return () => this.props.store.editor.select(uri);\n  }\n\n  onTabCloseClicked(uri: string) {\n    return (e: React.MouseEvent) => {\n      e.preventDefault();\n      e.stopPropagation();\n      this.props.store.editor.close(uri);\n    };\n  }\n\n  componentWillUnmount() {\n    if (this._updateModelDisposer) {\n      this._updateModelDisposer();\n    }\n  }\n\n  render() {\n    const { store } = this.props;\n    const { opened, selected } = store.editor;\n    const model = selected ? monaco.editor.getModel(monaco.Uri.parse(selected.uri)) : null;\n\n    return (\n      <div className=\"editor-pane\">\n        <div className=\"editor-header\">\n          <div className=\"file-tabs\">\n            {opened.map(({ uri, isSelected, language }) => (\n              <div className={cx('tab', { selected: isSelected })} key={uri} onClick={this.onTabClicked(uri)}>\n                <div className=\"flex\">\n                  <LanguageIcon className=\"language-icon\" language={language} />\n                  <span className=\"name\">{uri}</span>\n                </div>\n              </div>\n            ))}\n          </div>\n          <div className=\"editor-actions\" />\n        </div>\n        <div className=\"monaco-container\">\n          <MonacoEditor\n            theme=\"vs-dark\"\n            height=\"100%\"\n            options={{\n              model,\n              folding: true,\n              extraEditorClassName: 'monaco-greycat',\n              scrollBeyondLastLine: false,\n              minimap: {\n                enabled: false,\n              },\n              renderWhitespace: 'boundary',\n              autoIndent: true,\n            }}\n            editorDidMount={this.onEditorDidMount}\n            onChange={this.onEditorChange}\n          />\n        </div>\n        {model === null && (\n          <div className=\"no-model\">\n            <h2 className=\"muted\">Select a file to open in the left panel</h2>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n","import * as React from 'react';\nimport ReactTable, { Column } from 'react-table';\nimport 'react-table/react-table.css';\n\nimport './table.css';\n\nexport interface ResultProps {\n  data: any;\n}\n\nexport default class Table extends React.Component<ResultProps> {\n\n  render() {\n    const { columns, rows } = convertData(this.props.data);\n\n    return (\n      <ReactTable\n        data={rows}\n        columns={columns}\n        showPagination={false}\n        pageSize={rows.length}\n        defaultPageSize={rows.length}\n        className=\"-striped -highlight\"\n      />\n    );\n  }\n}\n\nfunction convertData(data: object): { columns: Column[]; rows: any[] } {\n  const colMap: { [k: string]: string } = {\n    name: 'Name',\n    type: 'Type',\n    value: 'Value',\n  };\n  const rows = Object.keys(data).map((k: string) => {\n    const o = data[k];\n    if (o instanceof Array || !(o instanceof Object)) {\n      const type: string = o instanceof Array ? 'array' : typeof o;\n      return { name: k, value: JSON.stringify(o), type };\n    } else if (o instanceof Object) {\n      const values = Object.keys(o).reduce((obj, oKey) => {\n        if (!colMap[oKey]) {\n          colMap[oKey] = oKey.substr(0, 1).toUpperCase() + oKey.substr(1, oKey.length - 1);\n        }\n        obj[oKey] = JSON.stringify(o[oKey]);\n        return obj;\n      }, {});\n      return { name: k, ...values };\n    }\n    return data;\n  });\n\n  return {\n    columns: [\n      {\n        headerStyle: { display: 'none' },\n        columns: Object.keys(colMap).reduce((cols, k) => {\n          const col: any = {\n            Header: colMap[k],\n            accessor: k,\n          };\n          if (col.accessor === 'name') {\n            col.maxWidth = 140;\n          }\n          if (col.accessor === 'type') {\n            col.maxWidth = 100;\n          }\n          return [ ...cols, col ];\n        }, []),\n      },\n    ],\n    rows,\n  };\n}\n","import * as React from 'react';\nimport JsonInspector from 'react-json-inspector';\nimport 'react-json-inspector/json-inspector.css';\n\nimport './json-tree.css';\n\nexport interface JsonTreeProps {\n  data: any;\n  onChange?: (keypath: string, newValue: any) => void;\n}\n\nexport default class JsonTree extends React.Component<JsonTreeProps> {\n\n  onChange(keypath: string) {\n    return (newValue: string) => {\n      // tslint:disable-next-line:no-console\n      console.log('onChange', keypath, newValue);\n      if (this.props.onChange) {\n        this.props.onChange(keypath, newValue);\n      }\n    };\n  }\n\n  render() {\n    return (\n      <JsonInspector data={this.props.data} />\n    );\n  }\n}","import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\nimport 'react-tabs/style/react-tabs.css';\n\nimport StudioStore from '../../stores/StudioStore';\nimport Table from '../table/Table';\nimport JsonTree from '../json-tree/JsonTree';\nimport './context-pane.css';\n\nexport interface ContextPaneProps {\n  store: StudioStore;\n}\n\n/*\nvar hello = \"Hello World!\";\nvar a = true;\nvar b = 42;\nvar c = new { foo: 'bar', baz: 'beep' }\nvar d = 100.0\nvar e = `The answer: ${b}`\n*/\n\n@observer\nexport default class ContextPane extends React.Component<ContextPaneProps> {\n\n  constructor(props: ContextPaneProps) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n\n  onChange(keypath: string, newValue: any) {\n    console.log('=== ON CHANGE ===');\n    console.log(' - keypath:', keypath);\n    console.log(' - newValue:', newValue);\n  }\n\n  render() {\n    const { data, globalTypes, globalFunctions } = this.props.store;\n\n    return (\n      <div className=\"context-pane\">\n        <Tabs>\n          <TabList>\n            <Tab>Context Table</Tab>\n            <Tab>Context JSON</Tab>\n            <Tab>Global Types</Tab>\n            <Tab>Global Functions</Tab>\n          </TabList>\n\n          <TabPanel>\n            <Table data={data} />\n          </TabPanel>\n          <TabPanel>\n            <JsonTree data={data} onChange={this.onChange} />\n          </TabPanel>\n          <TabPanel>\n            <JsonTree data={globalTypes} />\n          </TabPanel>\n          <TabPanel>\n            <JsonTree data={globalFunctions} />\n          </TabPanel>\n        </Tabs>\n      </div>\n    );\n  }\n}","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { padStart } from 'lodash';\nimport { observer } from 'mobx-react';\n\nimport ConsoleStore from '../../stores/ConsoleStore';\nimport './console-pane.css';\n\nexport interface ConsolePaneProps {\n  store: ConsoleStore;\n}\n\n@observer\nexport default class ConsolePane extends React.Component<ConsolePaneProps> {\n\n  private _logsBottomEl: HTMLDivElement | null = null;\n\n  constructor(props: ConsolePaneProps) {\n    super(props);\n\n    this.onClear = this.onClear.bind(this);\n  }\n\n  onClear() {\n    this.props.store.clear();\n  }\n\n  componentDidMount() {\n    this._scrollToBottom();\n  }\n\n  componentDidUpdate() {\n    this._scrollToBottom();\n  }\n\n  render() {\n    const { logs } = this.props.store;\n\n    return (\n      <div className=\"console-pane\">\n        <div className=\"header\">\n          <h2 className=\"title\">\n            <span className=\"name\">Console</span>\n            <span className=\"muted\">({logs.length})</span>\n          </h2>\n          <div className=\"actions\">\n            <i className=\"action far fa-trash-alt\" onClick={this.onClear} />\n          </div>\n        </div>\n        <div className=\"logs-container\">\n          <ul className=\"logs-list\">\n            {logs.map((l, i) => (\n              <li className={cx('log', l.level)} key={i}>\n                <pre className=\"time\">[{this._formatTime(l.time)}]</pre>\n                <pre className=\"message\">{l.message}</pre>\n              </li>\n            ))}\n            <div ref={(el) => this._logsBottomEl = el} />\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  _scrollToBottom() {\n    if (this._logsBottomEl) {\n      this._logsBottomEl.scrollIntoView({ behavior: 'smooth' });\n    }\n  }\n\n  _formatTime(t: number): string {\n    const d = new Date(t);\n    return (\n      padStart(d.getHours() + '', 2, '0') + ':' +\n      padStart(d.getMinutes() + '', 2, '0') + ':' +\n      padStart(d.getSeconds() + '', 2, '0') + ':' +\n      padStart(d.getMilliseconds() + '', 3, '0')\n    );\n  }\n}\n","import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport * as monaco from 'monaco-editor';\nimport { Icon } from '@mdi/react';\nimport { mdiPlay } from '@mdi/js';\n\nimport Splitter from 'm-react-splitters';\nimport 'm-react-splitters/lib/splitters.css';\n\nimport { version } from '../package.json';\nimport StudioStore from './stores/StudioStore';\nimport greycatLogo from './assets/images/greycat-head.svg';\n\nimport WorkspacePane from './components/workspace-pane/WorkspacePane';\nimport EditorPane from './components/editor-pane/EditorPane';\nimport ContextPane from './components/context-pane/ContextPane';\nimport ConsolePane from './components/console-pane/ConsolePane';\n\nimport './studio.css';\n\nexport interface StudioProps {\n  store: StudioStore;\n}\n\n@observer\nexport default class Studio extends React.Component<StudioProps> {\n\n  private _editor: monaco.editor.IStandaloneCodeEditor | null = null;\n\n  constructor(props: StudioProps) {\n    super(props);\n    this.onEditorSplitterDragFinished = this.onEditorSplitterDragFinished.bind(this);\n    this.onEditorDidMount = this.onEditorDidMount.bind(this);\n    this.onExecute = this.onExecute.bind(this);\n  }\n\n  onEditorSplitterDragFinished() {\n    if (this._editor) {\n      this._editor.layout();\n    }\n  }\n\n  onEditorDidMount(e: monaco.editor.IStandaloneCodeEditor) {\n    this._editor = e;\n  }\n\n  onExecute() {\n    this.props.store.execute();\n  }\n\n  render() {\n    const { console, workspace } = this.props.store;\n\n    return (\n      <div className=\"studio\">\n        <div className=\"studio-header\">\n          <div className=\"header\">\n            <img className=\"header-logo\" src={greycatLogo} />\n            <div className=\"header-title\">\n              <h1>GreyCat Studio</h1>\n              <span className=\"muted\" style={{ fontFamily: 'monospace' }}>v{version}</span>\n            </div>\n          </div>\n          <div className=\"header-actions\">\n            <span className=\"action\" onClick={this.onExecute}>\n              <Icon path={mdiPlay} color=\"#89d185\" />\n            </span>\n          </div>\n        </div>\n        <div className=\"studio-body\">\n          <Splitter\n            position=\"vertical\"\n            primaryPaneWidth=\"15%\"\n            primaryPaneMaxHeight=\"100%\"\n            primaryPaneMaxWidth=\"100%\"\n            primaryPaneMinHeight={0}\n            primaryPaneMinWidth={0}\n          >\n            <WorkspacePane store={this.props.store} wsStore={workspace} />\n            <Splitter\n              position=\"horizontal\"\n              primaryPaneHeight=\"75%\"\n              primaryPaneMaxHeight=\"100%\"\n              primaryPaneMaxWidth=\"100%\"\n              primaryPaneMinHeight={0}\n              primaryPaneMinWidth={0}\n              onDragFinished={this.onEditorSplitterDragFinished}\n            >\n              <Splitter\n                position=\"vertical\"\n                primaryPaneClassName=\"editor-pane-container\"\n                primaryPaneWidth=\"60%\"\n                primaryPaneMaxHeight=\"100%\"\n                primaryPaneMaxWidth=\"100%\"\n                primaryPaneMinHeight={0}\n                primaryPaneMinWidth={0}\n                onDragFinished={this.onEditorSplitterDragFinished}\n              >\n                <EditorPane store={this.props.store} editorDidMount={this.onEditorDidMount} />\n                <ContextPane store={this.props.store} />\n              </Splitter>\n              <ConsolePane store={console} />\n            </Splitter>\n          </Splitter>\n        </div>\n      </div>\n    );\n  }\n}\n","var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar Emitter = monaco.Emitter; // --- GreyCat configuration and defaults ---------\n\nvar DEFAULT_SETTINGS = {\n  lint: true,\n  lintOptions: {\n    strict: true\n  }\n};\n\nvar LanguageServiceDefaultsImpl =\n/** @class */\nfunction () {\n  function LanguageServiceDefaultsImpl(languageId, settings) {\n    this._onDidChange = new Emitter();\n    this._gcTypes = [];\n    this._gcFunctions = [];\n    this._languageId = languageId;\n    this.setSettings(settings);\n  }\n\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"onDidChange\", {\n    get: function get() {\n      return this._onDidChange.event;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"languageId\", {\n    get: function get() {\n      return this._languageId;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"settings\", {\n    get: function get() {\n      return this._settings;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"gcTypes\", {\n    get: function get() {\n      return this._gcTypes;\n    },\n    enumerable: true,\n    configurable: true\n  });\n  Object.defineProperty(LanguageServiceDefaultsImpl.prototype, \"gcFunctions\", {\n    get: function get() {\n      return this._gcFunctions;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  LanguageServiceDefaultsImpl.prototype.setSettings = function (options) {\n    this._settings = __assign({}, DEFAULT_SETTINGS, options);\n\n    this._onDidChange.fire(this);\n  };\n\n  LanguageServiceDefaultsImpl.prototype.addTypes = function (types) {\n    var _this = this;\n\n    var _a;\n\n    (_a = this._gcTypes).push.apply(_a, types);\n\n    this._onDidChange.fire(this);\n\n    return {\n      dispose: function dispose() {\n        _this._gcTypes.length = 0;\n\n        _this._onDidChange.fire(_this);\n      }\n    };\n  };\n\n  LanguageServiceDefaultsImpl.prototype.addFunctions = function (functions) {\n    var _this = this;\n\n    var _a;\n\n    (_a = this._gcFunctions).push.apply(_a, functions);\n\n    this._onDidChange.fire(this);\n\n    return {\n      dispose: function dispose() {\n        _this._gcFunctions.length = 0;\n\n        _this._onDidChange.fire(_this);\n      }\n    };\n  };\n\n  return LanguageServiceDefaultsImpl;\n}();\n\nexport { LanguageServiceDefaultsImpl };\nvar defaults = new LanguageServiceDefaultsImpl('greycat', DEFAULT_SETTINGS); // Export API\n\nfunction createAPI() {\n  return defaults;\n}\n\nexport default monaco.languages.greycat = createAPI(); // --- Registration to monaco editor ---\n\nfunction getMode() {\n  return monaco.Promise.wrap(import('./gcMode'));\n}\n\nmonaco.languages.register({\n  id: 'greycat',\n  extensions: ['gcl']\n});\nmonaco.languages.onLanguage('greycat', function () {\n  return getMode().then(function (m) {\n    return m.setupMode(defaults);\n  });\n});","import { observable, action } from 'mobx';\nimport { GreyCat } from '@greycat/core';\n\nexport interface Log {\n  time: number;\n  level: 'log' | 'info' | 'warn' | 'error' | 'debug';\n  message: string;\n}\n\nexport default class ConsoleStore {\n  @observable private _logs: Log[]  = [];\n\n  constructor() {\n    (GreyCat.Logger as any) = this;\n  }\n\n  log(message: any) {\n    console.log('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'log', message });\n  }\n\n  info(message: any) {\n    console.info('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'info', message });\n  }\n\n  debug(message: any) {\n    console.debug('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'debug', message });\n  }\n\n  warn(message: any) {\n    console.warn('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'warn', message });\n  }\n\n  error(message: any) {\n    console.error('[GreyCat Logger]', message);\n    this._push({ time: Date.now(), level: 'error', message });\n  }\n\n  @action\n  clear() {\n    this._logs.length = 0;\n  }\n\n  @action\n  private _push(log: Log) {\n    // logs array is limited to 1000 items\n    if (this._logs.length >= 1000) {\n      this._logs.splice(0, (this._logs.length - 1000) + 1);\n    }\n    this._logs.push(log);\n  }\n\n  get logs() {\n    return this._logs;\n  }\n}","import { observable, action, computed } from 'mobx';\nimport { Graph, Keys, Params } from '@greycat/core';\n\nexport default class WorkspaceStore {\n  @observable\n  private _hostname: string = 'localhost';\n  @observable\n  private _port: number = 8066;\n  @observable\n  private _path: string = '/';\n  @observable\n  private _secured: boolean = false;\n\n  @action\n  configure(graph: Graph) {\n    try {\n      const url = new URL(this.url);\n      console.log('=> Trying to connect to:', url.toString());\n      graph.configurePlugin(\n        Keys.g_websocket_client,\n        new Params(4)\n          // FIXME add \"secured\" boolean when implemented\n          .addString(Keys.g_url, url.hostname)\n          .addInt(Keys.g_port, parseInt(url.port, 10))\n          .addInt(Keys.g_use_wss, url.protocol === 'ws:' ? 0 : 1)\n          .addString(Keys.g_path, url.pathname),\n      );\n    } catch (err) {\n      // TODO handle err on invalid uri\n    }\n  }\n\n  @computed\n  get url() {\n    if (this._secured) {\n      return `wss://${this._hostname}:${this._port}${this._path}`;\n    } else {\n      return `ws://${this._hostname}:${this._port}${this._path}`;\n    }\n  }\n\n  get hostname(): string {\n    return this._hostname;\n  }\n\n  set hostname(value: string) {\n    this._hostname = value;\n  }\n\n  get port(): number {\n    return this._port;\n  }\n\n  set port(value: number) {\n    this._port = value;\n  }\n\n  get path(): string {\n    return this._path;\n  }\n\n  set path(value: string) {\n    this._path = value;\n  }\n\n  get secured(): boolean {\n    return this._secured;\n  }\n\n  set secured(value: boolean) {\n    this._secured = value;\n  }\n}\n","import { observable, action, autorun } from 'mobx';\nimport { Graph, GreyCat } from '@greycat/core';\nimport gcLangService from '@greycat/lang-monaco';\nimport * as ts from 'typescript';\n\nimport EditorStore from './EditorStore';\nimport ConsoleStore from './ConsoleStore';\nimport WorkspaceStore from './WorkspaceStore';\n\nconst TS_OPTS: ts.TranspileOptions = {\n  compilerOptions: {\n    target: ts.ScriptTarget.ES2015,\n    module: ts.ModuleKind.CommonJS,\n    removeComments: true,\n  },\n};\n\nexport default class StudioStore {\n  @observable private _editor: EditorStore = new EditorStore();\n  @observable private _console: ConsoleStore = new ConsoleStore();\n  @observable private _workspace: WorkspaceStore = new WorkspaceStore();\n  @observable private _graph: Graph = GreyCat.newGraph();\n  @observable private _data: any = {};\n  @observable private _globalTypes: object = {};\n  @observable private _globalFunctions: object = {};\n\n  constructor() {\n    autorun(() => {\n      // automatically register types & functions on @greycat/lang-monaco when they change\n      gcLangService.addTypes(Object.values(this._globalTypes));\n      gcLangService.addFunctions(Object.values(this._globalFunctions));\n    });\n  }\n\n  @action\n  execute() {\n    return new Promise((resolve) => {\n      const main = this._editor.files.get(EditorStore.MAIN)!;\n      this._console.debug(`Executing: ${main.uri}`);\n\n      const context = this._graph.newContext();\n      context.onEnd((ctx) => resolve(ctx.toObject()));\n      context.execute(this._graph.newFunction().parse(main.content));\n    }).then((data) => {\n      this._console.debug('Done.');\n      this._data = data;\n      this.updateGlobalTypes();\n      this.updateGlobalFunctions();\n    }, (err) => {\n      this._console.error(err.stack);\n    });\n  }\n\n  @action\n  interpretExtensions() {\n    try {\n      const file = this._editor.files.get(EditorStore.EXTENSIONS)!;\n      const { outputText } = ts.transpileModule(file.content, TS_OPTS);\n      const extensionsLoader = new Function('exports', outputText);\n      const extensions = {};\n      extensionsLoader(extensions);\n      Object.keys(extensions).forEach((name) => {\n        if (typeof extensions[name] === 'function') {\n          this._graph.declareFunction(name, extensions[name]);\n        }\n      });\n      this.updateGlobalTypes();\n      this.updateGlobalFunctions();\n    } catch (err) {\n      this._console.error(`[Extensions Error] ${err.message}`);\n    }\n  }\n\n  @action\n  private updateGlobalTypes() {\n    this._globalTypes = JSON.parse(this._graph.exportTypes()).reduce((o: any, t: any) => {\n      o[t.type] = t;\n      return o;\n    }, {});\n  }\n\n  @action\n  private updateGlobalFunctions() {\n    this._globalFunctions = JSON.parse(this._graph.exportFunctions()).reduce((o: any, t: any) => {\n      o[t.name] = t;\n      return o;\n    }, {});\n  }\n\n  get editor(): EditorStore {\n    return this._editor;\n  }\n\n  get console(): ConsoleStore {\n    return this._console;\n  }\n\n  get workspace(): WorkspaceStore {\n    return this._workspace;\n  }\n\n  get graph(): Graph {\n    return this._graph;\n  }\n\n  get data() {\n    return this._data;\n  }\n\n  get globalTypes() {\n    return this._globalTypes;\n  }\n\n  get globalFunctions() {\n    return this._globalFunctions;\n  }\n}\n","import './monaco-editor-hack';\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { GreyCat } from '@greycat/core';\n\nimport * as monaco from 'monaco-editor';\n\n// tslint:disable-next-line:no-var-requires\nconst gcDeclaration = require('raw-loader!@greycat/core/dist/typings/greycat-core.d.ts');\nmonaco.languages.typescript.typescriptDefaults.addExtraLib(gcDeclaration, 'greycat-core.d.ts');\nmonaco.languages.typescript.typescriptDefaults.addExtraLib(`import * as g from '@greycat/core';\nexport = g;\nexport as namespace g;`, 'greycat-studio.d.ts');\n\nimport 'open-iconic/font/css/open-iconic-bootstrap.min.css';\nimport './index.css';\n\nimport Studio from './Studio';\nimport StudioStore from './stores/StudioStore';\n\nconst root = document.getElementById('root')!;\nconst errorTimeout = setTimeout(() => {\n  root.innerHTML = '<p class=\"alert alert-danger\">Something went wrong while initializing GreyCat Studio. Sorry :/</p>';\n}, 10000);\n\nGreyCat.onReady(() => {\n  clearTimeout(errorTimeout);\n\n  // initialize stores\n  const store = new StudioStore();\n  // automatically interpret extensions at start-up\n  store.interpretExtensions();\n\n  // render app\n  ReactDOM.render(<Studio store={store} />, root);\n});\n","export default {\n  g_bool: 3029738,\n  g_true: 3569038,\n  g_false: 97196323,\n  g_int: 104431,\n  g_long: 3327612,\n  g_ulong: 111379569,\n  g_double: -1325958191,\n  g_string: -891985903,\n  g_template: -1321546630,\n  g_null: 3392903,\n  g_matrix: -1081239615,\n  g_number: -1034364087,\n  g_double_array: 1372483691,\n  g_int_array: 315522569,\n  g_long_array: -340537642,\n  g_ulong_array: -130449141,\n  g_ref_array: -1112239187,\n  g_string_array: 406856875,\n  g_node: 3386882,\n  g_node_array: 1538161116,\n  g_function: 1380938712,\n  g_meta_key: -450143963,\n  g_var_key: 236497223,\n  g_var_key_new: -1817082200,\n  g_var_offset: 1857392811,\n  g_offset: -1019779949,\n  g_read_offset: -715377828,\n  g_src: 114148,\n  g_result: -934426595,\n  g_declare_var: -2025425198,\n  g_assign_var: 1025861591,\n  g_free_var: -1538001196,\n  g_master_index: -809507659,\n  g_load_master_index: 1863200622,\n  g_load_global_index: -1948757009,\n  g_new_global_index: -847221387,\n  g_configure_index: 602712633,\n  g_configure: -804429082,\n  g_add_to_index: 799961068,\n  g_query_index: -927797605,\n  g_it: 3371,\n  g_return: -934396624,\n  g_if_then_else: 615401849,\n  g_operator: -500553564,\n  g_then: 3558941,\n  g_else: 3116345,\n  g_all: 96673,\n  g_name: 3373707,\n  g_result_temp: -537084234,\n  g_meta: 3347973,\n  g_session: 1984987798,\n  g_sessions: 1405079709,\n  g_node_generator: -266917674,\n  g_session_generator: -344828822,\n  g_id: 3355,\n  g_ids: 104120,\n  g_this: 3559070,\n  g_prop: 3449699,\n  g_key: 106079,\n  g_keys: 3288564,\n  g_new_node: 1377157441,\n  g_new_object: 615178942,\n  g_new_object_at: 170503508,\n  g_object_type: -1277176774,\n  g_repeat: -934531685,\n  g_init: 3237136,\n  g_sync: 3545755,\n  g_merge: 103785528,\n  g_print: 106934957,\n  g_print_append: -227267348,\n  g_print_all: -1796653809,\n  g_get_all: -74801864,\n  g_set: 113762,\n  g_value: 111972721,\n  g_value2: -823812895,\n  g_values: -823812830,\n  g_blob: 3026845,\n  g_blob_ext: -665857409,\n  g_any: 96748,\n  g_any_node: -349683595,\n  g_page: 3433103,\n  g_pages: 106426308,\n  g_seq: 113759,\n  g_offsets: -1548407232,\n  g_function_key: -210856584,\n  g_from: 3151786,\n  g_node_type: 465832791,\n  g_foreach: -677682614,\n  g_new_timepoint: 1712314116,\n  g_new_node_timepoint: 1594333541,\n  g_time: 3560141,\n  g_load: 3327206,\n  g_load_all: 1845922504,\n  g_index: 100346066,\n  g_query: 107944136,\n  g_lookup: -1097094790,\n  g_lookup_all: 1300432220,\n  g_default: 1544803905,\n  g_reference: -925155509,\n  g_index_hash: 746783835,\n  g_index_hash_candidates: 1662498228,\n  g_index_hash_values: 741411206,\n  g_resolved_values: -2001143991,\n  g_index_result: 689728554,\n  g_global_index: -326497994,\n  g_add: 96417,\n  g_to: 3707,\n  g_ordinal: -1206994319,\n  g_param: 106436749,\n  g_set_attribute: 1302056703,\n  g_set_reference: 363815854,\n  g_set_at: -905789136,\n  g_read_property: -520479138,\n  g_execute_property: -1651463329,\n  g_console: 951510359,\n  g_nb: 3508,\n  g_sub: 114240,\n  g_i: 105,\n  g_j: 106,\n  g_k: 107,\n  g_callee_origin: -426083577,\n  g_callee_session: -1431227691,\n  g_new_session: 1240347383,\n  g_noop: 3387234,\n  g_std: 114211,\n  g_path: 3433509,\n  g_port: 3446913,\n  g_leveldb: 69785346,\n  g_rocksdb: 1368770220,\n  g_websocket_server: -339307845,\n  g_websocket_client: -791193789,\n  g_url: 116079,\n  g_openblas: -504225978,\n  g_cublas: -1349602962,\n  g_eigen: 96505900,\n  g_hybridblas: 1573138936,\n  g_mqtt: 3359524,\n  g_mqtt_topic: 680036436,\n  g_mqtt_topics_list: 389591614,\n  g_mqtt_custom_parser: 1265754834,\n  g_opcua_server: 2105970676,\n  g_opcua_client: 1654084732,\n  g_opcua_node_identifier_list: 661706024,\n  g_node_identifier: -1608655098,\n  g_gateway: -189118908,\n  g_remotes: 1091834093,\n  g_subscriptions: 1987365622,\n  g_cursor: -1349119146,\n  g_max: 107876,\n  g_grafana: 280038788,\n  g_use_wss: -147675553,\n  g_cert: 3050020\n};","module.exports = __webpack_public_path__ + \"static/media/greycat-head.1c3ecd4c.svg\";"],"sourceRoot":""}