// Generated by dts-bundle v0.7.3
// Dependencies for this module:
//   ../../isomorphic-ws

declare module '@greycat/core' {
    import WebSocket from 'isomorphic-ws';
    export { default as Keys } from '@greycat/core/__gen/keys';
    interface Reference {
        deleteRef(): void;
    }
    export type Property = string | string[] | boolean | number | Reference | Reference[] | Node | Node[] | Function | ULongArray | DoubleArray | IntArray | LongArray | null;
    export type FunctionBody<T = {}> = (t: Context<T>) => void;
    export class NodeType {
        ptr: number;
        constructor(nptr: number);
        declareFactory(factory: NodeFactory): void;
        declareAttribute(key: number | string, value: number | string): NodeType;
        declareConstant(key: number | string, value: number | string | Function | FunctionBody): NodeType;
        declareFunction<T = {}>(key: number | string, value: Function<T> | FunctionBody<T>): NodeType;
        toString(): string;
    }
    export class Context<T = {}> {
        ptr: number;
        userData: {
            [P in keyof T]?: T[P];
        };
        constructor(nptr: number);
        execute(f: Function<T> | number | string): void;
        prepareExecute(f: Function<T> | number | string): Context<T>;
        executePrepared(): void;
        ordinal(): number;
        onEnd(body: Function<T> | FunctionBody<T>): Context<T>;
        path(): string;
        toString(): string;
        toObject(): any;
        declare(key: number | string, value?: number | string): Context<T>;
        set(key: number | string, value: Property): Context<T>;
        get(prop: string | number): Property;
        bind(src: string | number, target: string | number): Context<T>;
    }
    export class ULongArray implements Reference {
        ptr: number;
        constructor(nptr: number);
        deleteRef(): void;
        toString(): string;
        get(offset: number): number;
        set(offset: number, value: number): ULongArray;
        add(value: number): number;
        size(): number;
    }
    export class LongArray implements Reference {
        ptr: number;
        constructor(nptr: number);
        deleteRef(): void;
        toString(): string;
        get(offset: number): number;
        set(offset: number, value: number): ULongArray;
        add(value: number): number;
        size(): number;
    }
    export class IntArray implements Reference {
        ptr: number;
        constructor(nptr: number);
        deleteRef(): void;
        toString(): string;
        get(offset: number): number;
        set(offset: number, value: number): ULongArray;
        add(value: number): number;
        size(): number;
    }
    export class DoubleArray implements Reference {
        ptr: number;
        constructor(nptr: number);
        deleteRef(): void;
        toString(): string;
        get(offset: number): number;
        set(offset: number, value: number): ULongArray;
        add(value: number): number;
        size(): number;
    }
    export class StringArray implements Reference {
        ptr: number;
        constructor(nptr: number);
        deleteRef(): void;
        toString(): string;
        get(offset: number): number;
        set(offset: number, value: string): StringArray;
        add(value: string): StringArray;
        values(...new_values: string[]): void;
        size(): number;
    }
    export class Param {
        type_code: number;
        key: number;
        value: any;
        constructor(type_code: number, key: number, value: any);
    }
    export class Params {
        ptr: number;
        constructor(capacity: number);
        addInt(key: number | string, value: number): Params;
        addLong(key: number | string, value: number): Params;
        addDouble(key: number | string, value: number): Params;
        addBool(key: number | string, value: boolean): Params;
        addNull(key: number | string): Params;
        addVarKey(key: number | string, value: number): Params;
        addVarKeyNew(key: number | string, value: number): Params;
        addFunctionKey(key: number | string, value: number): Params;
        addString(key: number | string, value: string): Params;
        addObject(key: number | string, value: ULongArray | LongArray | IntArray | DoubleArray | Function): Params;
        addTypedObject(key: number | string, value: number, type: number): Params;
        addAuto(key: number | string, value: Property): Params;
    }
    export class Function<T = {}> implements Reference {
        static params(capacity: number): Params;
        ptr: number;
        constructor(nptr: number);
        deleteRef(): void;
        name(name: string): Function<T>;
        pipe(sub: Function<T> | FunctionBody<T> | string | number, params?: Params): Function<T>;
        parse(greycatl_data: string): Function<T>;
        sync(): Function<T>;
        declareVar(value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, targetVar: string | number): Function<T>;
        assignVar(value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, targetVar: string | number): Function<T>;
        print(srcVar: number | string): Function<T>;
        printAppend(srcVar: number | string, targetVar?: number | string): Function<T>;
        printAll(): Function<T>;
        newNode(nodeType: number | string, targetVar: number | string): Function<T>;
        newTimepoint(srcVar: number | string, timestamp: number, targetVar: number | string): Function<T>;
        setAttribute(value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, targetVar: string | number, property: number | string): Function<T>;
        setReference(srcVar: number | string, targetVar: string | number, property: number | string): Function<T>;
        readProperty(srcVar: number | string, property: number | string, targetVar: string | number): Function<T>;
        repeat(nb_iteration: number, sub: Function<T> | FunctionBody | number): Function<T>;
        foreach(src: number | string, target: number | string, sub: Function<T> | FunctionBody<T> | number): Function<T>;
        loadGlobalIndex(index: string, target: number | string): Function<T>;
        newGlobalIndex(index: string, target: number | string): Function<T>;
        loadMasterIndex(target: number | string): Function<T>;
        configureIndex(target: number | string, property: number | string): Function<T>;
        addToIndex(src: number | string, target: number | string): Function<T>;
        queryIndex(src: number | string, value: boolean | number | string | ULongArray | LongArray | IntArray | DoubleArray, target: number | string): Function<T>;
    }
    export class Plugin {
        start(graph: Graph): void;
        stop(graph: Graph): void;
    }
    export class Node implements Reference {
        ptr: number;
        constructor(nptr: number);
        toString(): string;
        toObject(): any;
        set(key: number | string, value: number | string | Function | FunctionBody | null): Node;
        get(key: number | string): number | string | boolean | Reference | Function | null;
        getOrCreate(key: number | string, prop_type: number | string): number | string | boolean | Reference | null;
        deleteRef(): void;
    }
    export type NodeFactory = (t: number) => Node;
    export class Graph {
        ptr: number;
        factories: {
            [ptr: number]: NodeFactory;
        };
        constructor(cacheSize?: number, bufferSize?: number);
        enableDebug(): void;
        disableDebug(): void;
        declareMeta(meta_key: number, meta: string): void;
        declareFunction<T = {}>(id: number | string, func: Function<T> | FunctionBody<T>): void;
        declareType(id: number | string): NodeType;
        declarePlugin(plugin: Plugin): Graph;
        configurePlugin(plugin: string | number, params: Params): Graph;
        newFunction<T = {}>(body?: FunctionBody<T>): Function<T>;
        getFunction(id: number | string): Function | null;
        getType(id: number | string): NodeType | null;
        getMeta(id: number | string): string | null;
        newAnonymousFunction(body?: FunctionBody): Function;
        newContext<T = {}>(): Context<T>;
        newVolatile(type: number | string): Node | Reference | null;
        exportTypes(): string;
        exportFunctions(): string;
        destroy(): void;
        heapSize(): number;
        cacheSize(): number;
        bufferSize(): number;
    }
    export class WebSocketAdapter {
        buffer: Uint8Array[];
        socket: WebSocket;
        connected: boolean;
        constructor(s: WebSocket);
    }
    export class GreyCat {
        static _module: any;
        static elements: {
            [ptr: number]: Graph | FunctionBody | Context | Plugin | WebSocketAdapter;
        };
        static isInitiliazed: boolean;
        static Logger: Console;
        static onReady(callback: () => void): void;
        static newGraph(cacheSize?: number, bufferSize?: number): Graph;
        static newWebSocketClient(nptr: number, url_ptr: number, port: number, use_wss: number): void;
        static destroyWebSocketClient(nptr: number): void;
        static webSocketClientSend(client_id: number, data_ptr: number, len: number): void;
        static hash(str: string): number;
        static paramToKey(param: number | string, origin?: Function | Graph | NodeType | Node | Context): number;
    }
    export function intParam(key: number | string, value: number): Param;
    export function longParam(key: number | string, value: number): Param;
    export function doubleParam(key: number | string, value: number): Param;
    export function boolParam(key: number | string, value: number): Param;
    export function nullParam(key: number | string): Param;
    export function varKeyParam(key: number | string, value: number): Param;
    export function functionKeyParam(key: number | string, value: number): Param;
    export function stringParam(key: number | string, value: number): Param;
}

declare module '@greycat/core/__gen/keys' {
    const _default: {
        g_bool: number;
        g_true: number;
        g_false: number;
        g_int: number;
        g_long: number;
        g_ulong: number;
        g_double: number;
        g_string: number;
        g_template: number;
        g_null: number;
        g_matrix: number;
        g_number: number;
        g_double_array: number;
        g_int_array: number;
        g_long_array: number;
        g_ulong_array: number;
        g_ref_array: number;
        g_string_array: number;
        g_node: number;
        g_node_array: number;
        g_function: number;
        g_meta_key: number;
        g_var_key: number;
        g_var_key_new: number;
        g_var_offset: number;
        g_offset: number;
        g_read_offset: number;
        g_src: number;
        g_result: number;
        g_declare_var: number;
        g_assign_var: number;
        g_free_var: number;
        g_master_index: number;
        g_load_master_index: number;
        g_load_global_index: number;
        g_new_global_index: number;
        g_configure_index: number;
        g_configure: number;
        g_add_to_index: number;
        g_query_index: number;
        g_it: number;
        g_return: number;
        g_if_then_else: number;
        g_operator: number;
        g_then: number;
        g_else: number;
        g_all: number;
        g_name: number;
        g_result_temp: number;
        g_meta: number;
        g_session: number;
        g_sessions: number;
        g_node_generator: number;
        g_session_generator: number;
        g_id: number;
        g_ids: number;
        g_this: number;
        g_prop: number;
        g_key: number;
        g_keys: number;
        g_new_node: number;
        g_new_object: number;
        g_new_object_at: number;
        g_object_type: number;
        g_repeat: number;
        g_init: number;
        g_sync: number;
        g_merge: number;
        g_print: number;
        g_print_append: number;
        g_print_all: number;
        g_get_all: number;
        g_set: number;
        g_value: number;
        g_value2: number;
        g_values: number;
        g_blob: number;
        g_blob_ext: number;
        g_any: number;
        g_any_node: number;
        g_page: number;
        g_pages: number;
        g_seq: number;
        g_offsets: number;
        g_function_key: number;
        g_from: number;
        g_node_type: number;
        g_foreach: number;
        g_new_timepoint: number;
        g_new_node_timepoint: number;
        g_time: number;
        g_load: number;
        g_load_all: number;
        g_index: number;
        g_query: number;
        g_lookup: number;
        g_lookup_all: number;
        g_default: number;
        g_reference: number;
        g_index_hash: number;
        g_index_hash_candidates: number;
        g_index_hash_values: number;
        g_resolved_values: number;
        g_index_result: number;
        g_global_index: number;
        g_add: number;
        g_to: number;
        g_ordinal: number;
        g_param: number;
        g_set_attribute: number;
        g_set_reference: number;
        g_set_at: number;
        g_read_property: number;
        g_execute_property: number;
        g_console: number;
        g_nb: number;
        g_sub: number;
        g_i: number;
        g_j: number;
        g_k: number;
        g_callee_origin: number;
        g_callee_session: number;
        g_new_session: number;
        g_noop: number;
        g_std: number;
        g_path: number;
        g_port: number;
        g_leveldb: number;
        g_rocksdb: number;
        g_websocket_server: number;
        g_websocket_client: number;
        g_url: number;
        g_openblas: number;
        g_cublas: number;
        g_eigen: number;
        g_hybridblas: number;
        g_mqtt: number;
        g_mqtt_topic: number;
        g_mqtt_topics_list: number;
        g_mqtt_custom_parser: number;
        g_opcua_server: number;
        g_opcua_client: number;
        g_opcua_node_identifier_list: number;
        g_node_identifier: number;
        g_gateway: number;
        g_remotes: number;
        g_subscriptions: number;
        g_cursor: number;
        g_max: number;
        g_grafana: number;
        g_use_wss: number;
        g_cert: number;
    };
    export default _default;
}

